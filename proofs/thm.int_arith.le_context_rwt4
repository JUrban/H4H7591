Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.int_arith
% (54557)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 837
% Passive clauses: 8563
% Generated clauses: 23310
% Final active clauses: 777
% Final passive clauses: 7045
% Input formulas: 42
% Initial clauses: 177
% 
% Duplicate literals: 651
% Trivial inequalities: 158
% Fw subsumption resolutions: 2353
% Fw demodulations: 1085
% Bw demodulations: 57
% 
% Simple tautologies: 247
% Equational tautologies: 67
% Forward subsumptions: 9649
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 9357
% Factoring: 1462
% Forward superposition: 4307
% Backward superposition: 3319
% Self superposition: 41
% Equality factoring: 30
% Equality resolution: 41
% 
% Split clauses: 589
% Split components: 1185
% SAT solver clauses: 1134
% SAT solver unit clauses: 22
% SAT solver binary clauses: 184
% 
% Sat splits: 589
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1132
% TWLsolver calls for satisfiability: 481
% 
% Memory used [KB]: 10234
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.int_arith
% (54580)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 445
% Passive clauses: 2506
% Generated clauses: 12713
% Final active clauses: 392
% Final passive clauses: 1945
% Input formulas: 42
% Initial clauses: 177
% 
% Duplicate literals: 196
% Trivial inequalities: 22
% Fw subsumption resolutions: 1067
% Fw demodulations: 617
% Bw demodulations: 115
% Condensations: 260
% Global subsumptions: 13
% 
% Simple tautologies: 267
% Equational tautologies: 31
% Forward subsumptions: 4473
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 3640
% Factoring: 279
% Forward superposition: 1896
% Backward superposition: 1629
% Self superposition: 41
% Equality factoring: 26
% Equality resolution: 7
% 
% Split clauses: 85
% Split components: 175
% SAT solver clauses: 3374
% SAT solver unit clauses: 181
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 11
% 
% Sat splits: 85
% Sat splitting refutations: 17
% 
% TWLsolver clauses: 3321
% TWLsolver calls for satisfiability: 1698
% 
% Memory used [KB]: 12153
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f16915,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f226,f412,f410,f225,f411,f409,f415,f416,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2374,f2277,f2376,f2281,f2379,f2285,f2381,f2288,f2383,f2291,f2385,f2294,f2387,f2297,f2389,f2300,f2391,f2303,f2393,f2306,f2395,f2309,f2397,f2312,f2399,f2315,f2401,f2318,f2403,f2321,f2405,f2324,f2407,f2327,f2409,f2330,f2411,f2333,f2413,f2336,f2415,f2339,f2527,f2528,f2530,f2532,f2534,f2536,f2538,f2540,f2542,f2544,f2546,f2548,f2550,f2552,f2554,f2556,f2558,f2560,f2562,f2564,f2566,f2568,f2570,f2572,f2574,f2576,f2578,f2580,f2586,f2588,f2590,f2592,f2594,f2596,f2598,f2600,f2602,f2604,f2606,f2608,f2610,f2612,f2614,f2616,f2618,f2620,f2622,f2624,f2626,f2628,f2630,f2632,f2634,f2636,f2638,f2640,f2642,f2644,f2646,f2648,f2650,f2652,f2654,f2656,f2658,f2660,f2662,f2664,f2666,f2668,f2670,f2672,f2674,f2676,f2678,f2680,f2682,f2684,f2686,f2688,f4344,f4345,f4352,f4349,f4346,f4347,f4355,f4348,f4357,f4350,f4354,f4406,f4409,f4407,f4446,f4449,f4447,f4555,f4558,f4556,f4760,f4761,f4773,f4771,f5142,f5145,f5143,f5193,f5196,f5194,f5338,f5341,f5339,f5389,f5392,f5390,f5598,f5601,f5599,f5652,f5655,f2278,f5653,f6038,f6039,f6040,f6041,f6042,f6043,f6111,f6044,f6114,f6045,f6115,f6046,f6116,f6047,f6117,f6048,f6118,f6049,f6119,f6050,f6120,f6051,f6121,f6052,f6122,f6053,f6110,f6061,f6130,f6062,f6131,f6063,f6132,f6064,f6133,f6065,f6134,f6066,f6135,f6067,f6136,f6068,f6137,f6069,f6138,f6070,f6139,f6071,f6140,f6072,f6141,f6073,f6142,f6074,f6143,f6075,f6144,f6076,f6145,f6077,f6146,f6078,f6147,f6079,f6148,f6080,f6149,f6081,f6150,f6082,f6151,f6083,f6084,f6085,f6108,f6107,f6086,f6105,f6103,f6088,f6153,f6089,f6154,f6090,f6155,f6091,f6156,f6092,f6157,f6093,f6158,f6094,f6159,f6095,f6160,f6096,f6161,f6097,f6162,f6098,f6163,f6099,f6164,f6100,f6113,f6165,f6101,f6167,f6102,f6112,f6169,f9325,f9326,f9328,f9329,f9331,f9333,f9335,f9339,f9341,f9343,f9345,f9349,f9351,f9353,f9355,f9357,f9359,f9377,f9379,f9397,f9399,f9403,f9407,f9428,f9483,f9569,f9571,f9724,f9732,f9734,f9738,f9740,f9750,f9795,f9809,f9825,f9839,f9841,f9852,f9861,f9872,f9881,f9883,f9885,f9887,f9889,f11649,f11650,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9942,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9964,f9969,f10024,f10026,f10028,f10030,f10039,f10048,f10060,f10070,f10072,f10091,f10105,f10107,f10125,f10134,f10145,f10154,f10156,f10171,f10173,f10184,f10186,f10205,f10207,f10218,f10220,f10239,f10241,f10252,f10254,f10265,f10274,f10285,f10294,f10324,f10354,f10370,f10391,f10395,f10414,f10416,f10418,f10427,f10429,f10438,f10440,f10449,f10451,f10460,f10462,f10494,f10521,f10536,f10556,f10558,f10597,f10599,f10601,f10603,f10605,f10607,f10632,f10635,f10658,f10661,f10684,f10686,f10706,f10708,f10710,f10726,f10741,f10756,f10758,f10773,f10775,f10794,f10821,f10850,f10877,f10892,f10894,f10896,f10898,f10900,f10902,f10914,f10916,f10918,f10920,f10922,f10924,f10926,f10933,f10935,f10937,f10939,f10941,f10943,f10949,f10951,f10957,f10959,f10965,f10967,f10973,f10975,f10981,f10983,f10989,f10991,f10994,f10996,f10999,f11001,f11007,f11009,f11017,f11019,f11024,f11026,f11030,f11032,f11044,f11047,f11054,f11057,f11064,f11067,f11071,f11074,f11083,f11086,f11097,f11100,f11107,f11110,f11117,f11120,f11124,f11127,f11136,f11139,f11150,f11153,f11160,f11163,f11170,f11173,f11177,f11180,f11189,f11192,f11206,f11213,f11220,f11227,f11229,f11231,f11240,f11242,f11249,f11253,f11260,f11262,f11268,f11270,f11276,f11278,f11281,f11283,f11285,f11287,f11293,f11295,f11299,f11302,f11310,f11312,f11318,f11320,f11326,f11328,f11331,f11333,f11335,f11337,f11343,f11345,f11349,f11352,f11354,f11390,f11393,f11401,f11404,f11412,f11415,f11420,f11423,f11443,f11446,f11480,f11483,f11491,f11494,f11502,f11505,f11510,f11513,f11533,f11536,f11555,f11558,f11566,f11569,f11577,f11580,f11585,f11588,f11608,f11611,f11651,f11652,f11653,f11654,f11655,f11656,f11657,f11658,f11659,f11660,f11661,f11662,f11663,f11664,f11665,f11666,f11667,f11668,f11669,f11670,f11671,f11672,f11673,f11674,f11675,f11676,f11677,f11678,f11679,f11680,f11681,f11682,f11683,f11684,f11685,f11686,f11687,f11688,f11689,f11690,f11691,f11692,f11693,f11694,f11695,f11696,f11697,f11698,f11699,f11700,f11701,f11702,f11703,f11704,f11705,f11706,f11707,f11708,f11709,f11710,f11711,f11712,f11713,f11714,f11715,f11716,f11717,f11718,f11719,f11720,f11721,f11722,f11723,f11724,f11725,f11726,f11727,f11728,f11729,f11730,f11731,f11732,f11733,f11734,f11735,f11736,f11737,f11738,f11739,f11740,f11741,f11742,f11743,f11744,f11745,f11746,f11747,f11748,f11749,f11750,f11751,f11752,f11753,f11754,f11755,f11756,f11757,f11758,f11759,f11760,f11761,f11762,f11763,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f11771,f11772,f11773,f11774,f11775,f11776,f11777,f11778,f11779,f11780,f11781,f11782,f11783,f11784,f11785,f11786,f11787,f11788,f11789,f11790,f11791,f11792,f11793,f11794,f11795,f11796,f11797,f11798,f11799,f11800,f11801,f11802,f11803,f11804,f11805,f11806,f11807,f11808,f11809,f11810,f11811,f11812,f11813,f11814,f11815,f11816,f11817,f11818,f11819,f11820,f11821,f11822,f11823,f11824,f11825,f11826,f11827,f11828,f11829,f11830,f11831,f11832,f11833,f11834,f11835,f11836,f11837,f11838,f11839,f11840,f11841,f11842,f11843,f11845,f11846,f11848,f11849,f11851,f11853,f11855,f11857,f11859,f11860,f11862,f11864,f11866,f11868,f11870,f11872,f11873,f11874,f11875,f11880,f11881,f11883,f11885,f11886,f11887,f11888,f11889,f11890,f11891,f11893,f11894,f11895,f11896,f11898,f11899,f11900,f11901,f11902,f11903,f11904,f11905,f11912,f11913,f11914,f11915,f11916,f11917,f11918,f11919,f11920,f11921,f11922,f11923,f11924,f11925,f11926,f11927,f11928,f11929,f11930,f11931,f11932,f11933,f11934,f11935,f11936,f11937,f11938,f11939,f11940,f11941,f11942,f11943,f11944,f11945,f11946,f11947,f11948,f11949,f11950,f11951,f11952,f11953,f11954,f11955,f11956,f11957,f11958,f11959,f11960,f11961,f11962,f11963,f11964,f11965,f11966,f11967,f11968,f11969,f11970,f11971,f11972,f11973,f11974,f11975,f11976,f11977,f11978,f11979,f11980,f11981,f11982,f11983,f11984,f11985,f11986,f11987,f11988,f11989,f11990,f11991,f11992,f11993,f12038,f12039,f12040,f9327,f12041,f12517,f12519,f12522,f12525,f12535,f13198,f13199,f13209,f13211,f13213,f13215,f13217,f13219,f13221,f13223,f13225,f13227,f13229,f13231,f13233,f13235,f13237,f13239,f13241,f13243,f13245,f13247,f13249,f13251,f13253,f13255,f13257,f13259,f13261,f13263,f13265,f13267,f13271,f13275,f13277,f13281,f13285,f13289,f13293,f13297,f13299,f13301,f13305,f13309,f13311,f13313,f13315,f13317,f13319,f13321,f13323,f13325,f13327,f13329,f13331,f13333,f13335,f13337,f13339,f13341,f13343,f13345,f13347,f13349,f13351,f13353,f13355,f13357,f13359,f13361,f13363,f13365,f13367,f13369,f13371,f13373,f13375,f13377,f13379,f13381,f13383,f13385,f13387,f13389,f13393,f13397,f13401,f13405,f13409,f13413,f13417,f13419,f13421,f13425,f13429,f13431,f13433,f13435,f13437,f13439,f13441,f13447,f13449,f13451,f13453,f13455,f13457,f13459,f13461,f13463,f13465,f13467,f13469,f13471,f13473,f13475,f13477,f13479,f13481,f13483,f13485,f13487,f13489,f13491,f13493,f13495,f13497,f13499,f13501,f13503,f13505,f13509,f13513,f13515,f13517,f13519,f13523,f13527,f13529,f13531,f13533,f13535,f13539,f13543,f13545,f13547,f13549,f13553,f13557,f13561,f13565,f13569,f13573,f13575,f13577,f13579,f13583,f13587,f13591,f13593,f13595,f13597,f13599,f13601,f13603,f13605,f13607,f13611,f13615,f13619,f13621,f13623,f13625,f13627,f13631,f13635,f13639,f13641,f13643,f13645,f13647,f13649,f13651,f13655,f13659,f13663,f13665,f13667,f13669,f13671,f13675,f13679,f13683,f13685,f13687,f13689,f13691,f13693,f13695,f13697,f13699,f13701,f13703,f13705,f13707,f13709,f13711,f13713,f13715,f13717,f13719,f13721,f13723,f13725,f13727,f13729,f13731,f13733,f13737,f13741,f13745,f13749,f13753,f13757,f13761,f13765,f13769,f13773,f13777,f13781,f13785,f13789,f13793,f13797,f13801,f13805,f13807,f13809,f13811,f13813,f13815,f13817,f13819,f13821,f13823,f13825,f13827,f13829,f13831,f13833,f13835,f13837,f13839,f13841,f13843,f13845,f13847,f13849,f13851,f13853,f13855,f13857,f13859,f13861,f13863,f13865,f13867,f13869,f13871,f13873,f13875,f13877,f13879,f13881,f13883,f13885,f13887,f13889,f13891,f13893,f13895,f13897,f13899,f13901,f13903,f13905,f13907,f13909,f13911,f13913,f13915,f13917,f13919,f13921,f13923,f13925,f13927,f13929,f13931,f13933,f13935,f13937,f13939,f13941,f13943,f13945,f13947,f13949,f13951,f13953,f13955,f13957,f13959,f13961,f13963,f13965,f13967,f13969,f13971,f13973,f13975,f13977,f13979,f13981,f13983,f13985,f13987,f13989,f13991,f13993,f13995,f13997,f13999,f14001,f14003,f14005,f14007,f14009,f14011,f14013,f14015,f14017,f14019,f14021,f14023,f14025,f14027,f14029,f14031,f14033,f14035,f14037,f14039,f14041,f14043,f14045,f14047,f14049,f14051,f14053,f14055,f14057,f14059,f14061,f14063,f14065,f14067,f14069,f14071,f14073,f14075,f14077,f14079,f14081,f14083,f14085,f14087,f14089,f14091,f14093,f14095,f14097,f14099,f14101,f14103,f14105,f14107,f14109,f14111,f14113,f14115,f14117,f14119,f14121,f14123,f14125,f14127,f14132,f14143,f14145,f14149,f16910])).
fof(f16910,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f16909,f413])).
fof(f413,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f231,f227])).
fof(f227,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.le_context_rwt4',aHL_TRUTH)).
fof(f231,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f17])).
fof(f17,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.int_arith.le_context_rwt4','thm.bool.NOT_CLAUSES|split|1')).
fof(f16909,plain,(
  p(s(bool,'F_0')) | $spl0),
  inference(forward_demodulation,[],[f16355,f491])).
fof(f491,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f272,f250])).
fof(f250,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.int_arith.le_context_rwt4','thm.bool.EQ_CLAUSES|split|3')).
fof(f272,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X7] : ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X7))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_LT_REFL')).
fof(f16355,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl0),
  inference(unit_resulting_resolution,[],[f16221,f1441])).
fof(f1441,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK13)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))))) )),
  inference(subsumption_resolution,[],[f1431,f227])).
fof(f1431,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK13))))) )),
  inference(superposition,[],[f319,f473])).
fof(f473,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f224,f246])).
fof(f246,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.int_arith.le_context_rwt4','thm.bool.EQ_CLAUSES|split|1')).
fof(f224,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))))),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) | p(s(bool,'F_0'))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) | ~p(s(bool,'F_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f148])).
fof(f148,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) | p(s(bool,'F_0'))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) | ~p(s(bool,'F_0'))))),
  inference(flattening,[],[f147])).
fof(f147,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) & ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) | p(s(bool,'F_0'))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) | ~p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f104])).
fof(f104,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) <~> p(s(bool,'F_0'))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) <~> p(s(bool,'F_0')))))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X0))) <=> p(s(bool,'F_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7)))))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8))),s('type.integer.int',X6))) <=> p(s(bool,'F_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7)))))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8))),s('type.integer.int',X6))) <=> p(s(bool,'F_0')))))),
  file('thm.int_arith.le_context_rwt4','thm.int_arith.le_context_rwt4')).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(ennf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) => p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X7,X6,X15] : ((p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X15))))) => p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X15)))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_LET_TRANS')).
fof(f16221,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',sK13)))) | $spl0),
  inference(unit_resulting_resolution,[],[f15735,f339])).
fof(f339,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f195])).
fof(f195,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X1,X0,X2] : (sP3(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f15735,plain,(
  ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',sK13)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f413,f453,f450,f3755,f332])).
fof(f332,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X2,X1) | p(s(bool,X0)) | sP5(X0,X1,X2) | ~sP3(X1,X2,X0) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP2(X2,X1,X0) & sP3(X1,X2,X0) & sP4(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP2(X2,X1,X0) | ~sP3(X1,X2,X0) | ~sP4(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f189])).
fof(f189,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP5(X2,X1,X0)))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP5(X2,X1,X0)))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X2,X1,X0] : (sP5(X2,X1,X0) <=> (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f3755,plain,(
  ( ! [X4] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X4)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',X4)))) ) | $spl0),
  inference(superposition,[],[f1450,f3586])).
fof(f3586,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl0),
  inference(forward_demodulation,[],[f3543,f229])).
fof(f229,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(cnf_transformation,[],[f33])).
fof(f33,axiom,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_NEG_|48|')).
fof(f3543,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl0),
  inference(superposition,[],[f1390,f409])).
fof(f1390,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f275,f235])).
fof(f235,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X7] : s('type.integer.int',X7) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7)))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_NEGNEG')).
fof(f275,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X7,X6] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X6))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_NEG_ADD')).
fof(f1450,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))),'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f413,f318,f348])).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP5(X2,X1,X0)) & (~sP5(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP5(X2,X1,X0))),
  inference(definition_folding,[],[f96,f136,f135,f134,f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : (sP2(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f135,plain,(
  ! [X2,X0,X1] : (sP4(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f96,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X16,X17,X18] : ((p(s(bool,X18)) <=> s(bool,X16) = s(bool,X17)) <=> ((p(s(bool,X18)) | p(s(bool,X17)) | p(s(bool,X16))) & (p(s(bool,X18)) | ~p(s(bool,X16)) | ~p(s(bool,X17))) & (p(s(bool,X17)) | ~p(s(bool,X16)) | ~p(s(bool,X18))) & (p(s(bool,X16)) | ~p(s(bool,X17)) | ~p(s(bool,X18)))))),
  file('thm.int_arith.le_context_rwt4','thm.sat.sat_2|49|_prove_ltb')).
fof(f318,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X7,X6,X15] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X15))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X15)))))),
  file('thm.int_arith.le_context_rwt4','thm.integer.INT_LE_LADD')).
fof(f450,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f334])).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f192])).
fof(f192,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(nnf_transformation,[],[f135])).
fof(f223,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))),
  inference(cnf_transformation,[],[f149])).
fof(f453,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X1)) )),
  inference(unit_resulting_resolution,[],[f223,f343])).
fof(f343,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(flattening,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(nnf_transformation,[],[f133])).
fof(f14149,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f14131,f14148])).
fof(f14148,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12490,f12509])).
fof(f12490,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,X0) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl82),
  inference(equality_factoring,[],[f6103])).
fof(f14131,plain,(
  ( ! [X1] : (p(s(bool,X1))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f14130,f12509])).
fof(f14130,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X1))) ) | $spl82),
  inference(subsumption_resolution,[],[f12339,f245])).
fof(f12339,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl82),
  inference(superposition,[],[f245,f6103])).
fof(f13886,plain,(
  ( ! [X4,X2,X5,X3] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13026,f227])).
fof(f13026,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9156])).
fof(f13884,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13025,f227])).
fof(f13025,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9081])).
fof(f13882,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13024,f227])).
fof(f13024,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9020])).
fof(f13880,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (sP5(X32,X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31))))))))) | ~sP4(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33) | ~sP3(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13023,f227])).
fof(f13023,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | sP5(X32,X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31))))))))) | ~sP4(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33) | ~sP3(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5891])).
fof(f13878,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13022,f227])).
fof(f13022,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5794])).
fof(f13876,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13021,f227])).
fof(f13021,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5707])).
fof(f13874,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (p(s(bool,X32)) | p(s(bool,X33)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13020,f227])).
fof(f13020,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | p(s(bool,X33)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5524])).
fof(f13872,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (p(s(bool,X32)) | p(s(bool,X33)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32,X33)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13019,f227])).
fof(f13019,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | p(s(bool,X33)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32,X33)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5445])).
fof(f13870,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X189))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X190)))))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13016,f227])).
fof(f13016,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,'T_0')) | p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X189))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X190)))))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5070])).
fof(f13868,plain,(
  ( ! [X187,X185,X186,X184] : (p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X185))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X186)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13015,f227])).
fof(f13015,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,'T_0')) | p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X185))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X186)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5069])).
fof(f13866,plain,(
  ( ! [X182,X180,X183,X181] : (p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X181))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X182)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13014,f227])).
fof(f13014,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,'T_0')) | p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X181))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X182)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5068])).
fof(f13864,plain,(
  ( ! [X177,X178,X176,X179] : (p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X177))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X178)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13013,f227])).
fof(f13013,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,'T_0')) | p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X177))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X178)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5067])).
fof(f13862,plain,(
  ( ! [X154,X152,X155,X153] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X153))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X154)))))),X155)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13012,f227])).
fof(f13012,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X153))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X154)))))),X155)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5061])).
fof(f13860,plain,(
  ( ! [X151,X149,X150,X148] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X149))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X150)))))),X151)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13011,f227])).
fof(f13011,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X149))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X150)))))),X151)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5060])).
fof(f13858,plain,(
  ( ! [X146,X144,X147,X145] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X146)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13010,f227])).
fof(f13010,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X146)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5059])).
fof(f13856,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13009,f227])).
fof(f13009,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5058])).
fof(f13854,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13008,f227])).
fof(f13008,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5057])).
fof(f13852,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X131)))))),X133,X132)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13007,f227])).
fof(f13007,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X131)))))),X133,X132)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5056])).
fof(f13850,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X126)))))),X127,X128)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13006,f227])).
fof(f13006,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | ~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X126)))))),X127,X128)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5055])).
fof(f13848,plain,(
  ( ! [X123,X121,X122,X120,X119] : (p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X120))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X121)))))),X123,X122)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13005,f227])).
fof(f13005,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,'T_0')) | p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X120))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X121)))))),X123,X122)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5054])).
fof(f13846,plain,(
  ( ! [X118,X116,X114,X117,X115] : (p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X115))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X116)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13004,f227])).
fof(f13004,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X115))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X116)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5053])).
fof(f13844,plain,(
  ( ! [X111,X109,X112,X110,X113] : (p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X110))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X111)))))),X113,X112)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13003,f227])).
fof(f13003,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,'T_0')) | p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X110))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X111)))))),X113,X112)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5052])).
fof(f13842,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X106)))))),X107,X108)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13002,f227])).
fof(f13002,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X106)))))),X107,X108)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5051])).
fof(f13840,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X101)))))),X103,X102)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13001,f227])).
fof(f13001,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,'T_0')) | ~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X101)))))),X103,X102)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5050])).
fof(f13838,plain,(
  ( ! [X94,X97,X95,X98,X96] : (p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X96)))))),X97,X98)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13000,f227])).
fof(f13000,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X96)))))),X97,X98)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5049])).
fof(f13836,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X90))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X91)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12999,f227])).
fof(f12999,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X90))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X91)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5048])).
fof(f13834,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))),X88)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12998,f227])).
fof(f12998,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))),X88)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5047])).
fof(f13832,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X81)))))),X83)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12997,f227])).
fof(f12997,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X81)))))),X83)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5046])).
fof(f13830,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X76)))))),X78)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12996,f227])).
fof(f12996,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X76)))))),X78)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5045])).
fof(f13828,plain,(
  ( ! [X70,X72,X71,X69,X73] : (sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71))))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73,X72)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12995,f227])).
fof(f12995,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,'T_0')) | sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71))))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73,X72)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5044])).
fof(f13826,plain,(
  ( ! [X68,X66,X67,X65] : (p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X67)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12994,f227])).
fof(f12994,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X67)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5043])).
fof(f13824,plain,(
  ( ! [X61,X64,X62,X63] : (p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X63)))))),X64)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12993,f227])).
fof(f12993,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X63)))))),X64)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5042])).
fof(f13822,plain,(
  ( ! [X59,X57,X60,X58] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X59)))))),X60)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12992,f227])).
fof(f12992,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X59)))))),X60)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5041])).
fof(f13820,plain,(
  ( ! [X54,X56,X55,X53] : (sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12991,f227])).
fof(f12991,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5040])).
fof(f13818,plain,(
  ( ! [X24,X23,X21,X25,X22] : (sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X22))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X23)))))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12990,f227])).
fof(f12990,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'T_0')) | sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X22))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X23)))))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5031])).
fof(f13816,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X18)))))))),X20)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12989,f227])).
fof(f12989,plain,(
  ( ! [X19,X17,X20,X18,X16] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X18)))))))),X20)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5030])).
fof(f13814,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X12))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13)))))))),X14)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12988,f227])).
fof(f12988,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X12))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13)))))))),X14)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5029])).
fof(f13812,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X8)))))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12987,f227])).
fof(f12987,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X8)))))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5028])).
fof(f13810,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))))),X5,X3)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12986,f227])).
fof(f12986,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))))),X5,X3)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5027])).
fof(f13696,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (sP5(X16,X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15))))))) | ~sP4(X16,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17) | ~sP3(X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12937,f227])).
fof(f12937,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | sP5(X16,X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15))))))) | ~sP4(X16,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17) | ~sP3(X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5888])).
fof(f13694,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12935,f227])).
fof(f12935,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5791])).
fof(f13692,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12933,f227])).
fof(f12933,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5704])).
fof(f13690,plain,(
  ( ! [X94,X92,X95,X93] : (p(s(bool,X94)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12932,f227])).
fof(f12932,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | p(s(bool,X94)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5659])).
fof(f13688,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X52)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12931,f227])).
fof(f12931,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5657])).
fof(f13682,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (p(s(bool,X90)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13681,f227])).
fof(f13681,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13680,f12509])).
fof(f13680,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12927,f227])).
fof(f12927,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5647])).
fof(f13674,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (p(s(bool,X71)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13673,f227])).
fof(f13673,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13672,f12509])).
fof(f13672,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12925,f227])).
fof(f12925,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5644])).
fof(f13670,plain,(
  ( ! [X94,X92,X95,X93] : (p(s(bool,X92)) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12924,f227])).
fof(f12924,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | p(s(bool,X92)) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5605])).
fof(f13668,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X50)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X50,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12923,f227])).
fof(f12923,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X50,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5603])).
fof(f13662,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (p(s(bool,X88)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),X88,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13661,f227])).
fof(f13661,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | p(s(bool,X88)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),X88,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13660,f12509])).
fof(f13660,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X88)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),X88,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12919,f227])).
fof(f12919,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X88)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),X88,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5593])).
fof(f13654,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (p(s(bool,X69)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),X69,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X71)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13653,f227])).
fof(f13653,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X69)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),X69,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X71)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13652,f12509])).
fof(f13652,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (p(s(bool,X69)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X70),s('type.integer.int',X71)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),X69,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X71)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12917,f227])).
fof(f12917,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X69)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X70),s('type.integer.int',X71)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),X69,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X71)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5590])).
fof(f13650,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (p(s(bool,X16)) | p(s(bool,X17)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12915,f227])).
fof(f12915,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X16)) | p(s(bool,X17)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5521])).
fof(f13648,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (p(s(bool,X16)) | p(s(bool,X17)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16,X17)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12913,f227])).
fof(f12913,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X16)) | p(s(bool,X17)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16,X17)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5442])).
fof(f13646,plain,(
  ( ! [X94,X92,X95,X93] : (p(s(bool,X94)) | ~sP7(X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12912,f227])).
fof(f12912,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | p(s(bool,X94)) | ~sP7(X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5396])).
fof(f13644,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X52)) | ~sP7(X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12911,f227])).
fof(f12911,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | ~sP7(X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5394])).
fof(f13638,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (p(s(bool,X90)) | ~sP7(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13637,f227])).
fof(f13637,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | ~sP7(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13636,f12509])).
fof(f13636,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP7(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12907,f227])).
fof(f12907,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP7(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5384])).
fof(f13630,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (p(s(bool,X71)) | ~sP7(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13629,f227])).
fof(f13629,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP7(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13628,f12509])).
fof(f13628,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP7(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12905,f227])).
fof(f12905,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP7(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5381])).
fof(f13626,plain,(
  ( ! [X94,X92,X95,X93] : (p(s(bool,X94)) | ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12904,f227])).
fof(f12904,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | p(s(bool,X94)) | ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5345])).
fof(f13624,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X52)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12903,f227])).
fof(f12903,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5343])).
fof(f13618,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (p(s(bool,X90)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13617,f227])).
fof(f13617,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13616,f12509])).
fof(f13616,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12899,f227])).
fof(f12899,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X90)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5333])).
fof(f13610,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13609,f227])).
fof(f13609,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13608,f12509])).
fof(f13608,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12897,f227])).
fof(f12897,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5330])).
fof(f13596,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,X90)) | ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12891,f227])).
fof(f12891,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5199])).
fof(f13594,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X48)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12890,f227])).
fof(f12890,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5197])).
fof(f13590,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (p(s(bool,X86)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13589,f227])).
fof(f13589,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13588,f12509])).
fof(f13588,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | p(s(bool,X86)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12887,f227])).
fof(f12887,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | p(s(bool,X86)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5188])).
fof(f13582,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (p(s(bool,X67)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13581,f227])).
fof(f13581,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,X67)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13580,f12509])).
fof(f13580,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12885,f227])).
fof(f12885,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5185])).
fof(f13578,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,X90)) | ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12884,f227])).
fof(f12884,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'T_0')) | p(s(bool,X90)) | ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5148])).
fof(f13576,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X48)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12883,f227])).
fof(f12883,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5146])).
fof(f13572,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (p(s(bool,X86)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13571,f227])).
fof(f13571,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13570,f12509])).
fof(f13570,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | p(s(bool,X86)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12880,f227])).
fof(f12880,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | p(s(bool,X86)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5137])).
fof(f13564,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (p(s(bool,X67)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13563,f227])).
fof(f13563,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,X67)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13562,f12509])).
fof(f13562,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12878,f227])).
fof(f12878,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5134])).
fof(f13560,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X207))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X208)))))),X212)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13559,f227])).
fof(f13559,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X207))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X208)))))),X212)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13558,f12509])).
fof(f13558,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X207),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X208)))))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X207))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X208)))))),X212)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12877,f227])).
fof(f12877,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X207),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X208)))))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X207))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X208)))))),X212)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5073])).
fof(f13556,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X200))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X201)))))),X205)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13555,f227])).
fof(f13555,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X200))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X201)))))),X205)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13554,f12509])).
fof(f13554,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X200),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X201)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X200))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X201)))))),X205)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12876,f227])).
fof(f12876,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X200),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X201)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X200))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X201)))))),X205)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5072])).
fof(f13552,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X193))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X194)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13551,f227])).
fof(f13551,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X193))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X194)))))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13550,f12509])).
fof(f13550,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X193),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X194)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X193))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X194)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12875,f227])).
fof(f12875,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X193),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X194)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X193))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X194)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5071])).
fof(f13548,plain,(
  ( ! [X70,X68,X69,X67] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12874,f227])).
fof(f12874,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4560])).
fof(f13546,plain,(
  ( ! [X47,X48,X46,X49] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12873,f227])).
fof(f12873,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4559])).
fof(f13538,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13537,f227])).
fof(f13537,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13536,f12509])).
fof(f13536,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12869,f227])).
fof(f12869,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4549])).
fof(f13534,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,X10)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X12,X10)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12867,f227])).
fof(f12867,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X12,X10)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4492])).
fof(f13532,plain,(
  ( ! [X70,X68,X69,X67] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12866,f227])).
fof(f12866,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4451])).
fof(f13530,plain,(
  ( ! [X47,X48,X46,X49] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12865,f227])).
fof(f12865,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4450])).
fof(f13522,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13521,f227])).
fof(f13521,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13520,f12509])).
fof(f13520,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12861,f227])).
fof(f12861,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4440])).
fof(f13518,plain,(
  ( ! [X70,X68,X69,X67] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),X70,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12860,f227])).
fof(f12860,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),X70,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4411])).
fof(f13516,plain,(
  ( ! [X47,X48,X46,X49] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),X49,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12859,f227])).
fof(f12859,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),X49,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4410])).
fof(f13508,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13507,f227])).
fof(f13507,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13506,f12509])).
fof(f13506,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12855,f227])).
fof(f12855,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4400])).
fof(f13504,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X8)) | sP1(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12853,f227])).
fof(f12853,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | p(s(bool,X8)) | sP1(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4282])).
fof(f13502,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,X8)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X8)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12851,f227])).
fof(f12851,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | p(s(bool,X8)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X8)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4229])).
fof(f13500,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X9)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12849,f227])).
fof(f12849,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X9)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4176])).
fof(f13498,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12847,f227])).
fof(f12847,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | sP0(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4123])).
fof(f13496,plain,(
  ( ! [X144,X142,X145,X143] : (p(s(bool,X145)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12842,f227])).
fof(f12842,plain,(
  ( ! [X144,X142,X145,X143] : (~p(s(bool,'T_0')) | p(s(bool,X145)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1504])).
fof(f13494,plain,(
  ( ! [X140,X138,X141,X139] : (p(s(bool,X141)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X139))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X140)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X141)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12841,f227])).
fof(f12841,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'T_0')) | p(s(bool,X141)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X139))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X140)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X141)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1503])).
fof(f13492,plain,(
  ( ! [X134,X136,X135,X137] : (p(s(bool,X137)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X137)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12840,f227])).
fof(f12840,plain,(
  ( ! [X134,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X137)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X137)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1502])).
fof(f13490,plain,(
  ( ! [X132,X130,X133,X131] : (p(s(bool,X133)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X131))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X132)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X133)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12839,f227])).
fof(f12839,plain,(
  ( ! [X132,X130,X133,X131] : (~p(s(bool,'T_0')) | p(s(bool,X133)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X131))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X132)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X133)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1501])).
fof(f13488,plain,(
  ( ! [X127,X128,X126,X129] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X127))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X128)))),X129)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12838,f227])).
fof(f12838,plain,(
  ( ! [X127,X128,X126,X129] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X127))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X128)))),X129)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1500])).
fof(f13486,plain,(
  ( ! [X125,X123,X124,X122] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X125)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12837,f227])).
fof(f12837,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X125)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1499])).
fof(f13484,plain,(
  ( ! [X121,X118,X120,X119] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X119))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X120)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12836,f227])).
fof(f12836,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X119))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X120)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1498])).
fof(f13482,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12835,f227])).
fof(f12835,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1497])).
fof(f13480,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12834,f227])).
fof(f12834,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1496])).
fof(f13478,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,X106)) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X104))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X105)))),X107,X106)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12833,f227])).
fof(f12833,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X106)) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X104))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X105)))),X107,X106)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1495])).
fof(f13476,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,X101)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X99))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X100)))),X101,X102)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12832,f227])).
fof(f12832,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,'T_0')) | ~p(s(bool,X101)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X99))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X100)))),X101,X102)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1494])).
fof(f13474,plain,(
  ( ! [X94,X97,X95,X93,X96] : (p(s(bool,X96)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X95)))),X97,X96)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12831,f227])).
fof(f12831,plain,(
  ( ! [X94,X97,X95,X93,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X95)))),X97,X96)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1493])).
fof(f13472,plain,(
  ( ! [X92,X90,X88,X91,X89] : (~p(s(bool,X92)) | p(s(bool,X91)) | ~sP10(X92,X91,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12830,f227])).
fof(f12830,plain,(
  ( ! [X92,X90,X88,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X91)) | ~sP10(X92,X91,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X90)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1492])).
fof(f13470,plain,(
  ( ! [X87,X85,X83,X86,X84] : (p(s(bool,X86)) | p(s(bool,X87)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X85)))),X87,X86)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12829,f227])).
fof(f12829,plain,(
  ( ! [X87,X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | p(s(bool,X87)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X85)))),X87,X86)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1491])).
fof(f13468,plain,(
  ( ! [X80,X78,X81,X79,X82] : (~p(s(bool,X81)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X80)))),X81,X82)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12828,f227])).
fof(f12828,plain,(
  ( ! [X80,X78,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X81)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X80)))),X81,X82)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1490])).
fof(f13466,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,X76)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X75)))),X77,X76)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12827,f227])).
fof(f12827,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X76)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X75)))),X77,X76)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1489])).
fof(f13464,plain,(
  ( ! [X70,X68,X72,X71,X69] : (p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70)))),X71,X72)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12826,f227])).
fof(f12826,plain,(
  ( ! [X70,X68,X72,X71,X69] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70)))),X71,X72)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1488])).
fof(f13462,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,X66)) | p(s(bool,X67)) | ~sP7(X67,X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X65)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12825,f227])).
fof(f12825,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X66)) | p(s(bool,X67)) | ~sP7(X67,X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X65)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1487])).
fof(f13460,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,X61)) | p(s(bool,X62)) | ~sP6(X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X60)))),X62)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12824,f227])).
fof(f12824,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X61)) | p(s(bool,X62)) | ~sP6(X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X60)))),X62)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1486])).
fof(f13458,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP3(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))),X57)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12823,f227])).
fof(f12823,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP3(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))),X57)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1485])).
fof(f13456,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,X51)) | p(s(bool,X52)) | ~sP4(X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X50)))),X52)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12822,f227])).
fof(f12822,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X51)) | p(s(bool,X52)) | ~sP4(X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X50)))),X52)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1484])).
fof(f13454,plain,(
  ( ! [X47,X45,X43,X46,X44] : (sP5(X46,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45))))) | ~sP4(X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47) | ~sP3(X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X46) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47,X46)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12821,f227])).
fof(f12821,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'T_0')) | sP5(X46,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45))))) | ~sP4(X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47) | ~sP3(X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X46) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47,X46)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1483])).
fof(f13452,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X42)) | sP1(X42,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X41)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12820,f227])).
fof(f12820,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X42)) | sP1(X42,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X41)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1482])).
fof(f13450,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,X38)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X37)))),X38)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12819,f227])).
fof(f12819,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X38)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X37)))),X38)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1481])).
fof(f13448,plain,(
  ( ! [X33,X31,X34,X32] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X33)))),X34)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12818,f227])).
fof(f12818,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X33)))),X34)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1480])).
fof(f13446,plain,(
  ( ! [X30,X28,X29,X27] : (sP0(X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X29)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12817,f227])).
fof(f12817,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'T_0')) | sP0(X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X29)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1479])).
fof(f13440,plain,(
  ( ! [X4,X2,X5,X3] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12812,f227])).
fof(f12812,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9135])).
fof(f13438,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12811,f227])).
fof(f12811,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9060])).
fof(f13436,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12810,f227])).
fof(f12810,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8999])).
fof(f13434,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (sP5(X22,X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21))))))) | ~sP4(X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23) | ~sP3(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12809,f227])).
fof(f12809,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | sP5(X22,X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21))))))) | ~sP4(X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23) | ~sP3(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5889])).
fof(f13432,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12808,f227])).
fof(f12808,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5792])).
fof(f13430,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12807,f227])).
fof(f12807,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5705])).
fof(f13428,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (p(s(bool,X78)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13427,f227])).
fof(f13427,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X78)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13426,f12509])).
fof(f13426,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12806,f227])).
fof(f12806,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5645])).
fof(f13424,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (p(s(bool,X76)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13423,f227])).
fof(f13423,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13422,f12509])).
fof(f13422,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (p(s(bool,X76)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12805,f227])).
fof(f12805,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5591])).
fof(f13420,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,X22)) | p(s(bool,X23)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12804,f227])).
fof(f12804,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X22)) | p(s(bool,X23)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5522])).
fof(f13418,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,X22)) | p(s(bool,X23)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22,X23)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12803,f227])).
fof(f12803,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X22)) | p(s(bool,X23)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22,X23)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5443])).
fof(f13416,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (p(s(bool,X78)) | ~sP7(X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13415,f227])).
fof(f13415,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X78)) | ~sP7(X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13414,f12509])).
fof(f13414,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP7(X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12802,f227])).
fof(f12802,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP7(X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5382])).
fof(f13412,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (p(s(bool,X78)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13411,f227])).
fof(f13411,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X78)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13410,f12509])).
fof(f13410,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12801,f227])).
fof(f12801,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5331])).
fof(f13408,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X74)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13407,f227])).
fof(f13407,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X74)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13406,f12509])).
fof(f13406,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12800,f227])).
fof(f12800,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5186])).
fof(f13404,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X74)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13403,f227])).
fof(f13403,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X74)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13402,f12509])).
fof(f13402,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12799,f227])).
fof(f12799,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5135])).
fof(f13400,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X207))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X208)))),X212)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13399,f227])).
fof(f13399,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X207))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X208)))),X212)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13398,f12509])).
fof(f13398,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X209),s('type.integer.int',X210)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X207))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X208)))),X212)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12796,f227])).
fof(f12796,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X209),s('type.integer.int',X210)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X207))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X208)))),X212)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4926])).
fof(f13396,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X200))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X201)))),X205)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13395,f227])).
fof(f13395,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X200))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X201)))),X205)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13394,f12509])).
fof(f13394,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X202),s('type.integer.int',X203)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X200))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X201)))),X205)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12795,f227])).
fof(f12795,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X202),s('type.integer.int',X203)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X200))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X201)))),X205)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4925])).
fof(f13392,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X193))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X194)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13391,f227])).
fof(f13391,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X193))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X194)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f13390,f12509])).
fof(f13390,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X195),s('type.integer.int',X196)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X193))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X194)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12794,f227])).
fof(f12794,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X195),s('type.integer.int',X196)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X193))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X194)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4924])).
fof(f13388,plain,(
  ( ! [X191,X189,X190,X188] : (p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X189))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X190)))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12793,f227])).
fof(f12793,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,'T_0')) | p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X189))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X190)))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4923])).
fof(f13386,plain,(
  ( ! [X187,X185,X186,X184] : (p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X185))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X186)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12792,f227])).
fof(f12792,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,'T_0')) | p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X185))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X186)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4922])).
fof(f13384,plain,(
  ( ! [X182,X180,X183,X181] : (p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X181))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X182)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12791,f227])).
fof(f12791,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,'T_0')) | p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X181))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X182)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4921])).
fof(f13382,plain,(
  ( ! [X177,X178,X176,X179] : (p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X177))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X178)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12790,f227])).
fof(f12790,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,'T_0')) | p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X177))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X178)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4920])).
fof(f13380,plain,(
  ( ! [X154,X152,X155,X153] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X154)))),X155)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12789,f227])).
fof(f12789,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X154)))),X155)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4914])).
fof(f13378,plain,(
  ( ! [X151,X149,X150,X148] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X150)))),X151)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12788,f227])).
fof(f12788,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X150)))),X151)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4913])).
fof(f13376,plain,(
  ( ! [X146,X144,X147,X145] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X145))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X146)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12787,f227])).
fof(f12787,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X145))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X146)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4912])).
fof(f13374,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12786,f227])).
fof(f12786,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4911])).
fof(f13372,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12785,f227])).
fof(f12785,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4910])).
fof(f13370,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X130))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X131)))),X133,X132)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12784,f227])).
fof(f12784,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X130))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X131)))),X133,X132)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4909])).
fof(f13368,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X125))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X126)))),X127,X128)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12783,f227])).
fof(f12783,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | ~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X125))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X126)))),X127,X128)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4908])).
fof(f13366,plain,(
  ( ! [X123,X121,X122,X120,X119] : (p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X121)))),X123,X122)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12782,f227])).
fof(f12782,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,'T_0')) | p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X121)))),X123,X122)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4907])).
fof(f13364,plain,(
  ( ! [X118,X116,X114,X117,X115] : (p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X115))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X116)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12781,f227])).
fof(f12781,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X115))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X116)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4906])).
fof(f13362,plain,(
  ( ! [X111,X109,X112,X110,X113] : (p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X110))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X111)))),X113,X112)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12780,f227])).
fof(f12780,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,'T_0')) | p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X110))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X111)))),X113,X112)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4905])).
fof(f13360,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X105))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X106)))),X107,X108)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12779,f227])).
fof(f12779,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X105))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X106)))),X107,X108)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4904])).
fof(f13358,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X101)))),X103,X102)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12778,f227])).
fof(f12778,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,'T_0')) | ~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X101)))),X103,X102)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4903])).
fof(f13356,plain,(
  ( ! [X94,X97,X95,X98,X96] : (p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X95))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X96)))),X97,X98)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12777,f227])).
fof(f12777,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X95))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X96)))),X97,X98)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4902])).
fof(f13354,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X91)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12776,f227])).
fof(f12776,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X91)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4901])).
fof(f13352,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X86)))),X88)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12775,f227])).
fof(f12775,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X86)))),X88)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4900])).
fof(f13350,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X80))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X81)))),X83)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12774,f227])).
fof(f12774,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X80))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X81)))),X83)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4899])).
fof(f13348,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X75))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X76)))),X78)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12773,f227])).
fof(f12773,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X75))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X76)))),X78)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4898])).
fof(f13346,plain,(
  ( ! [X70,X72,X71,X69,X73] : (sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73,X72)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12772,f227])).
fof(f12772,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,'T_0')) | sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73,X72)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4897])).
fof(f13344,plain,(
  ( ! [X68,X66,X67,X65] : (p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X67)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12771,f227])).
fof(f12771,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X67)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4896])).
fof(f13342,plain,(
  ( ! [X61,X64,X62,X63] : (p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X62))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X63)))),X64)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12770,f227])).
fof(f12770,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X62))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X63)))),X64)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4895])).
fof(f13340,plain,(
  ( ! [X59,X57,X60,X58] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X59)))),X60)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12769,f227])).
fof(f12769,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X59)))),X60)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4894])).
fof(f13338,plain,(
  ( ! [X54,X56,X55,X53] : (sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X55)))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12768,f227])).
fof(f12768,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X55)))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4893])).
fof(f13336,plain,(
  ( ! [X24,X23,X21,X25,X22] : (sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X22))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X23)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12767,f227])).
fof(f12767,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'T_0')) | sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X22))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X23)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4884])).
fof(f13334,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X17))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X18)))))),X20)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12766,f227])).
fof(f12766,plain,(
  ( ! [X19,X17,X20,X18,X16] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X17))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X18)))))),X20)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4883])).
fof(f13332,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X13)))))),X14)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12765,f227])).
fof(f12765,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X13)))))),X14)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4882])).
fof(f13330,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X8)))))))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12764,f227])).
fof(f12764,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X8)))))))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4881])).
fof(f13328,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X2)))))),X5,X3)) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12763,f227])).
fof(f12763,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X2)))))),X5,X3)) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4880])).
fof(f13197,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12536,f12509])).
fof(f12536,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f249])).
fof(f12509,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | ($spl82 | $spl86)),
  inference(duplicate_literal_removal,[],[f12330])).
fof(f12330,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl82 | $spl86)),
  inference(superposition,[],[f6103,f6107])).
fof(f12531,plain,(
  ( ! [X30,X31,X32] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X32))))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X30))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32)))))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12325,f6107])).
fof(f12325,plain,(
  ( ! [X30,X31,X32] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X31),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X32))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X30))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X30),s('type.integer.int',X32)))))))) ) | $spl82),
  inference(superposition,[],[f6103,f1469])).
fof(f12530,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X28))),s('type.integer.int',X29))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X27))),s('type.integer.int',X29)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12324,f6107])).
fof(f12324,plain,(
  ( ! [X28,X29,X27] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X28))),s('type.integer.int',X29))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X27))),s('type.integer.int',X29)))))) ) | $spl82),
  inference(superposition,[],[f6103,f1459])).
fof(f12529,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',X26))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X26)))))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12323,f6107])).
fof(f12323,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',X26))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X26)))))) ) | $spl82),
  inference(superposition,[],[f6103,f318])).
fof(f12284,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f12269,f385])).
fof(f12269,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f413,f1234])).
fof(f12236,plain,(
  ~sP7('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f12218,f349])).
fof(f12218,plain,(
  ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f413,f1064])).
fof(f12203,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f12194,f327])).
fof(f12194,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f413,f1040])).
fof(f12159,plain,(
  ~sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f12120,f328])).
fof(f12120,plain,(
  ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f413,f996])).
fof(f12042,plain,(
  ( ! [X88,X87,X86] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int',X86)),X87) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f12033,f413])).
fof(f12033,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,'F_0')) | sP1('const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int',X86)),X87) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f2345,f491])).
fof(f12028,plain,(
  ( ! [X70,X74,X72,X71,X73] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X71),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X72)))))) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',X71))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X70),s('type.integer.int',X72)))))),X73) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f2345,f1469])).
fof(f12027,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X66))),s('type.integer.int',X67)))) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X67)))),X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f2345,f1459])).
fof(f12026,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X61),s('type.integer.int',X62)))) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X62)))),X63) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f2345,f318])).
fof(f12035,plain,(
  ( ! [X2,X0,X3] : (sP1(X0,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f12034,f413])).
fof(f12034,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,'F_0')) | sP1(X0,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f12008,f491])).
fof(f12008,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) | sP1(X0,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2345,f1784])).
fof(f9330,plain,(
  ( ! [X88,X87,X86] : (sP1(X87,'const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int',X86))) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f9320,f413])).
fof(f9320,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,'F_0')) | sP1(X87,'const.integer.int_lt_2'(s('type.integer.int',X86),s('type.integer.int',X86))) | s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f2344,f491])).
fof(f9315,plain,(
  ( ! [X70,X74,X72,X71,X73] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X71),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X72)))))) | sP1(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',X71))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X70),s('type.integer.int',X72))))))) | s(bool,X73) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f2344,f1469])).
fof(f9314,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X66))),s('type.integer.int',X67)))) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X67))))) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f2344,f1459])).
fof(f9313,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X61),s('type.integer.int',X62)))) | sP1(X63,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X62))))) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f2344,f318])).
fof(f9322,plain,(
  ( ! [X2,X0,X3] : (sP1(X2,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f9321,f413])).
fof(f9321,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,'F_0')) | sP1(X2,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f9295,f491])).
fof(f9295,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) | sP1(X2,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2344,f1784])).
fof(f9229,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X48))))) | s(bool,X49) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X46))),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X46),s('type.integer.int',X48))))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f2340,f1469])).
fof(f9228,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X43))),s('type.integer.int',X44))) | s(bool,X45) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X42),s('type.integer.int',X43))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X42))),s('type.integer.int',X44))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f2340,f1459])).
fof(f9227,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'F_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',X39),s('type.integer.int',X40))) | s(bool,X41) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X39))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X40))))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f2340,f318])).
fof(f9205,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2340,f236])).
fof(f9156,plain,(
  ( ! [X4,X2,X5,X3] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))))))) )),
  inference(superposition,[],[f4560,f275])).
fof(f9135,plain,(
  ( ! [X4,X2,X5,X3] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))))) )),
  inference(superposition,[],[f4560,f275])).
fof(f9081,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))))))) )),
  inference(superposition,[],[f4451,f275])).
fof(f9060,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))))) )),
  inference(superposition,[],[f4451,f275])).
fof(f9020,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))))))) )),
  inference(superposition,[],[f4411,f275])).
fof(f8999,plain,(
  ( ! [X4,X2,X5,X3] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X4)))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))))) )),
  inference(superposition,[],[f4411,f275])).
fof(f8103,plain,(
  ( ! [X0] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f413,f5548])).
fof(f8070,plain,(
  ( ! [X0] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f413,f5469])).
fof(f8037,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f426,f421,f1291])).
fof(f8038,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f451,f421,f1291])).
fof(f8040,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f425,f422,f1291])).
fof(f8041,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f426,f422,f1291])).
fof(f8042,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f451,f422,f1291])).
fof(f8043,plain,(
  sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f425,f450,f1291])).
fof(f8044,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f426,f450,f1291])).
fof(f8045,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f451,f450,f1291])).
fof(f8051,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f462,f460,f1291])).
fof(f7721,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f440,f852])).
fof(f7722,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f456,f852])).
fof(f7724,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0)) )),
  inference(unit_resulting_resolution,[],[f457,f852])).
fof(f7725,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f442,f852])).
fof(f7700,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f466,f851])).
fof(f7702,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0)) )),
  inference(unit_resulting_resolution,[],[f458,f851])).
fof(f7703,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f446,f851])).
fof(f7346,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f4517])).
fof(f7206,plain,(
  ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f6432,f389])).
fof(f7194,plain,(
  ( ! [X0] : (sP1('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) )),
  inference(unit_resulting_resolution,[],[f413,f4307])).
fof(f7192,plain,(
  ~sP11('T_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f6417,f385])).
fof(f7174,plain,(
  ( ! [X0] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f4254])).
fof(f7064,plain,(
  ~sP5('T_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f6331,f328])).
fof(f6794,plain,(
  ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0') | $spl86),
  inference(unit_resulting_resolution,[],[f413,f431,f424,f6694,f332])).
fof(f6791,plain,(
  sP4('T_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl86),
  inference(unit_resulting_resolution,[],[f6693,f328])).
fof(f6774,plain,(
  ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0','F_0') | $spl86),
  inference(unit_resulting_resolution,[],[f227,f433,f424,f6692,f330])).
fof(f6692,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') | $spl86),
  inference(unit_resulting_resolution,[],[f413,f6107,f348])).
fof(f6693,plain,(
  sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') | $spl86),
  inference(unit_resulting_resolution,[],[f227,f6107,f346])).
fof(f6694,plain,(
  ~sP5('F_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl86),
  inference(unit_resulting_resolution,[],[f413,f6107,f348])).
fof(f6695,plain,(
  sP5('T_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl86),
  inference(unit_resulting_resolution,[],[f227,f6107,f346])).
fof(f6432,plain,(
  ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f1256])).
fof(f6417,plain,(
  ~sP10('T_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f413,f227,f1204])).
fof(f6408,plain,(
  ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f1141])).
fof(f6391,plain,(
  ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f1099])).
fof(f6384,plain,(
  ~sP7('F_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f227,f413,f1013])).
fof(f6372,plain,(
  ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f967])).
fof(f6331,plain,(
  ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f885])).
fof(f6302,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f466,f620])).
fof(f5971,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (sP5(X37,X38,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))))) | ~sP4(X37,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38) | ~sP3(X38,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X37) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38,X37) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5892,f227])).
fof(f5892,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | sP5(X37,X38,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))))) | ~sP4(X37,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38) | ~sP3(X38,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X37) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38,X37) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1483,f674])).
fof(f5891,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X31)))))) | sP5(X32,X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31))))))))) | ~sP4(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33) | ~sP3(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) )),
  inference(superposition,[],[f1483,f1469])).
fof(f5889,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',X21)))) | sP5(X22,X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21))))))) | ~sP4(X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23) | ~sP3(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) )),
  inference(superposition,[],[f1483,f1459])).
fof(f5888,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int',X15)))) | sP5(X16,X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15))))))) | ~sP4(X16,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17) | ~sP3(X17,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) )),
  inference(superposition,[],[f1483,f318])).
fof(f5970,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (sP5(X10,X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9))))))) | ~sP4(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11) | ~sP3(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X10) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X10) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(subsumption_resolution,[],[f5887,f227])).
fof(f5887,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | sP5(X10,X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9))))))) | ~sP4(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11) | ~sP3(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X10) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X10) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(superposition,[],[f1483,f1470])).
fof(f5969,plain,(
  ( ! [X2,X0,X1] : (sP5(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | ~sP4(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1) | ~sP3(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X0)) )),
  inference(subsumption_resolution,[],[f5885,f227])).
fof(f5885,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP5(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | ~sP4(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1) | ~sP3(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X0)) )),
  inference(superposition,[],[f1483,f474])).
fof(f5838,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5795,f227])).
fof(f5795,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1497,f674])).
fof(f5794,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X31)))))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) )),
  inference(superposition,[],[f1497,f1469])).
fof(f5792,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',X21)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) )),
  inference(superposition,[],[f1497,f1459])).
fof(f5791,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int',X15)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) )),
  inference(superposition,[],[f1497,f318])).
fof(f5837,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(subsumption_resolution,[],[f5790,f227])).
fof(f5790,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(superposition,[],[f1497,f1470])).
fof(f5836,plain,(
  ( ! [X2,X0,X1] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2)) )),
  inference(subsumption_resolution,[],[f5788,f227])).
fof(f5788,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2)) )),
  inference(superposition,[],[f1497,f474])).
fof(f5751,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5708,f227])).
fof(f5708,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X37),s('type.integer.int',X36)))),X38,X39) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1496,f674])).
fof(f5707,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X31)))))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X34)) )),
  inference(superposition,[],[f1496,f1469])).
fof(f5705,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',X21)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X24)) )),
  inference(superposition,[],[f1496,f1459])).
fof(f5704,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int',X15)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X18)) )),
  inference(superposition,[],[f1496,f318])).
fof(f5750,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(subsumption_resolution,[],[f5703,f227])).
fof(f5703,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X12) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(superposition,[],[f1496,f1470])).
fof(f5749,plain,(
  ( ! [X2,X0,X1] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2)) )),
  inference(subsumption_resolution,[],[f5701,f227])).
fof(f5701,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X2)) )),
  inference(superposition,[],[f1496,f474])).
fof(f5659,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f5648,f227])).
fof(f5648,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1495,f473])).
fof(f5647,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))))) )),
  inference(superposition,[],[f1495,f1469])).
fof(f5645,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))))) )),
  inference(superposition,[],[f1495,f1459])).
fof(f5644,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) | p(s(bool,X71)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))))) )),
  inference(superposition,[],[f1495,f318])).
fof(f5658,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63)))),X64,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(subsumption_resolution,[],[f5643,f227])).
fof(f5643,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63)))),X64,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(superposition,[],[f1495,f1470])).
fof(f5657,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(subsumption_resolution,[],[f5641,f227])).
fof(f5641,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f1495,f474])).
fof(f5650,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,X0) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5632,f227])).
fof(f5632,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,X0) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1495,f674])).
fof(f5605,plain,(
  ( ! [X94,X92,X95,X93] : (p(s(bool,X92)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))))) )),
  inference(subsumption_resolution,[],[f5594,f227])).
fof(f5594,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | p(s(bool,X92)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))))) )),
  inference(superposition,[],[f1492,f473])).
fof(f5593,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | p(s(bool,X88)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X89),s('type.integer.int',X90)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),X88,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))))) )),
  inference(superposition,[],[f1492,f1469])).
fof(f5591,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75)))) | p(s(bool,X76)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X78)))))) )),
  inference(superposition,[],[f1492,f1459])).
fof(f5590,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | p(s(bool,X69)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X70),s('type.integer.int',X71)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),X69,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X71)))))) )),
  inference(superposition,[],[f1492,f318])).
fof(f5604,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (p(s(bool,X62)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(subsumption_resolution,[],[f5589,f227])).
fof(f5589,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(superposition,[],[f1492,f1470])).
fof(f5603,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X50)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X50,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))))) )),
  inference(subsumption_resolution,[],[f5587,f227])).
fof(f5587,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X50,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))))) )),
  inference(superposition,[],[f1492,f474])).
fof(f5596,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,X1)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | ~sP10(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5578,f227])).
fof(f5578,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | ~sP10(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1492,f674])).
fof(f5550,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (p(s(bool,X37)) | p(s(bool,X38)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38,X37) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5525,f227])).
fof(f5525,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | p(s(bool,X38)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X38,X37) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1491,f674])).
fof(f5524,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X31)))))) | p(s(bool,X32)) | p(s(bool,X33)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X33,X32)) )),
  inference(superposition,[],[f1491,f1469])).
fof(f5522,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',X21)))) | p(s(bool,X22)) | p(s(bool,X23)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X23,X22)) )),
  inference(superposition,[],[f1491,f1459])).
fof(f5521,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int',X15)))) | p(s(bool,X16)) | p(s(bool,X17)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X17,X16)) )),
  inference(superposition,[],[f1491,f318])).
fof(f5549,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,X10)) | p(s(bool,X11)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X10) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(subsumption_resolution,[],[f5520,f227])).
fof(f5520,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | p(s(bool,X11)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X11,X10) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(superposition,[],[f1491,f1470])).
fof(f5548,plain,(
  ( ! [X2,X0,X1] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X0) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f5518,f227])).
fof(f5518,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1,X0)) )),
  inference(superposition,[],[f1491,f474])).
fof(f5471,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (p(s(bool,X37)) | p(s(bool,X38)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X37,X38) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5446,f227])).
fof(f5446,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | p(s(bool,X38)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36)))),X37,X38) | s(bool,X40) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X35),s('type.integer.int',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1488,f674])).
fof(f5445,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X31)))))) | p(s(bool,X32)) | p(s(bool,X33)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X29))),s('type.integer.int',X30))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X34),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int',X31)))))))),X32,X33)) )),
  inference(superposition,[],[f1488,f1469])).
fof(f5443,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',X21)))) | p(s(bool,X22)) | p(s(bool,X23)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X19))),s('type.integer.int',X21)))))),X22,X23)) )),
  inference(superposition,[],[f1488,f1459])).
fof(f5442,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int',X15)))) | p(s(bool,X16)) | p(s(bool,X17)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int',X15)))))),X16,X17)) )),
  inference(superposition,[],[f1488,f318])).
fof(f5470,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,X10)) | p(s(bool,X11)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X10,X11) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(subsumption_resolution,[],[f5441,f227])).
fof(f5441,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | p(s(bool,X11)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X10,X11) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) )),
  inference(superposition,[],[f1488,f1470])).
fof(f5469,plain,(
  ( ! [X2,X0,X1] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f5439,f227])).
fof(f5439,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0,X1)) )),
  inference(superposition,[],[f1488,f474])).
fof(f5396,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP7(X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))))) )),
  inference(subsumption_resolution,[],[f5385,f227])).
fof(f5385,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP7(X94,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))))) )),
  inference(superposition,[],[f1487,f473])).
fof(f5384,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP7(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))))) )),
  inference(superposition,[],[f1487,f1469])).
fof(f5382,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP7(X78,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))))) )),
  inference(superposition,[],[f1487,f1459])).
fof(f5381,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) | p(s(bool,X71)) | ~sP7(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))))) )),
  inference(superposition,[],[f1487,f318])).
fof(f5395,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP7(X64,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(subsumption_resolution,[],[f5380,f227])).
fof(f5380,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP7(X64,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(superposition,[],[f1487,f1470])).
fof(f5394,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP7(X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))))) )),
  inference(subsumption_resolution,[],[f5378,f227])).
fof(f5378,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP7(X52,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))))) )),
  inference(superposition,[],[f1487,f474])).
fof(f5387,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP7(X3,X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5369,f227])).
fof(f5369,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP7(X3,X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1487,f674])).
fof(f5345,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94)) )),
  inference(subsumption_resolution,[],[f5334,f227])).
fof(f5334,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X92),s('type.integer.int',X93)))) | p(s(bool,X94)) | ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X92))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93)))),X94)) )),
  inference(superposition,[],[f1486,f473])).
fof(f5333,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X86),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X87)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X85),s('type.integer.int',X87)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) )),
  inference(superposition,[],[f1486,f1469])).
fof(f5331,plain,(
  ( ! [X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',X77)))) | p(s(bool,X78)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',X75)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X77)))),X78)) )),
  inference(superposition,[],[f1486,f1459])).
fof(f5330,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) | p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X66),s('type.integer.int',X68)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X70)))),X71)) )),
  inference(superposition,[],[f1486,f318])).
fof(f5344,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63)))),X64) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(subsumption_resolution,[],[f5329,f227])).
fof(f5329,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',X63)))) | p(s(bool,X64)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X60))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X59),s('type.integer.int',X61)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63)))),X64) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X60),s('type.integer.int',X61)))) )),
  inference(superposition,[],[f1486,f1470])).
fof(f5343,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52)) )),
  inference(subsumption_resolution,[],[f5327,f227])).
fof(f5327,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X50),s('type.integer.int',X51)))) | p(s(bool,X52)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X50))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51)))),X52)) )),
  inference(superposition,[],[f1486,f474])).
fof(f5336,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP6(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5318,f227])).
fof(f5318,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP6(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1486,f674])).
fof(f5199,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) )),
  inference(subsumption_resolution,[],[f5189,f227])).
fof(f5189,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) )),
  inference(superposition,[],[f1485,f473])).
fof(f5188,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X84),s('type.integer.int',X85)))) | p(s(bool,X86)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) )),
  inference(superposition,[],[f1485,f1469])).
fof(f5186,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',X71)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) )),
  inference(superposition,[],[f1485,f1459])).
fof(f5185,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) )),
  inference(superposition,[],[f1485,f318])).
fof(f5198,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | p(s(bool,X60)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) )),
  inference(subsumption_resolution,[],[f5184,f227])).
fof(f5184,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | p(s(bool,X60)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) )),
  inference(superposition,[],[f1485,f1470])).
fof(f5197,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) )),
  inference(subsumption_resolution,[],[f5182,f227])).
fof(f5182,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) )),
  inference(superposition,[],[f1485,f474])).
fof(f5191,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP3(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5174,f227])).
fof(f5174,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP3(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1485,f674])).
fof(f5148,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) )),
  inference(subsumption_resolution,[],[f5138,f227])).
fof(f5138,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) | p(s(bool,X90)) | ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89)))),X90)) )),
  inference(superposition,[],[f1484,f473])).
fof(f5137,plain,(
  ( ! [X87,X85,X83,X81,X86,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X83)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X84),s('type.integer.int',X85)))) | p(s(bool,X86)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81))),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X81),s('type.integer.int',X83)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X85)))),X86)) )),
  inference(superposition,[],[f1484,f1469])).
fof(f5135,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',X71)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',X73)))) | p(s(bool,X74)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X75),s('type.integer.int',X73)))),X74)) )),
  inference(superposition,[],[f1484,f1459])).
fof(f5134,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) | p(s(bool,X67)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X62),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X66)))),X67)) )),
  inference(superposition,[],[f1484,f318])).
fof(f5147,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | p(s(bool,X60)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) )),
  inference(subsumption_resolution,[],[f5133,f227])).
fof(f5133,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | p(s(bool,X60)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59)))),X60) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) )),
  inference(superposition,[],[f1484,f1470])).
fof(f5146,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) )),
  inference(subsumption_resolution,[],[f5131,f227])).
fof(f5131,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) )),
  inference(superposition,[],[f1484,f474])).
fof(f5140,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP4(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f5123,f227])).
fof(f5123,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP4(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1484,f674])).
fof(f5073,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X207),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X208)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X209),s('type.integer.int',X210)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X207))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X208)))))),X212)) )),
  inference(superposition,[],[f1494,f1469])).
fof(f5072,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X200),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X201)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X202),s('type.integer.int',X203)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X200))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X201)))))),X205)) )),
  inference(superposition,[],[f1490,f1469])).
fof(f5071,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X193),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X194)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X195),s('type.integer.int',X196)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X193))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X194)))))))) )),
  inference(superposition,[],[f1489,f1469])).
fof(f5070,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X189),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X190)))))) | p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X189))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X190)))))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1205,f1469])).
fof(f5069,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X185),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X186)))))) | p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X185))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X186)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) )),
  inference(superposition,[],[f968,f1469])).
fof(f5068,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X181),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X182)))))) | p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X181))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X182)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) )),
  inference(superposition,[],[f915,f1469])).
fof(f5067,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X177),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X178)))))) | p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X177))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X178)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) )),
  inference(superposition,[],[f886,f1469])).
fof(f5061,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X153),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154)))))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X153))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X154)))))),X155)) )),
  inference(superposition,[],[f599,f1469])).
fof(f5060,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X149),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X150)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X149))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X150)))))),X151)) )),
  inference(superposition,[],[f567,f1469])).
fof(f5059,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X145),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X146)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X146)))))))) )),
  inference(superposition,[],[f556,f1469])).
fof(f5058,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141)))))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X141)))))),X142,X143)) )),
  inference(superposition,[],[f401,f1469])).
fof(f5057,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X135),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X136)))))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))))),X137,X138)) )),
  inference(superposition,[],[f400,f1469])).
fof(f5056,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X130),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X131)))))) | ~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X131)))))),X133,X132)) )),
  inference(superposition,[],[f397,f1469])).
fof(f5055,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X125),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X126)))))) | ~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X126)))))),X127,X128)) )),
  inference(superposition,[],[f396,f1469])).
fof(f5054,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X120),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X121)))))) | p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X120))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X121)))))),X123,X122)) )),
  inference(superposition,[],[f395,f1469])).
fof(f5053,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X115),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X116)))))) | p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X115))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X116)))))))) )),
  inference(superposition,[],[f390,f1469])).
fof(f5052,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X110),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X111)))))) | p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X110))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X111)))))),X113,X112)) )),
  inference(superposition,[],[f380,f1469])).
fof(f5051,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X105),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X106)))))) | ~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X106)))))),X107,X108)) )),
  inference(superposition,[],[f379,f1469])).
fof(f5050,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X100),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X101)))))) | ~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X101)))))),X103,X102)) )),
  inference(superposition,[],[f378,f1469])).
fof(f5049,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X95),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X96)))))) | p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X96)))))),X97,X98)) )),
  inference(superposition,[],[f373,f1469])).
fof(f5048,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X91)))))) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X90))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X91)))))))) )),
  inference(superposition,[],[f365,f1469])).
fof(f5047,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X85),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X86)))))) | ~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X86)))))),X88)) )),
  inference(superposition,[],[f356,f1469])).
fof(f5046,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X81)))))) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X81)))))),X83)) )),
  inference(superposition,[],[f337,f1469])).
fof(f5045,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X75),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X76)))))) | ~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X76)))))),X78)) )),
  inference(superposition,[],[f333,f1469])).
fof(f5044,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X70),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X71)))))) | sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71))))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X71)))))),X73,X72)) )),
  inference(superposition,[],[f330,f1469])).
fof(f5043,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67)))))) | p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X67)))))))) )),
  inference(superposition,[],[f304,f1469])).
fof(f5042,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X63)))))) | p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X63)))))),X64)) )),
  inference(superposition,[],[f301,f1469])).
fof(f5041,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59)))))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X59)))))),X60)) )),
  inference(superposition,[],[f286,f1469])).
fof(f5040,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X55)))))) | sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))))))) )),
  inference(superposition,[],[f285,f1469])).
fof(f5031,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23)))))) | sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X22))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X23)))))))))) )),
  inference(superposition,[],[f1479,f1469])).
fof(f5030,plain,(
  ( ! [X19,X17,X20,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X18)))))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X18)))))))),X20)) )),
  inference(superposition,[],[f1480,f1469])).
fof(f5029,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13)))))) | p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X12))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13)))))))),X14)) )),
  inference(superposition,[],[f1481,f1469])).
fof(f5028,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8)))))) | p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X8)))))))))) )),
  inference(superposition,[],[f1482,f1469])).
fof(f5027,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))))) | p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))))),X5,X3)) )),
  inference(superposition,[],[f1493,f1469])).
fof(f5024,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X14) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X12))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X13))))))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1469,f674])).
fof(f5022,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))))) | s(bool,X6) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5))))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1469,f674])).
fof(f4985,plain,(
  ( ! [X17,X18,X16] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X18))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))),s('type.integer.int',X18)))))))) )),
  inference(superposition,[],[f1469,f1391])).
fof(f4984,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X14),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X15))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X15)))))))) )),
  inference(superposition,[],[f1469,f1397])).
fof(f4926,plain,(
  ( ! [X212,X210,X208,X206,X211,X209,X207] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X207))),s('type.integer.int',X208)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X209),s('type.integer.int',X210)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X209))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X211),s('type.integer.int',X210)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X206),s('type.integer.int',X207))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X206))),s('type.integer.int',X208)))),X212)) )),
  inference(superposition,[],[f1494,f1459])).
fof(f4925,plain,(
  ( ! [X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X200))),s('type.integer.int',X201)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X202),s('type.integer.int',X203)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X202))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X204),s('type.integer.int',X203)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X199),s('type.integer.int',X200))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X199))),s('type.integer.int',X201)))),X205)) )),
  inference(superposition,[],[f1490,f1459])).
fof(f4924,plain,(
  ( ! [X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X193))),s('type.integer.int',X194)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X195),s('type.integer.int',X196)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X195))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X197),s('type.integer.int',X196)))),X198,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X192),s('type.integer.int',X193))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X192))),s('type.integer.int',X194)))))) )),
  inference(superposition,[],[f1489,f1459])).
fof(f4923,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X189))),s('type.integer.int',X190)))) | p(s(bool,X191)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X188),s('type.integer.int',X189))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X188))),s('type.integer.int',X190)))),X191,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1205,f1459])).
fof(f4922,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X185))),s('type.integer.int',X186)))) | p(s(bool,X187)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X184),s('type.integer.int',X185))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X184))),s('type.integer.int',X186)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X187)) )),
  inference(superposition,[],[f968,f1459])).
fof(f4921,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X181))),s('type.integer.int',X182)))) | p(s(bool,X183)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X180),s('type.integer.int',X181))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X180))),s('type.integer.int',X182)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X183)) )),
  inference(superposition,[],[f915,f1459])).
fof(f4920,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X177))),s('type.integer.int',X178)))) | p(s(bool,X179)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X176),s('type.integer.int',X177))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X176))),s('type.integer.int',X178)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X179)) )),
  inference(superposition,[],[f886,f1459])).
fof(f4914,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X153))),s('type.integer.int',X154)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X153))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X152))),s('type.integer.int',X154)))),X155)) )),
  inference(superposition,[],[f599,f1459])).
fof(f4913,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149))),s('type.integer.int',X150)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X148),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int',X150)))),X151)) )),
  inference(superposition,[],[f567,f1459])).
fof(f4912,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X145))),s('type.integer.int',X146)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X147,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X144),s('type.integer.int',X145))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',X146)))))) )),
  inference(superposition,[],[f556,f1459])).
fof(f4911,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X140))),s('type.integer.int',X141)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X139),s('type.integer.int',X140))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',X141)))),X142,X143)) )),
  inference(superposition,[],[f401,f1459])).
fof(f4910,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X135))),s('type.integer.int',X136)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',X136)))),X137,X138)) )),
  inference(superposition,[],[f400,f1459])).
fof(f4909,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X130))),s('type.integer.int',X131)))) | ~p(s(bool,X132)) | p(s(bool,X133)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X129),s('type.integer.int',X130))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',X131)))),X133,X132)) )),
  inference(superposition,[],[f397,f1459])).
fof(f4908,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X125))),s('type.integer.int',X126)))) | ~p(s(bool,X127)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X124),s('type.integer.int',X125))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',X126)))),X127,X128)) )),
  inference(superposition,[],[f396,f1459])).
fof(f4907,plain,(
  ( ! [X123,X121,X122,X120,X119] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X120))),s('type.integer.int',X121)))) | p(s(bool,X122)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X119),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int',X121)))),X123,X122)) )),
  inference(superposition,[],[f395,f1459])).
fof(f4906,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X115))),s('type.integer.int',X116)))) | p(s(bool,X117)) | ~p(s(bool,X118)) | ~sP10(X118,X117,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X114),s('type.integer.int',X115))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X114))),s('type.integer.int',X116)))))) )),
  inference(superposition,[],[f390,f1459])).
fof(f4905,plain,(
  ( ! [X111,X109,X112,X110,X113] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X110))),s('type.integer.int',X111)))) | p(s(bool,X112)) | p(s(bool,X113)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X109),s('type.integer.int',X110))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X109))),s('type.integer.int',X111)))),X113,X112)) )),
  inference(superposition,[],[f380,f1459])).
fof(f4904,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X105))),s('type.integer.int',X106)))) | ~p(s(bool,X107)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X104),s('type.integer.int',X105))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',X106)))),X107,X108)) )),
  inference(superposition,[],[f379,f1459])).
fof(f4903,plain,(
  ( ! [X103,X101,X99,X102,X100] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X100))),s('type.integer.int',X101)))) | ~p(s(bool,X102)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X99),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X99))),s('type.integer.int',X101)))),X103,X102)) )),
  inference(superposition,[],[f378,f1459])).
fof(f4902,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X95))),s('type.integer.int',X96)))) | p(s(bool,X97)) | p(s(bool,X98)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X94),s('type.integer.int',X95))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',X96)))),X97,X98)) )),
  inference(superposition,[],[f373,f1459])).
fof(f4901,plain,(
  ( ! [X92,X90,X93,X91,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int',X91)))) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP7(X93,X92,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X89),s('type.integer.int',X90))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X89))),s('type.integer.int',X91)))))) )),
  inference(superposition,[],[f365,f1459])).
fof(f4900,plain,(
  ( ! [X88,X87,X85,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',X86)))) | ~p(s(bool,X87)) | p(s(bool,X88)) | ~sP6(X87,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X84))),s('type.integer.int',X86)))),X88)) )),
  inference(superposition,[],[f356,f1459])).
fof(f4899,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X80))),s('type.integer.int',X81)))) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP3(X82,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X79),s('type.integer.int',X80))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',X81)))),X83)) )),
  inference(superposition,[],[f337,f1459])).
fof(f4898,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X75))),s('type.integer.int',X76)))) | ~p(s(bool,X77)) | p(s(bool,X78)) | ~sP4(X77,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X74),s('type.integer.int',X75))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int',X76)))),X78)) )),
  inference(superposition,[],[f333,f1459])).
fof(f4897,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',X71)))) | sP5(X72,X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71))))) | ~sP4(X72,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73) | ~sP3(X73,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X72) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X69))),s('type.integer.int',X71)))),X73,X72)) )),
  inference(superposition,[],[f330,f1459])).
fof(f4896,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X66))),s('type.integer.int',X67)))) | p(s(bool,X68)) | sP1(X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X66))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X65))),s('type.integer.int',X67)))))) )),
  inference(superposition,[],[f304,f1459])).
fof(f4895,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X62))),s('type.integer.int',X63)))) | p(s(bool,X64)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X62))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',X63)))),X64)) )),
  inference(superposition,[],[f301,f1459])).
fof(f4894,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X58))),s('type.integer.int',X59)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X57))),s('type.integer.int',X59)))),X60)) )),
  inference(superposition,[],[f286,f1459])).
fof(f4893,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X54))),s('type.integer.int',X55)))) | sP0(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',X55)))))) )),
  inference(superposition,[],[f285,f1459])).
fof(f4884,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X22))),s('type.integer.int',X23)))) | sP0(X24,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int',X22))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int',X23)))))))) )),
  inference(superposition,[],[f1479,f1459])).
fof(f4883,plain,(
  ( ! [X19,X17,X20,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X17))),s('type.integer.int',X18)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X17))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',X18)))))),X20)) )),
  inference(superposition,[],[f1480,f1459])).
fof(f4882,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12))),s('type.integer.int',X13)))) | p(s(bool,X14)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X13)))))),X14)) )),
  inference(superposition,[],[f1481,f1459])).
fof(f4881,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))),s('type.integer.int',X8)))) | p(s(bool,X9)) | sP1(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X8)))))))) )),
  inference(superposition,[],[f1482,f1459])).
fof(f4880,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X2)))) | p(s(bool,X3)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X2)))))),X5,X3)) )),
  inference(superposition,[],[f1493,f1459])).
fof(f4877,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X14) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12))),s('type.integer.int',X13))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int',X12))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11))),s('type.integer.int',X13))))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1459,f674])).
fof(f4875,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X5))) | s(bool,X6) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1459,f674])).
fof(f4874,plain,(
  ( ! [X2,X3,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X3))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1459,f275])).
fof(f4863,plain,(
  ( ! [X17,X18,X16] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X17))),s('type.integer.int',X18))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X16))),s('type.integer.int',X17))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))))),s('type.integer.int',X18)))))) )),
  inference(superposition,[],[f1459,f1391])).
fof(f4862,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))),s('type.integer.int',X15))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X14))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X15)))))) )),
  inference(superposition,[],[f1459,f1397])).
fof(f4775,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK15(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f4774])).
fof(f4774,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK15(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK15(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f4767,f236])).
fof(f4767,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') != s(bool,X11) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK15(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK15(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1523,f674])).
fof(f4733,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X207] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X210),s('type.integer.int',X211)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X212),s('type.integer.int',X210))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X212),s('type.integer.int',X211)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X208))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X209)))),X213) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X208),s('type.integer.int',X209)))) )),
  inference(subsumption_resolution,[],[f4666,f227])).
fof(f4666,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X207] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X210),s('type.integer.int',X211)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X212),s('type.integer.int',X210))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X212),s('type.integer.int',X211)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X208))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X207),s('type.integer.int',X209)))),X213) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X208),s('type.integer.int',X209)))) )),
  inference(superposition,[],[f1494,f1470])).
fof(f4732,plain,(
  ( ! [X206,X204,X202,X200,X205,X203,X201] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X203),s('type.integer.int',X204)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X205),s('type.integer.int',X203))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X205),s('type.integer.int',X204)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X200),s('type.integer.int',X201))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X200),s('type.integer.int',X202)))),X206) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X201),s('type.integer.int',X202)))) )),
  inference(subsumption_resolution,[],[f4665,f227])).
fof(f4665,plain,(
  ( ! [X206,X204,X202,X200,X205,X203,X201] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X203),s('type.integer.int',X204)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X205),s('type.integer.int',X203))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X205),s('type.integer.int',X204)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X200),s('type.integer.int',X201))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X200),s('type.integer.int',X202)))),X206) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X201),s('type.integer.int',X202)))) )),
  inference(superposition,[],[f1490,f1470])).
fof(f4731,plain,(
  ( ! [X198,X196,X194,X199,X197,X195,X193] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X196),s('type.integer.int',X197)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X198),s('type.integer.int',X196))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X198),s('type.integer.int',X197)))),X199,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X193),s('type.integer.int',X194))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X193),s('type.integer.int',X195))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X194),s('type.integer.int',X195)))) )),
  inference(subsumption_resolution,[],[f4664,f227])).
fof(f4664,plain,(
  ( ! [X198,X196,X194,X199,X197,X195,X193] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X196),s('type.integer.int',X197)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X198),s('type.integer.int',X196))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X198),s('type.integer.int',X197)))),X199,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X193),s('type.integer.int',X194))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X193),s('type.integer.int',X195))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X194),s('type.integer.int',X195)))) )),
  inference(superposition,[],[f1489,f1470])).
fof(f4730,plain,(
  ( ! [X191,X189,X192,X190] : (p(s(bool,X192)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X190))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X191)))),X192,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X190),s('type.integer.int',X191)))) )),
  inference(subsumption_resolution,[],[f4663,f227])).
fof(f4663,plain,(
  ( ! [X191,X189,X192,X190] : (~p(s(bool,'T_0')) | p(s(bool,X192)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X190))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X189),s('type.integer.int',X191)))),X192,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X190),s('type.integer.int',X191)))) )),
  inference(superposition,[],[f1205,f1470])).
fof(f4729,plain,(
  ( ! [X187,X185,X188,X186] : (p(s(bool,X188)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X185),s('type.integer.int',X186))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X185),s('type.integer.int',X187)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X188) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X186),s('type.integer.int',X187)))) )),
  inference(subsumption_resolution,[],[f4662,f227])).
fof(f4662,plain,(
  ( ! [X187,X185,X188,X186] : (~p(s(bool,'T_0')) | p(s(bool,X188)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X185),s('type.integer.int',X186))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X185),s('type.integer.int',X187)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X188) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X186),s('type.integer.int',X187)))) )),
  inference(superposition,[],[f968,f1470])).
fof(f4728,plain,(
  ( ! [X182,X184,X183,X181] : (p(s(bool,X184)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X181),s('type.integer.int',X182))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X181),s('type.integer.int',X183)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X184) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X182),s('type.integer.int',X183)))) )),
  inference(subsumption_resolution,[],[f4661,f227])).
fof(f4661,plain,(
  ( ! [X182,X184,X183,X181] : (~p(s(bool,'T_0')) | p(s(bool,X184)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X181),s('type.integer.int',X182))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X181),s('type.integer.int',X183)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X184) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X182),s('type.integer.int',X183)))) )),
  inference(superposition,[],[f915,f1470])).
fof(f4727,plain,(
  ( ! [X177,X180,X178,X179] : (p(s(bool,X180)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X178))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X179)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X180) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X178),s('type.integer.int',X179)))) )),
  inference(subsumption_resolution,[],[f4660,f227])).
fof(f4660,plain,(
  ( ! [X177,X180,X178,X179] : (~p(s(bool,'T_0')) | p(s(bool,X180)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X178))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X177),s('type.integer.int',X179)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X180) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X178),s('type.integer.int',X179)))) )),
  inference(superposition,[],[f886,f1470])).
fof(f4726,plain,(
  ( ! [X158,X156,X157,X155] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X155),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X155),s('type.integer.int',X157)))),X158) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X156),s('type.integer.int',X157)))) )),
  inference(subsumption_resolution,[],[f4656,f227])).
fof(f4656,plain,(
  ( ! [X158,X156,X157,X155] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X155),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X155),s('type.integer.int',X157)))),X158) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X156),s('type.integer.int',X157)))) )),
  inference(superposition,[],[f599,f1470])).
fof(f4725,plain,(
  ( ! [X154,X152,X151,X153] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X151),s('type.integer.int',X152))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X151),s('type.integer.int',X153)))),X154) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X152),s('type.integer.int',X153)))) )),
  inference(subsumption_resolution,[],[f4655,f227])).
fof(f4655,plain,(
  ( ! [X154,X152,X151,X153] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X151),s('type.integer.int',X152))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X151),s('type.integer.int',X153)))),X154) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X152),s('type.integer.int',X153)))) )),
  inference(superposition,[],[f567,f1470])).
fof(f4724,plain,(
  ( ! [X149,X147,X150,X148] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X150,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X149))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X148),s('type.integer.int',X149)))) )),
  inference(subsumption_resolution,[],[f4654,f227])).
fof(f4654,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X150,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X148))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X149))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X148),s('type.integer.int',X149)))) )),
  inference(superposition,[],[f556,f1470])).
fof(f4723,plain,(
  ( ! [X146,X144,X142,X145,X143] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,X146) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,X146) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X143),s('type.integer.int',X144)))) )),
  inference(subsumption_resolution,[],[f4653,f227])).
fof(f4653,plain,(
  ( ! [X146,X144,X142,X145,X143] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,X146) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,X146) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X143),s('type.integer.int',X144)))) )),
  inference(superposition,[],[f401,f1470])).
fof(f4722,plain,(
  ( ! [X140,X138,X141,X139,X137] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X139)))),X140,X141) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X139)))),X140,X141) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X138),s('type.integer.int',X139)))) )),
  inference(subsumption_resolution,[],[f4652,f227])).
fof(f4652,plain,(
  ( ! [X140,X138,X141,X139,X137] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X139)))),X140,X141) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X137),s('type.integer.int',X139)))),X140,X141) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X138),s('type.integer.int',X139)))) )),
  inference(superposition,[],[f400,f1470])).
fof(f4721,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,X135)) | p(s(bool,X136)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X133))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X134)))),X136,X135) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X133),s('type.integer.int',X134)))) )),
  inference(subsumption_resolution,[],[f4651,f227])).
fof(f4651,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,'T_0')) | ~p(s(bool,X135)) | p(s(bool,X136)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X133))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X132),s('type.integer.int',X134)))),X136,X135) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X133),s('type.integer.int',X134)))) )),
  inference(superposition,[],[f397,f1470])).
fof(f4720,plain,(
  ( ! [X127,X130,X128,X131,X129] : (~p(s(bool,X130)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X128))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X129)))),X130,X131) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X128),s('type.integer.int',X129)))) )),
  inference(subsumption_resolution,[],[f4650,f227])).
fof(f4650,plain,(
  ( ! [X127,X130,X128,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,X130)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X128))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X127),s('type.integer.int',X129)))),X130,X131) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X128),s('type.integer.int',X129)))) )),
  inference(superposition,[],[f396,f1470])).
fof(f4719,plain,(
  ( ! [X125,X123,X126,X124,X122] : (p(s(bool,X125)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X126,X125) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X123),s('type.integer.int',X124)))) )),
  inference(subsumption_resolution,[],[f4649,f227])).
fof(f4649,plain,(
  ( ! [X125,X123,X126,X124,X122] : (~p(s(bool,'T_0')) | p(s(bool,X125)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X126,X125) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X123),s('type.integer.int',X124)))) )),
  inference(superposition,[],[f395,f1470])).
fof(f4718,plain,(
  ( ! [X121,X118,X120,X119,X117] : (p(s(bool,X120)) | ~p(s(bool,X121)) | ~sP10(X121,X120,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X119))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X118),s('type.integer.int',X119)))) )),
  inference(subsumption_resolution,[],[f4648,f227])).
fof(f4648,plain,(
  ( ! [X121,X118,X120,X119,X117] : (~p(s(bool,'T_0')) | p(s(bool,X120)) | ~p(s(bool,X121)) | ~sP10(X121,X120,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X118))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X117),s('type.integer.int',X119))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X118),s('type.integer.int',X119)))) )),
  inference(superposition,[],[f390,f1470])).
fof(f4717,plain,(
  ( ! [X116,X114,X112,X115,X113] : (p(s(bool,X115)) | p(s(bool,X116)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X113))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X114)))),X116,X115) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X113),s('type.integer.int',X114)))) )),
  inference(subsumption_resolution,[],[f4647,f227])).
fof(f4647,plain,(
  ( ! [X116,X114,X112,X115,X113] : (~p(s(bool,'T_0')) | p(s(bool,X115)) | p(s(bool,X116)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X113))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X112),s('type.integer.int',X114)))),X116,X115) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X113),s('type.integer.int',X114)))) )),
  inference(superposition,[],[f380,f1470])).
fof(f4716,plain,(
  ( ! [X111,X109,X107,X110,X108] : (~p(s(bool,X110)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X108))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X109)))),X110,X111) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X108),s('type.integer.int',X109)))) )),
  inference(subsumption_resolution,[],[f4646,f227])).
fof(f4646,plain,(
  ( ! [X111,X109,X107,X110,X108] : (~p(s(bool,'T_0')) | ~p(s(bool,X110)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X108))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X107),s('type.integer.int',X109)))),X110,X111) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X108),s('type.integer.int',X109)))) )),
  inference(superposition,[],[f379,f1470])).
fof(f4715,plain,(
  ( ! [X103,X105,X102,X106,X104] : (~p(s(bool,X105)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X104)))),X106,X105) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X103),s('type.integer.int',X104)))) )),
  inference(subsumption_resolution,[],[f4645,f227])).
fof(f4645,plain,(
  ( ! [X103,X105,X102,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X105)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X104)))),X106,X105) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X103),s('type.integer.int',X104)))) )),
  inference(superposition,[],[f378,f1470])).
fof(f4714,plain,(
  ( ! [X101,X99,X97,X100,X98] : (p(s(bool,X100)) | p(s(bool,X101)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X99)))),X100,X101) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X98),s('type.integer.int',X99)))) )),
  inference(subsumption_resolution,[],[f4644,f227])).
fof(f4644,plain,(
  ( ! [X101,X99,X97,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X100)) | p(s(bool,X101)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X99)))),X100,X101) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X98),s('type.integer.int',X99)))) )),
  inference(superposition,[],[f373,f1470])).
fof(f4713,plain,(
  ( ! [X94,X92,X95,X93,X96] : (~p(s(bool,X95)) | p(s(bool,X96)) | ~sP7(X96,X95,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X94))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) )),
  inference(subsumption_resolution,[],[f4643,f227])).
fof(f4643,plain,(
  ( ! [X94,X92,X95,X93,X96] : (~p(s(bool,'T_0')) | ~p(s(bool,X95)) | p(s(bool,X96)) | ~sP7(X96,X95,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X92),s('type.integer.int',X94))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) )),
  inference(superposition,[],[f365,f1470])).
fof(f4712,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~p(s(bool,X90)) | p(s(bool,X91)) | ~sP6(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X89)))),X91) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) )),
  inference(subsumption_resolution,[],[f4642,f227])).
fof(f4642,plain,(
  ( ! [X90,X88,X87,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X90)) | p(s(bool,X91)) | ~sP6(X90,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X88))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X87),s('type.integer.int',X89)))),X91) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X88),s('type.integer.int',X89)))) )),
  inference(superposition,[],[f356,f1470])).
fof(f4711,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,X85)) | p(s(bool,X86)) | ~sP3(X85,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X84)))),X86) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X83),s('type.integer.int',X84)))) )),
  inference(subsumption_resolution,[],[f4641,f227])).
fof(f4641,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X85)) | p(s(bool,X86)) | ~sP3(X85,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X84)))),X86) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X83),s('type.integer.int',X84)))) )),
  inference(superposition,[],[f337,f1470])).
fof(f4710,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~p(s(bool,X80)) | p(s(bool,X81)) | ~sP4(X80,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X78))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X79)))),X81) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X78),s('type.integer.int',X79)))) )),
  inference(subsumption_resolution,[],[f4640,f227])).
fof(f4640,plain,(
  ( ! [X80,X78,X81,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | p(s(bool,X81)) | ~sP4(X80,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X78))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X77),s('type.integer.int',X79)))),X81) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X78),s('type.integer.int',X79)))) )),
  inference(superposition,[],[f333,f1470])).
fof(f4709,plain,(
  ( ! [X76,X74,X72,X75,X73] : (sP5(X75,X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74))))) | ~sP4(X75,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X76) | ~sP3(X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X75) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X76,X75) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X73),s('type.integer.int',X74)))) )),
  inference(subsumption_resolution,[],[f4639,f227])).
fof(f4639,plain,(
  ( ! [X76,X74,X72,X75,X73] : (~p(s(bool,'T_0')) | sP5(X75,X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74))))) | ~sP4(X75,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X76) | ~sP3(X76,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X75) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X72),s('type.integer.int',X74)))),X76,X75) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X73),s('type.integer.int',X74)))) )),
  inference(superposition,[],[f330,f1470])).
fof(f4708,plain,(
  ( ! [X70,X68,X71,X69] : (p(s(bool,X71)) | sP1(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) )),
  inference(subsumption_resolution,[],[f4638,f227])).
fof(f4638,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | sP1(X71,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) )),
  inference(superposition,[],[f304,f1470])).
fof(f4707,plain,(
  ( ! [X66,X64,X67,X65] : (p(s(bool,X67)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X66)))),X67) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) )),
  inference(subsumption_resolution,[],[f4637,f227])).
fof(f4637,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,'T_0')) | p(s(bool,X67)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X65))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X64),s('type.integer.int',X66)))),X67) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X65),s('type.integer.int',X66)))) )),
  inference(superposition,[],[f301,f1470])).
fof(f4706,plain,(
  ( ! [X61,X62,X60,X63] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X62)))),X63) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X61),s('type.integer.int',X62)))) )),
  inference(subsumption_resolution,[],[f4636,f227])).
fof(f4636,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X62)))),X63) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X61),s('type.integer.int',X62)))) )),
  inference(superposition,[],[f286,f1470])).
fof(f4705,plain,(
  ( ! [X59,X57,X58,X56] : (sP0(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X58))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X57),s('type.integer.int',X58)))) )),
  inference(subsumption_resolution,[],[f4635,f227])).
fof(f4635,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | sP0(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X57))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X56),s('type.integer.int',X58))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X57),s('type.integer.int',X58)))) )),
  inference(superposition,[],[f285,f1470])).
fof(f4704,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X53),s('type.integer.int',X54))) | ~p(s(bool,X55)) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X53),s('type.integer.int',X54)))) )),
  inference(forward_demodulation,[],[f4703,f318])).
fof(f4703,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,X55)) | s(bool,X55) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X54))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X53),s('type.integer.int',X54)))) )),
  inference(subsumption_resolution,[],[f4634,f227])).
fof(f4634,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X55)) | s(bool,X55) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X53))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X52),s('type.integer.int',X54))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X53),s('type.integer.int',X54)))) )),
  inference(superposition,[],[f279,f1470])).
fof(f4702,plain,(
  ( ! [X39,X38,X40] : (s(bool,'F_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X39))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X40))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X39),s('type.integer.int',X40)))) )),
  inference(subsumption_resolution,[],[f4630,f227])).
fof(f4630,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X39))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X40))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X39),s('type.integer.int',X40)))) )),
  inference(superposition,[],[f249,f1470])).
fof(f4700,plain,(
  ( ! [X28,X26,X24,X27,X25] : (sP0(X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X26))))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',X26)))) )),
  inference(subsumption_resolution,[],[f4626,f227])).
fof(f4626,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'T_0')) | sP0(X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X24),s('type.integer.int',X26))))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',X26)))) )),
  inference(superposition,[],[f1479,f1470])).
fof(f4699,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X21)))))),X23) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X20),s('type.integer.int',X21)))) )),
  inference(subsumption_resolution,[],[f4625,f227])).
fof(f4625,plain,(
  ( ! [X23,X21,X19,X22,X20] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X20))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int',X21)))))),X23) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X20),s('type.integer.int',X21)))) )),
  inference(superposition,[],[f1480,f1470])).
fof(f4698,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,X17)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X16)))))),X17) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X15),s('type.integer.int',X16)))) )),
  inference(subsumption_resolution,[],[f4624,f227])).
fof(f4624,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X16)))))),X17) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X15),s('type.integer.int',X16)))) )),
  inference(superposition,[],[f1481,f1470])).
fof(f4697,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,X12)) | sP1(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X11))))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) )),
  inference(subsumption_resolution,[],[f4623,f227])).
fof(f4623,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | sP1(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X11))))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) )),
  inference(superposition,[],[f1482,f1470])).
fof(f4696,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (p(s(bool,X6)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5)))))),X8,X6) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int',X5)))) )),
  inference(subsumption_resolution,[],[f4622,f227])).
fof(f4622,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5)))))),X8,X6) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int',X5)))) )),
  inference(superposition,[],[f1493,f1470])).
fof(f4615,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f1470,f275])).
fof(f4594,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3)))) )),
  inference(superposition,[],[f1470,f275])).
fof(f4560,plain,(
  ( ! [X70,X68,X69,X67] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68))))) )),
  inference(subsumption_resolution,[],[f4551,f227])).
fof(f4551,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) )),
  inference(superposition,[],[f1494,f473])).
fof(f4549,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) )),
  inference(superposition,[],[f1494,f318])).
fof(f4559,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) )),
  inference(subsumption_resolution,[],[f4547,f227])).
fof(f4547,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) )),
  inference(superposition,[],[f1494,f474])).
fof(f4553,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X0,X4) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f4539,f227])).
fof(f4539,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X0,X4) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1494,f674])).
fof(f4518,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (p(s(bool,X19)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int',X18)))),X21,X19) | s(bool,X22) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int',X18))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f4494,f227])).
fof(f4494,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X19)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int',X18)))),X21,X19) | s(bool,X22) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int',X18))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f1493,f674])).
fof(f4492,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int',X9)))) | p(s(bool,X10)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X9)))))),X12,X10)) )),
  inference(superposition,[],[f1493,f318])).
fof(f4517,plain,(
  ( ! [X2,X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X2,X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f4490,f227])).
fof(f4490,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X2,X0)) )),
  inference(superposition,[],[f1493,f474])).
fof(f4451,plain,(
  ( ! [X70,X68,X69,X67] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68))))) )),
  inference(subsumption_resolution,[],[f4442,f227])).
fof(f4442,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) )),
  inference(superposition,[],[f1490,f473])).
fof(f4440,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))),X61)) )),
  inference(superposition,[],[f1490,f318])).
fof(f4450,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) )),
  inference(subsumption_resolution,[],[f4438,f227])).
fof(f4438,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X49)) )),
  inference(superposition,[],[f1490,f474])).
fof(f4444,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X0,X4) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f4430,f227])).
fof(f4430,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X0,X4) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1490,f674])).
fof(f4411,plain,(
  ( ! [X70,X68,X69,X67] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),X70,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68))))) )),
  inference(subsumption_resolution,[],[f4402,f227])).
fof(f4402,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X67),s('type.integer.int',X68)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X67))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X69),s('type.integer.int',X68)))),X70,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1489,f473])).
fof(f4400,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',X59)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X60),s('type.integer.int',X59)))),X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X55),s('type.integer.int',X57)))))) )),
  inference(superposition,[],[f1489,f318])).
fof(f4410,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),X49,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(subsumption_resolution,[],[f4398,f227])).
fof(f4398,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X47)))),X49,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f1489,f474])).
fof(f4404,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,X0) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f4390,f227])).
fof(f4390,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,X0) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1489,f674])).
fof(f4337,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | s(bool,X1) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f4323,f227])).
fof(f4323,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | s(bool,X1) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK13))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f1441,f674])).
fof(f4308,plain,(
  ( ! [X14,X17,X15,X13,X16] : (p(s(bool,X15)) | sP1(X15,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14))))) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f4284,f227])).
fof(f4284,plain,(
  ( ! [X14,X17,X15,X13,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | sP1(X15,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14))))) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f1482,f674])).
fof(f4282,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) | p(s(bool,X8)) | sP1(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) )),
  inference(superposition,[],[f1482,f318])).
fof(f4307,plain,(
  ( ! [X0,X1] : (sP1(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))))) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f4280,f227])).
fof(f4280,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) )),
  inference(superposition,[],[f1482,f474])).
fof(f4261,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f850])).
fof(f4255,plain,(
  ( ! [X14,X17,X15,X13,X16] : (p(s(bool,X15)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14)))),X15) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f4231,f227])).
fof(f4231,plain,(
  ( ! [X14,X17,X15,X13,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14)))),X15) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f1481,f674])).
fof(f4229,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) | p(s(bool,X8)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X8)) )),
  inference(superposition,[],[f1481,f318])).
fof(f4254,plain,(
  ( ! [X0,X1] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f4227,f227])).
fof(f4227,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X0)) )),
  inference(superposition,[],[f1481,f474])).
fof(f4208,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f849])).
fof(f4202,plain,(
  ( ! [X14,X17,X15,X13,X16] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int',X14)))),X16) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f4178,f227])).
fof(f4178,plain,(
  ( ! [X14,X17,X15,X13,X16] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int',X14)))),X16) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f1480,f674])).
fof(f4176,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))),X9)) )),
  inference(superposition,[],[f1480,f318])).
fof(f4201,plain,(
  ( ! [X0,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1)) )),
  inference(subsumption_resolution,[],[f4174,f227])).
fof(f4174,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),X1)) )),
  inference(superposition,[],[f1480,f474])).
fof(f4155,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f848])).
fof(f4149,plain,(
  ( ! [X14,X17,X15,X13,X16] : (sP0(X15,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14))))) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f4125,f227])).
fof(f4125,plain,(
  ( ! [X14,X17,X15,X13,X16] : (~p(s(bool,'T_0')) | sP0(X15,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X14))))) | s(bool,X17) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f1479,f674])).
fof(f4123,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) | sP0(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X7)))))))) )),
  inference(superposition,[],[f1479,f318])).
fof(f4148,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) )),
  inference(subsumption_resolution,[],[f4121,f227])).
fof(f4121,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))))) )),
  inference(superposition,[],[f1479,f474])).
fof(f4102,plain,(
  ( ! [X0] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f847])).
fof(f4031,plain,(
  ( ! [X9] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f235,f1397])).
fof(f4030,plain,(
  ( ! [X8,X7] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X8))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8)))))) )),
  inference(superposition,[],[f275,f1397])).
fof(f4029,plain,(
  ( ! [X6,X5] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f275,f1397])).
fof(f4028,plain,(
  ( ! [X4,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X4)))))) )),
  inference(superposition,[],[f1390,f1397])).
fof(f4027,plain,(
  ( ! [X2,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f1396,f1397])).
fof(f3939,plain,(
  ( ! [X9] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9)))))))) )),
  inference(superposition,[],[f235,f1391])).
fof(f3938,plain,(
  ( ! [X8,X7] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))),s('type.integer.int',X8))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8)))))) )),
  inference(superposition,[],[f275,f1391])).
fof(f3937,plain,(
  ( ! [X6,X5] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5)))))))) )),
  inference(superposition,[],[f275,f1391])).
fof(f3936,plain,(
  ( ! [X4,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))))),s('type.integer.int',X4)))))) )),
  inference(superposition,[],[f1390,f1391])).
fof(f3935,plain,(
  ( ! [X2,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))))) )),
  inference(superposition,[],[f1396,f1391])).
fof(f3916,plain,(
  ( ! [X2,X3,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1453,f275])).
fof(f3899,plain,(
  ( ! [X2,X3,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3)))))) )),
  inference(superposition,[],[f1453,f275])).
fof(f3888,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))),'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f1453,f328])).
fof(f3885,plain,(
  sP1('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f413,f846])).
fof(f3871,plain,(
  ( ! [X2,X3,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f1452,f275])).
fof(f3854,plain,(
  ( ! [X2,X3,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3)))))) )),
  inference(superposition,[],[f1452,f275])).
fof(f3843,plain,(
  ( ! [X0] : (~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f453,f450,f1452,f332])).
fof(f3811,plain,(
  ( ! [X2,X3,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f1451,f275])).
fof(f3801,plain,(
  ( ! [X2,X3,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3)))) )),
  inference(superposition,[],[f1451,f275])).
fof(f3797,plain,(
  ( ! [X2,X0,X1] : (sP4('T_0','const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f1451,f328])).
fof(f3764,plain,(
  ( ! [X2,X3,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))),'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f1450,f275])).
fof(f3754,plain,(
  ( ! [X2,X3,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3)))) )),
  inference(superposition,[],[f1450,f275])).
fof(f3750,plain,(
  ( ! [X0] : (~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f454,f424,f1450,f332])).
fof(f3740,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f461,f459,f1569,f331])).
fof(f3662,plain,(
  ( ! [X4,X5,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4)))))))))) )),
  inference(superposition,[],[f1396,f1390])).
fof(f3637,plain,(
  ( ! [X0] : (~sP2('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f427,f423,f1567,f332])).
fof(f3546,plain,(
  ( ! [X4,X5,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))),s('type.integer.int',X5)))))) )),
  inference(superposition,[],[f275,f1390])).
fof(f3545,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1)))))))) )),
  inference(superposition,[],[f275,f1390])).
fof(f3537,plain,(
  ( ! [X4,X5,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))))),s('type.integer.int',X5)))))) )),
  inference(superposition,[],[f1390,f1390])).
fof(f249,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f154])).
fof(f1470,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X5))))) | s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X4),s('type.integer.int',X5)))) )),
  inference(superposition,[],[f318,f236])).
fof(f1522,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,X2,bool))) )),
  inference(superposition,[],[f317,f236])).
fof(f1523,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK15(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK15(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f317,f236])).
fof(f2051,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,'T_0') != s(bool,f(s(X146,sK15(X147,X148,bool,X146)))) | s(fun(X146,bool),X147) = s(fun(X146,bool),X148) | s(bool,X149) = s(bool,g(s(X146,sK15(X147,X148,bool,X146)))) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f317,f674])).
fof(f1917,plain,(
  ( ! [X154,X152,X151,X153] : (s(bool,X154) != s(bool,f(s(X151,sK15(X152,X153,bool,X151)))) | s(fun(X151,bool),X152) = s(fun(X151,bool),X153) | s(bool,'T_0') = s(bool,X154) | s(bool,'T_0') = s(bool,g(s(X151,sK15(X152,X153,bool,X151))))) )),
  inference(superposition,[],[f317,f674])).
fof(f1479,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X28),s('type.integer.int',X29)))) | sP0(X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X29)))))) )),
  inference(superposition,[],[f285,f318])).
fof(f1480,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X32),s('type.integer.int',X33)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X33)))),X34)) )),
  inference(superposition,[],[f286,f318])).
fof(f1481,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X37)))),X38)) )),
  inference(superposition,[],[f301,f318])).
fof(f1482,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X40),s('type.integer.int',X41)))) | p(s(bool,X42)) | sP1(X42,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X41)))))) )),
  inference(superposition,[],[f304,f318])).
fof(f1483,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X44),s('type.integer.int',X45)))) | sP5(X46,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45))))) | ~sP4(X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47) | ~sP3(X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X46) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47,X46)) )),
  inference(superposition,[],[f330,f318])).
fof(f1484,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,X51)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X49),s('type.integer.int',X50)))) | p(s(bool,X52)) | ~sP4(X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X50)))),X52)) )),
  inference(superposition,[],[f333,f318])).
fof(f1485,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,X56)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X54),s('type.integer.int',X55)))) | p(s(bool,X57)) | ~sP3(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))),X57)) )),
  inference(superposition,[],[f337,f318])).
fof(f1486,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,X61)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X59),s('type.integer.int',X60)))) | p(s(bool,X62)) | ~sP6(X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X60)))),X62)) )),
  inference(superposition,[],[f356,f318])).
fof(f1487,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,X66)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X64),s('type.integer.int',X65)))) | p(s(bool,X67)) | ~sP7(X67,X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X65)))))) )),
  inference(superposition,[],[f365,f318])).
fof(f1488,plain,(
  ( ! [X70,X68,X72,X71,X69] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X69),s('type.integer.int',X70)))) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70)))),X71,X72)) )),
  inference(superposition,[],[f373,f318])).
fof(f1489,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,X76)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X74),s('type.integer.int',X75)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X75)))),X77,X76)) )),
  inference(superposition,[],[f378,f318])).
fof(f1490,plain,(
  ( ! [X80,X78,X81,X79,X82] : (~p(s(bool,X81)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X79),s('type.integer.int',X80)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X80)))),X81,X82)) )),
  inference(superposition,[],[f379,f318])).
fof(f1491,plain,(
  ( ! [X87,X85,X83,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X84),s('type.integer.int',X85)))) | p(s(bool,X86)) | p(s(bool,X87)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X85)))),X87,X86)) )),
  inference(superposition,[],[f380,f318])).
fof(f1492,plain,(
  ( ! [X92,X90,X88,X91,X89] : (~p(s(bool,X92)) | p(s(bool,X91)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X89),s('type.integer.int',X90)))) | ~sP10(X92,X91,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X90)))))) )),
  inference(superposition,[],[f390,f318])).
fof(f1493,plain,(
  ( ! [X94,X97,X95,X93,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X94),s('type.integer.int',X95)))) | p(s(bool,X96)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X95)))),X97,X96)) )),
  inference(superposition,[],[f395,f318])).
fof(f1494,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,X101)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X99),s('type.integer.int',X100)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X99))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X100)))),X101,X102)) )),
  inference(superposition,[],[f396,f318])).
fof(f1495,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,X106)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X104),s('type.integer.int',X105)))) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X104))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X105)))),X107,X106)) )),
  inference(superposition,[],[f397,f318])).
fof(f1496,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X109),s('type.integer.int',X110)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112)) )),
  inference(superposition,[],[f400,f318])).
fof(f1497,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X114),s('type.integer.int',X115)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117)) )),
  inference(superposition,[],[f401,f318])).
fof(f1498,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X119),s('type.integer.int',X120)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X119))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X120)))))) )),
  inference(superposition,[],[f556,f318])).
fof(f1499,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X123),s('type.integer.int',X124)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X125)) )),
  inference(superposition,[],[f567,f318])).
fof(f1500,plain,(
  ( ! [X127,X128,X126,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X127),s('type.integer.int',X128)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X127))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X128)))),X129)) )),
  inference(superposition,[],[f599,f318])).
fof(f1501,plain,(
  ( ! [X132,X130,X133,X131] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X131),s('type.integer.int',X132)))) | p(s(bool,X133)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X131))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X132)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X133)) )),
  inference(superposition,[],[f886,f318])).
fof(f1502,plain,(
  ( ! [X134,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X135),s('type.integer.int',X136)))) | p(s(bool,X137)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X137)) )),
  inference(superposition,[],[f915,f318])).
fof(f1503,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X139),s('type.integer.int',X140)))) | p(s(bool,X141)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X139))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X140)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X141)) )),
  inference(superposition,[],[f968,f318])).
fof(f1504,plain,(
  ( ! [X144,X142,X145,X143] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X143),s('type.integer.int',X144)))) | p(s(bool,X145)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1205,f318])).
fof(f1822,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,X26) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X24),s('type.integer.int',X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X24))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int',X25)))))) )),
  inference(superposition,[],[f674,f318])).
fof(f1851,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int',X18))) | s(bool,X19) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int',X18))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f674,f318])).
fof(f2368,plain,(
  ( ! [X134,X132,X133,X131] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X133),s('type.integer.int',X132)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X133),s('type.integer.int',X131)))) | s(bool,X134) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X131),s('type.integer.int',X132))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(subsumption_resolution,[],[f2047,f227])).
fof(f2047,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X133),s('type.integer.int',X132)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X133),s('type.integer.int',X131)))) | s(bool,X134) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X131),s('type.integer.int',X132))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f319,f674])).
fof(f1459,plain,(
  ( ! [X2,X3,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int',X3))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3)))))) )),
  inference(superposition,[],[f318,f275])).
fof(f1469,plain,(
  ( ! [X2,X3,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) )),
  inference(superposition,[],[f318,f275])).
fof(f2050,plain,(
  ( ! [X144,X142,X145,X143] : (s(X144,f(s(bool,'T_0'))) != s(X144,g(s(bool,'T_0'))) | s(fun(bool,X144),X142) = s(fun(bool,X144),X143) | s(bool,X145) = s(bool,sK15(X142,X143,X144,bool)) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f317,f674])).
fof(f2367,plain,(
  ( ! [X114,X112,X113] : (p(s(bool,X113)) | ~sP10(X112,X113,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f2038,f227])).
fof(f2038,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,'T_0')) | p(s(bool,X113)) | ~sP10(X112,X113,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f1205,f674])).
fof(f2366,plain,(
  ( ! [X111,X109,X110] : (p(s(bool,X110)) | ~sP6(X109,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(subsumption_resolution,[],[f2037,f227])).
fof(f2037,plain,(
  ( ! [X111,X109,X110] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | ~sP6(X109,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f968,f674])).
fof(f2365,plain,(
  ( ! [X107,X108,X106] : (p(s(bool,X107)) | ~sP3(X106,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(subsumption_resolution,[],[f2036,f227])).
fof(f2036,plain,(
  ( ! [X107,X108,X106] : (~p(s(bool,'T_0')) | p(s(bool,X107)) | ~sP3(X106,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X107) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f915,f674])).
fof(f2364,plain,(
  ( ! [X103,X105,X104] : (p(s(bool,X104)) | ~sP4(X103,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X104) | s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(subsumption_resolution,[],[f2035,f227])).
fof(f2035,plain,(
  ( ! [X103,X105,X104] : (~p(s(bool,'T_0')) | p(s(bool,X104)) | ~sP4(X103,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X104) | s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f886,f674])).
fof(f2363,plain,(
  ( ! [X99,X97,X98] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X97,X98) | s(bool,X97) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(subsumption_resolution,[],[f2033,f227])).
fof(f2033,plain,(
  ( ! [X99,X97,X98] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X97,X98) | s(bool,X97) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f599,f674])).
fof(f2362,plain,(
  ( ! [X94,X95,X96] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X94,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f2032,f227])).
fof(f2032,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X94,X95) | s(bool,X94) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f567,f674])).
fof(f2361,plain,(
  ( ! [X92,X93,X91] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,X91) | s(bool,X91) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f2031,f227])).
fof(f2031,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X92,X91) | s(bool,X91) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f556,f674])).
fof(f2360,plain,(
  ( ! [X90,X88,X87,X89] : (~sP8(X87,X88,X89) | sP9(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f2030,f227])).
fof(f2030,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~sP8(X87,X88,X89) | sP9(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f401,f674])).
fof(f2359,plain,(
  ( ! [X85,X83,X86,X84] : (~sP10(X83,X84,X85) | sP11(X83,X84,X85) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f2029,f227])).
fof(f2029,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | ~sP10(X83,X84,X85) | sP11(X83,X84,X85) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f400,f674])).
fof(f2358,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,X80)) | p(s(bool,X81)) | ~sP11(X79,X81,X80) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f2028,f227])).
fof(f2028,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X80)) | p(s(bool,X81)) | ~sP11(X79,X81,X80) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f397,f674])).
fof(f2357,plain,(
  ( ! [X78,X76,X77,X75] : (sP11(X75,X76,X77) | ~p(s(bool,X76)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f2027,f227])).
fof(f2027,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,X76)) | sP11(X75,X76,X77) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f396,f674])).
fof(f2356,plain,(
  ( ! [X74,X72,X71,X73] : (sP11(X71,X73,X72) | p(s(bool,X72)) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f2026,f227])).
fof(f2026,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | sP11(X71,X73,X72) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f395,f674])).
fof(f2355,plain,(
  ( ! [X70,X68,X69,X67] : (p(s(bool,X68)) | ~p(s(bool,X69)) | ~sP10(X69,X68,X67) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f2025,f227])).
fof(f2025,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,X68)) | ~p(s(bool,X69)) | ~sP10(X69,X68,X67) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f390,f674])).
fof(f2354,plain,(
  ( ! [X66,X64,X65,X63] : (p(s(bool,X64)) | p(s(bool,X65)) | ~sP9(X63,X65,X64) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f2024,f227])).
fof(f2024,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,X64)) | p(s(bool,X65)) | ~sP9(X63,X65,X64) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f380,f674])).
fof(f2353,plain,(
  ( ! [X61,X59,X62,X60] : (sP9(X59,X60,X61) | ~p(s(bool,X60)) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f2023,f227])).
fof(f2023,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | ~p(s(bool,X60)) | sP9(X59,X60,X61) | s(bool,X59) = s(bool,X62) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f379,f674])).
fof(f2352,plain,(
  ( ! [X57,X58,X56,X55] : (sP9(X55,X57,X56) | ~p(s(bool,X56)) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f2022,f227])).
fof(f2022,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | sP9(X55,X57,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f378,f674])).
fof(f2351,plain,(
  ( ! [X54,X52,X53,X51] : (p(s(bool,X52)) | p(s(bool,X53)) | ~sP8(X51,X52,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f2021,f227])).
fof(f2021,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | p(s(bool,X53)) | ~sP8(X51,X52,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f373,f674])).
fof(f2350,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,X48)) | p(s(bool,X49)) | ~sP7(X49,X48,X47) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f2020,f227])).
fof(f2020,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X48)) | p(s(bool,X49)) | ~sP7(X49,X48,X47) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f365,f674])).
fof(f2349,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X44)) | p(s(bool,X45)) | ~sP6(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f2019,f227])).
fof(f2019,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X44)) | p(s(bool,X45)) | ~sP6(X44,X43,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f356,f674])).
fof(f2348,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,X40)) | p(s(bool,X41)) | ~sP3(X40,X39,X41) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f2018,f227])).
fof(f2018,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X40)) | p(s(bool,X41)) | ~sP3(X40,X39,X41) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f337,f674])).
fof(f2347,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | p(s(bool,X37)) | ~sP4(X36,X35,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f2017,f227])).
fof(f2017,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X36)) | p(s(bool,X37)) | ~sP4(X36,X35,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f333,f674])).
fof(f2346,plain,(
  ( ! [X33,X31,X34,X32] : (sP5(X32,X33,X31) | ~sP4(X32,X31,X33) | ~sP3(X33,X31,X32) | ~sP2(X31,X33,X32) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f2016,f227])).
fof(f2016,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | sP5(X32,X33,X31) | ~sP4(X32,X31,X33) | ~sP3(X33,X31,X32) | ~sP2(X31,X33,X32) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f330,f674])).
fof(f2345,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f2015,f227])).
fof(f2015,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f304,f674])).
fof(f2344,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f2014,f227])).
fof(f2014,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f301,f674])).
fof(f2343,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f2013,f227])).
fof(f2013,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f286,f674])).
fof(f2342,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f2012,f227])).
fof(f2012,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f285,f674])).
fof(f2341,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f2011,f227])).
fof(f2011,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f279,f674])).
fof(f2340,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f2007,f227])).
fof(f2007,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f249,f674])).
fof(f1968,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | p(s(bool,X4)) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f245,f674])).
fof(f1916,plain,(
  ( ! [X149,X147,X150,X148] : (s(X149,f(s(bool,X150))) != s(X149,g(s(bool,X150))) | s(fun(bool,X149),X147) = s(fun(bool,X149),X148) | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,sK15(X147,X148,X149,bool))) )),
  inference(superposition,[],[f317,f674])).
fof(f1840,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f674,f674])).
fof(f1797,plain,(
  ( ! [X0] : (~sP4('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f227,f429,f425,f1538,f330])).
fof(f1784,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f1779,f413])).
fof(f1779,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X14),s('type.integer.int',X14))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f736,f491])).
fof(f1567,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f491,f348])).
fof(f1568,plain,(
  ( ! [X0] : (sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f227,f491,f346])).
fof(f1569,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f413,f491,f348])).
fof(f1538,plain,(
  ( ! [X0] : (~sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f470,f347])).
fof(f1541,plain,(
  ( ! [X0] : (~sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f227,f470,f347])).
fof(f1451,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X2)))),'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f227,f318,f346])).
fof(f1452,plain,(
  ( ! [X2,X0,X1] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f413,f318,f348])).
fof(f1453,plain,(
  ( ! [X2,X0,X1] : (sP5('T_0','const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(unit_resulting_resolution,[],[f227,f318,f346])).
fof(f1415,plain,(
  ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f1263,f389])).
fof(f1397,plain,(
  ( ! [X2] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f275,f229])).
fof(f1396,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))))) )),
  inference(superposition,[],[f275,f235])).
fof(f1391,plain,(
  ( ! [X2] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f275,f229])).
fof(f1350,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f454,f462,f424,f413,f332])).
fof(f1351,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f434,f462,f424,f413,f332])).
fof(f1361,plain,(
  ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')),
  inference(unit_resulting_resolution,[],[f454,f814,f421,f413,f332])).
fof(f1370,plain,(
  sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')),
  inference(unit_resulting_resolution,[],[f453,f427,f423,f413,f332])).
fof(f1371,plain,(
  sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f432,f427,f423,f413,f332])).
fof(f1373,plain,(
  ( ! [X0] : (sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f431,f461,f459,f413,f332])).
fof(f1374,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f453,f461,f459,f413,f332])).
fof(f1375,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f432,f461,f459,f413,f332])).
fof(f1310,plain,(
  sP5('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f429,f425,f423,f413,f331])).
fof(f1311,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f430,f426,f423,f413,f331])).
fof(f1312,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f452,f451,f423,f413,f331])).
fof(f1320,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f429,f425,f459,f413,f331])).
fof(f1321,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f430,f426,f459,f413,f331])).
fof(f1322,plain,(
  ( ! [X0] : (sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f452,f451,f459,f413,f331])).
fof(f1324,plain,(
  sP5('F_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f454,f428,f424,f413,f331])).
fof(f1325,plain,(
  sP5('F_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f434,f428,f424,f413,f331])).
fof(f1328,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f454,f428,f460,f413,f331])).
fof(f1329,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f434,f428,f460,f413,f331])).
fof(f1291,plain,(
  ( ! [X8,X9] : (~sP4(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9) | sP5(X8,X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~sP3(X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X8)) )),
  inference(subsumption_resolution,[],[f1290,f434])).
fof(f1290,plain,(
  ( ! [X8,X9] : (sP5(X8,X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~sP4(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9) | ~sP3(X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X8) | ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8)) )),
  inference(subsumption_resolution,[],[f1287,f227])).
fof(f1287,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | sP5(X8,X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~sP4(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9) | ~sP3(X9,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X8) | ~sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8)) )),
  inference(superposition,[],[f330,f473])).
fof(f1289,plain,(
  ( ! [X6,X7] : (sP5(X6,X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | ~sP4(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | ~sP3(X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X6)) )),
  inference(subsumption_resolution,[],[f1288,f454])).
fof(f1288,plain,(
  ( ! [X6,X7] : (sP5(X6,X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | ~sP4(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | ~sP3(X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X6) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6)) )),
  inference(subsumption_resolution,[],[f1286,f227])).
fof(f1286,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP5(X6,X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | ~sP4(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | ~sP3(X7,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X6) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6)) )),
  inference(superposition,[],[f330,f474])).
fof(f1267,plain,(
  sP5('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f433,f425,f421,f227,f330])).
fof(f1268,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f433,f426,f421,f227,f330])).
fof(f1269,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f433,f451,f421,f227,f330])).
fof(f1271,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f433,f426,f422,f227,f330])).
fof(f1272,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f433,f451,f422,f227,f330])).
fof(f1274,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0')),
  inference(unit_resulting_resolution,[],[f433,f426,f450,f227,f330])).
fof(f1275,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0')),
  inference(unit_resulting_resolution,[],[f433,f451,f450,f227,f330])).
fof(f1277,plain,(
  ( ! [X0] : (sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f433,f462,f424,f227,f330])).
fof(f1278,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f433,f428,f460,f227,f330])).
fof(f1279,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f433,f462,f460,f227,f330])).
fof(f1282,plain,(
  ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f433,f424,f812,f227,f330])).
fof(f1283,plain,(
  ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f433,f424,f789,f227,f330])).
fof(f1263,plain,(
  ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f1257])).
fof(f1257,plain,(
  ( ! [X8,X9] : (~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8) | p(s(bool,X9)) | ~p(s(bool,X8))) )),
  inference(subsumption_resolution,[],[f1251,f227])).
fof(f1251,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8)) )),
  inference(superposition,[],[f397,f473])).
fof(f1256,plain,(
  ( ! [X6,X7] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6) | p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1250,f227])).
fof(f1250,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6)) )),
  inference(superposition,[],[f397,f474])).
fof(f1238,plain,(
  ~sP11('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f1220,f385])).
fof(f1234,plain,(
  ( ! [X5] : (~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f1229,f227])).
fof(f1229,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1205,f473])).
fof(f1233,plain,(
  ( ! [X4] : (p(s(bool,X4)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X4,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f1228,f227])).
fof(f1228,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X4,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f1205,f474])).
fof(f1220,plain,(
  ~sP10('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f227,f413,f1205])).
fof(f1209,plain,(
  ~sP11('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1195,f385])).
fof(f1205,plain,(
  ( ! [X8,X9] : (~p(s(bool,X9)) | p(s(bool,X8)) | ~sP10(X9,X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f1199,f227])).
fof(f1199,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X8)) | ~p(s(bool,X9)) | ~sP10(X9,X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f390,f473])).
fof(f1204,plain,(
  ( ! [X6,X7] : (~sP10(X7,X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | ~p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1198,f227])).
fof(f1198,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~p(s(bool,X7)) | ~sP10(X7,X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f390,f474])).
fof(f1195,plain,(
  ~sP10('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f227,f390])).
fof(f1179,plain,(
  sP11('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f447,f227,f413,f389])).
fof(f1180,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f467,f227,f413,f389])).
fof(f1174,plain,(
  sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'F_0')),
  inference(unit_resulting_resolution,[],[f413,f845])).
fof(f1157,plain,(
  ~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1143,f368])).
fof(f1143,plain,(
  ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f1100])).
fof(f1142,plain,(
  ( ! [X8,X9] : (~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8) | p(s(bool,X9)) | p(s(bool,X8))) )),
  inference(subsumption_resolution,[],[f1135,f227])).
fof(f1135,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X8)) | p(s(bool,X9)) | ~sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9,X8)) )),
  inference(superposition,[],[f380,f473])).
fof(f1141,plain,(
  ( ! [X6,X7] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6) | p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1134,f227])).
fof(f1134,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,X7)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7,X6)) )),
  inference(superposition,[],[f380,f474])).
fof(f1104,plain,(
  ~sP9('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1089,f368])).
fof(f1100,plain,(
  ( ! [X8,X9] : (~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X8,X9) | p(s(bool,X9)) | p(s(bool,X8))) )),
  inference(subsumption_resolution,[],[f1093,f227])).
fof(f1093,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X8)) | p(s(bool,X9)) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X8,X9)) )),
  inference(superposition,[],[f373,f473])).
fof(f1099,plain,(
  ( ! [X6,X7] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X6,X7) | p(s(bool,X7)) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1092,f227])).
fof(f1092,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,X7)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X6,X7)) )),
  inference(superposition,[],[f373,f474])).
fof(f1089,plain,(
  ~sP8('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f227,f373])).
fof(f1072,plain,(
  sP9('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f443,f413,f413,f372])).
fof(f1073,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f465,f413,f413,f372])).
fof(f1068,plain,(
  ~sP7('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f1050,f349])).
fof(f1064,plain,(
  ( ! [X5] : (~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f1059,f227])).
fof(f1059,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP6('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) )),
  inference(superposition,[],[f968,f473])).
fof(f1063,plain,(
  ( ! [X4] : (p(s(bool,X4)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(subsumption_resolution,[],[f1058,f227])).
fof(f1058,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(superposition,[],[f968,f474])).
fof(f1050,plain,(
  ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f968])).
fof(f1040,plain,(
  ( ! [X5] : (~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f1035,f227])).
fof(f1035,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP3('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) )),
  inference(superposition,[],[f915,f473])).
fof(f1039,plain,(
  ( ! [X4] : (p(s(bool,X4)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(subsumption_resolution,[],[f1034,f227])).
fof(f1034,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(superposition,[],[f915,f474])).
fof(f1026,plain,(
  ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f915])).
fof(f1018,plain,(
  ~sP5('T_0','F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f982,f328])).
fof(f1014,plain,(
  ( ! [X8,X9] : (~sP7(X9,X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X9)) | ~p(s(bool,X8))) )),
  inference(subsumption_resolution,[],[f1008,f227])).
fof(f1008,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP7(X9,X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f365,f473])).
fof(f1013,plain,(
  ( ! [X6,X7] : (~sP7(X7,X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1007,f227])).
fof(f1007,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP7(X7,X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f365,f474])).
fof(f996,plain,(
  ( ! [X5] : (~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f991,f227])).
fof(f991,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP4('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X5)) )),
  inference(superposition,[],[f886,f473])).
fof(f995,plain,(
  ( ! [X4] : (p(s(bool,X4)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(subsumption_resolution,[],[f990,f227])).
fof(f990,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X4)) )),
  inference(superposition,[],[f886,f474])).
fof(f982,plain,(
  ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f227,f413,f886])).
fof(f972,plain,(
  ~sP7('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f958,f349])).
fof(f968,plain,(
  ( ! [X8,X9] : (~p(s(bool,X8)) | p(s(bool,X9)) | ~sP6(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(subsumption_resolution,[],[f962,f227])).
fof(f962,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP6(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(superposition,[],[f356,f473])).
fof(f967,plain,(
  ( ! [X6,X7] : (~sP6(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f961,f227])).
fof(f961,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP6(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7)) )),
  inference(superposition,[],[f356,f474])).
fof(f958,plain,(
  ~sP6('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f227,f227,f356])).
fof(f944,plain,(
  sP7('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f435,f227,f227,f352])).
fof(f945,plain,(
  sP7('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f436,f227,f227,f352])).
fof(f946,plain,(
  sP7('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f455,f227,f227,f352])).
fof(f940,plain,(
  ~sP5('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f927,f326])).
fof(f927,plain,(
  ~sP2('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f413,f341])).
fof(f919,plain,(
  ~sP5('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f905,f327])).
fof(f915,plain,(
  ( ! [X8,X9] : (~p(s(bool,X8)) | p(s(bool,X9)) | ~sP3(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(subsumption_resolution,[],[f909,f227])).
fof(f909,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP3(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(superposition,[],[f337,f473])).
fof(f914,plain,(
  ( ! [X6,X7] : (~sP3(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f908,f227])).
fof(f908,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP3(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7)) )),
  inference(superposition,[],[f337,f474])).
fof(f905,plain,(
  ~sP3('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f227,f227,f337])).
fof(f886,plain,(
  ( ! [X8,X9] : (~p(s(bool,X8)) | p(s(bool,X9)) | ~sP4(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(subsumption_resolution,[],[f880,f227])).
fof(f880,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X8)) | p(s(bool,X9)) | ~sP4(X8,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X9)) )),
  inference(superposition,[],[f333,f473])).
fof(f885,plain,(
  ( ! [X6,X7] : (~sP4(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7) | p(s(bool,X7)) | ~p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f879,f227])).
fof(f879,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP4(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X7)) )),
  inference(superposition,[],[f333,f474])).
fof(f876,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f227,f227,f333])).
fof(f855,plain,(
  ( ! [X21] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X21)) )),
  inference(subsumption_resolution,[],[f837,f227])).
fof(f837,plain,(
  ( ! [X21] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X21)) )),
  inference(superposition,[],[f599,f474])).
fof(f854,plain,(
  ( ! [X20] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X20)) )),
  inference(subsumption_resolution,[],[f836,f227])).
fof(f836,plain,(
  ( ! [X20] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X20)) )),
  inference(superposition,[],[f567,f474])).
fof(f853,plain,(
  ( ! [X19] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X19,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(subsumption_resolution,[],[f835,f227])).
fof(f835,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X19,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f556,f474])).
fof(f852,plain,(
  ( ! [X17,X18] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X17,X18) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X17,X18)) )),
  inference(subsumption_resolution,[],[f834,f227])).
fof(f834,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X17,X18) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X17,X18)) )),
  inference(superposition,[],[f401,f474])).
fof(f851,plain,(
  ( ! [X15,X16] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X15,X16) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X15,X16)) )),
  inference(subsumption_resolution,[],[f833,f227])).
fof(f833,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X15,X16) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X15,X16)) )),
  inference(superposition,[],[f400,f474])).
fof(f850,plain,(
  ( ! [X14,X13] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X13,X14) | ~p(s(bool,X13))) )),
  inference(subsumption_resolution,[],[f832,f227])).
fof(f832,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X13,X14)) )),
  inference(superposition,[],[f396,f474])).
fof(f849,plain,(
  ( ! [X12,X11] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X12,X11) | p(s(bool,X11))) )),
  inference(subsumption_resolution,[],[f831,f227])).
fof(f831,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X12,X11)) )),
  inference(superposition,[],[f395,f474])).
fof(f848,plain,(
  ( ! [X10,X9] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X9,X10) | ~p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f830,f227])).
fof(f830,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X9,X10)) )),
  inference(superposition,[],[f379,f474])).
fof(f847,plain,(
  ( ! [X8,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X8,X7) | ~p(s(bool,X7))) )),
  inference(subsumption_resolution,[],[f829,f227])).
fof(f829,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X8,X7)) )),
  inference(superposition,[],[f378,f474])).
fof(f846,plain,(
  ( ! [X6] : (sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f828,f227])).
fof(f828,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(superposition,[],[f304,f474])).
fof(f845,plain,(
  ( ! [X5] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X5) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f827,f227])).
fof(f827,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X5)) )),
  inference(superposition,[],[f301,f474])).
fof(f812,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0')),
  inference(unit_resulting_resolution,[],[f413,f474,f348])).
fof(f813,plain,(
  sP5('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0')),
  inference(unit_resulting_resolution,[],[f227,f474,f346])).
fof(f814,plain,(
  ~sP5('F_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f413,f474,f348])).
fof(f815,plain,(
  sP5('T_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f227,f474,f346])).
fof(f789,plain,(
  ~sP5('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f413,f473,f348])).
fof(f791,plain,(
  ~sP5('F_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f413,f473,f348])).
fof(f780,plain,(
  ~sP5('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f469,f347])).
fof(f782,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f227,f469,f347])).
fof(f769,plain,(
  sP5('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0')),
  inference(unit_resulting_resolution,[],[f227,f473,f346])).
fof(f770,plain,(
  sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f227,f473,f346])).
fof(f761,plain,(
  sP5('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f413,f469,f345])).
fof(f762,plain,(
  sP5('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f469,f345])).
fof(f736,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f732,f413])).
fof(f732,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f276,f236])).
fof(f722,plain,(
  ( ! [X0,X1] : (sP11('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f227,f466,f400])).
fof(f674,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f236,f236])).
fof(f650,plain,(
  ( ! [X0,X1] : (sP7('F_0',X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f463,f413,f402])).
fof(f652,plain,(
  ( ! [X0,X1] : (sP7('F_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f464,f413,f402])).
fof(f642,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(subsumption_resolution,[],[f641,f227])).
fof(f641,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(superposition,[],[f401,f473])).
fof(f636,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f440,f227,f401])).
fof(f637,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f456,f227,f401])).
fof(f639,plain,(
  ( ! [X0] : (sP9('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0)) )),
  inference(unit_resulting_resolution,[],[f457,f227,f401])).
fof(f640,plain,(
  ( ! [X0] : (sP9('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f442,f227,f401])).
fof(f625,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(subsumption_resolution,[],[f624,f227])).
fof(f624,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(superposition,[],[f599,f473])).
fof(f623,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f599])).
fof(f620,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(subsumption_resolution,[],[f619,f227])).
fof(f619,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(superposition,[],[f400,f473])).
fof(f617,plain,(
  ( ! [X0] : (sP11('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0)) )),
  inference(unit_resulting_resolution,[],[f458,f227,f400])).
fof(f618,plain,(
  ( ! [X0] : (sP11('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f446,f227,f400])).
fof(f599,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(subsumption_resolution,[],[f598,f227])).
fof(f598,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(superposition,[],[f396,f473])).
fof(f597,plain,(
  ( ! [X0] : (sP11('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f227,f396])).
fof(f594,plain,(
  ( ! [X0] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f590])).
fof(f590,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1,X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f589,f227])).
fof(f589,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1,X0)) )),
  inference(superposition,[],[f395,f473])).
fof(f588,plain,(
  ( ! [X0] : (sP11('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f227,f395])).
fof(f580,plain,(
  ( ! [X0] : (~sP11('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f413,f384])).
fof(f579,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(subsumption_resolution,[],[f578,f227])).
fof(f578,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(superposition,[],[f567,f473])).
fof(f577,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f567])).
fof(f576,plain,(
  ( ! [X0] : (~sP11('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f413,f383])).
fof(f567,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(subsumption_resolution,[],[f566,f227])).
fof(f566,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(superposition,[],[f379,f473])).
fof(f565,plain,(
  ( ! [X0] : (sP9('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f227,f379])).
fof(f562,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(subsumption_resolution,[],[f561,f227])).
fof(f561,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f556,f473])).
fof(f560,plain,(
  ( ! [X0] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f556])).
fof(f556,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1,X0)) )),
  inference(subsumption_resolution,[],[f555,f227])).
fof(f555,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1,X0)) )),
  inference(superposition,[],[f378,f473])).
fof(f554,plain,(
  ( ! [X0] : (sP9('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f227,f378])).
fof(f550,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f413,f367])).
fof(f548,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f413,f366])).
fof(f543,plain,(
  ( ! [X0] : (sP7('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f413,f413,f361])).
fof(f536,plain,(
  ( ! [X0] : (sP7('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f413,f360])).
fof(f532,plain,(
  ( ! [X0] : (~sP7('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f413,f351])).
fof(f529,plain,(
  ( ! [X0] : (~sP7('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f227,f413,f350])).
fof(f528,plain,(
  sP1('F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))),
  inference(unit_resulting_resolution,[],[f413,f510])).
fof(f521,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f414])).
fof(f510,plain,(
  ( ! [X0] : (sP1(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f509,f227])).
fof(f509,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(superposition,[],[f304,f473])).
fof(f508,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f413,f227,f304])).
fof(f505,plain,(
  sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0')),
  inference(unit_resulting_resolution,[],[f413,f502])).
fof(f502,plain,(
  ( ! [X0] : (sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f501,f227])).
fof(f501,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(superposition,[],[f301,f473])).
fof(f500,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f227,f301])).
fof(f496,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f227,f227,f300])).
fof(f495,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f413,f413,f299])).
fof(f474,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))),
  inference(unit_resulting_resolution,[],[f223,f246])).
fof(f469,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f413,f245])).
fof(f470,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f272,f245])).
fof(f459,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f272,f335])).
fof(f460,plain,(
  ( ! [X2,X0,X1] : (sP4('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f272,f336])).
fof(f461,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f272,f339])).
fof(f462,plain,(
  ( ! [X2,X0,X1] : (sP3('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f272,f340])).
fof(f463,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f272,f358])).
fof(f464,plain,(
  ( ! [X2,X0,X1] : (sP6('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f272,f359])).
fof(f465,plain,(
  ( ! [X2,X0,X1] : (sP8('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f272,f376])).
fof(f466,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',X2),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f272,f391])).
fof(f467,plain,(
  ( ! [X2,X0,X1] : (sP10('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f272,f393])).
fof(f448,plain,(
  ( ! [X0] : (sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f285])).
fof(f449,plain,(
  ( ! [X0] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0)) )),
  inference(unit_resulting_resolution,[],[f223,f286])).
fof(f451,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f338])).
fof(f452,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f342])).
fof(f454,plain,(
  ( ! [X0,X1] : (sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f223,f344])).
fof(f455,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f357])).
fof(f456,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) )),
  inference(unit_resulting_resolution,[],[f223,f374])).
fof(f457,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X1)) )),
  inference(unit_resulting_resolution,[],[f223,f375])).
fof(f458,plain,(
  ( ! [X0,X1] : (sP10(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),X1)) )),
  inference(unit_resulting_resolution,[],[f223,f392])).
fof(f447,plain,(
  ( ! [X0,X1] : (sP10('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f413,f393])).
fof(f445,plain,(
  ( ! [X0,X1] : (sP10(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f227,f392])).
fof(f446,plain,(
  ( ! [X0,X1] : (sP10(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f224,f392])).
fof(f444,plain,(
  ( ! [X0,X1] : (sP10(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f413,f391])).
fof(f443,plain,(
  ( ! [X0,X1] : (sP8('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f413,f376])).
fof(f441,plain,(
  ( ! [X0,X1] : (sP8(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f227,f375])).
fof(f442,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f224,f375])).
fof(f439,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f374])).
fof(f440,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f374])).
fof(f438,plain,(
  ( ! [X0,X1] : (sP6('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f413,f359])).
fof(f437,plain,(
  ( ! [X0,X1] : (sP6(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f413,f358])).
fof(f435,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f357])).
fof(f436,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f357])).
fof(f433,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f227,f344])).
fof(f434,plain,(
  ( ! [X0,X1] : (sP2('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f224,f344])).
fof(f431,plain,(
  ( ! [X0,X1] : (sP2(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f227,f343])).
fof(f432,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(unit_resulting_resolution,[],[f224,f343])).
fof(f429,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f342])).
fof(f430,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f342])).
fof(f428,plain,(
  ( ! [X0,X1] : (sP3('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f413,f340])).
fof(f427,plain,(
  ( ! [X0,X1] : (sP3(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f413,f339])).
fof(f425,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f338])).
fof(f426,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f338])).
fof(f424,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f413,f336])).
fof(f423,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f413,f335])).
fof(f421,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f334])).
fof(f422,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f334])).
fof(f419,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f227,f286])).
fof(f420,plain,(
  ( ! [X0] : (sP0('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X0)) )),
  inference(unit_resulting_resolution,[],[f224,f286])).
fof(f417,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f227,f285])).
fof(f418,plain,(
  ( ! [X0] : (sP0(X0,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(unit_resulting_resolution,[],[f224,f285])).
fof(f394,plain,(
  ( ! [X2,X0,X1] : (sP11(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP11(X2,X0,X1)) & (~sP11(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP11(X2,X0,X1))),
  inference(definition_folding,[],[f128,f145,f144])).
fof(f144,plain,(
  ! [X2,X0,X1] : (sP10(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f145,plain,(
  ! [X2,X0,X1] : (sP11(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f128,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X16,X17,X18] : ((p(s(bool,X18)) <=> (p(s(bool,X17)) => p(s(bool,X16)))) <=> ((p(s(bool,X18)) | p(s(bool,X17))) & (p(s(bool,X18)) | ~p(s(bool,X16))) & (~p(s(bool,X17)) | p(s(bool,X16)) | ~p(s(bool,X18)))))),
  file('thm.int_arith.le_context_rwt4','thm.sat.sat_27_prove_ltb')).
fof(f395,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f222])).
fof(f396,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f222])).
fof(f397,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP11(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f222])).
fof(f390,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP10(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP10(X0,X1,X2)))),
  inference(rectify,[],[f219])).
fof(f219,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(flattening,[],[f218])).
fof(f218,plain,(
  ! [X2,X0,X1] : ((~sP10(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP10(X2,X0,X1)))),
  inference(nnf_transformation,[],[f144])).
fof(f391,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f220])).
fof(f392,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f220])).
fof(f393,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f220])).
fof(f383,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP10(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f216])).
fof(f216,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1) | sP11(X2,X0,X1)))),
  inference(flattening,[],[f215])).
fof(f215,plain,(
  ! [X2,X0,X1] : ((~sP11(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP10(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP10(X2,X0,X1)) | sP11(X2,X0,X1)))),
  inference(nnf_transformation,[],[f145])).
fof(f384,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f217])).
fof(f385,plain,(
  ( ! [X2,X0,X1] : (~sP11(X0,X1,X2) | sP10(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f217])).
fof(f400,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP10(X0,X1,X2) | sP11(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f386])).
fof(f386,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f217])).
fof(f387,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f217])).
fof(f388,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f217])).
fof(f389,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP10(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f217])).
fof(f377,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f214])).
fof(f214,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP9(X2,X0,X1))),
  inference(definition_folding,[],[f100,f142,f141])).
fof(f141,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f142,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f100,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X16,X17,X18] : ((p(s(bool,X18)) <=> (p(s(bool,X17)) | p(s(bool,X16)))) <=> ((p(s(bool,X18)) | ~p(s(bool,X17))) & (p(s(bool,X18)) | ~p(s(bool,X16))) & (p(s(bool,X17)) | p(s(bool,X16)) | ~p(s(bool,X18)))))),
  file('thm.int_arith.le_context_rwt4','thm.sat.sat_25_prove_ltb')).
fof(f378,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f214])).
fof(f379,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f214])).
fof(f380,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)) | ~sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f214])).
fof(f373,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f211])).
fof(f211,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f141])).
fof(f374,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f212])).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f212])).
fof(f376,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f212])).
fof(f366,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP8(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f208])).
fof(f208,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f207])).
fof(f207,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1)) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f142])).
fof(f367,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f209])).
fof(f368,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f209])).
fof(f401,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f369])).
fof(f369,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f209])).
fof(f370,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f209])).
fof(f371,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f209])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f209])).
fof(f360,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f205])).
fof(f205,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP7(X2,X0,X1))),
  inference(definition_folding,[],[f98,f139,f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : (sP6(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f139,plain,(
  ! [X2,X0,X1] : (sP7(X2,X0,X1) <=> (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f98,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X16,X17,X18] : ((p(s(bool,X18)) <=> (p(s(bool,X17)) & p(s(bool,X16)))) <=> ((p(s(bool,X18)) | ~p(s(bool,X17)) | ~p(s(bool,X16))) & (p(s(bool,X17)) | ~p(s(bool,X18))) & (p(s(bool,X16)) | ~p(s(bool,X18)))))),
  file('thm.int_arith.le_context_rwt4','thm.sat.sat_23_prove_ltb')).
fof(f361,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f206])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f206])).
fof(f365,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f206])).
fof(f356,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(flattening,[],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(nnf_transformation,[],[f138])).
fof(f357,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f204])).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f204])).
fof(f359,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f204])).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (sP6(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP6(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f201])).
fof(f201,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP7(X2,X0,X1)))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | (sP6(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP6(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP7(X2,X0,X1)))),
  inference(nnf_transformation,[],[f139])).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f202])).
fof(f351,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f202])).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f402,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f355])).
fof(f355,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP6(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f202])).
fof(f345,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f199])).
fof(f346,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f199])).
fof(f347,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f199])).
fof(f341,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f198])).
fof(f342,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f198])).
fof(f344,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f198])).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f196])).
fof(f338,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f196])).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f196])).
fof(f333,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f193])).
fof(f335,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f193])).
fof(f336,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f193])).
fof(f326,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f327,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP3(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f328,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP4(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f190])).
fof(f329,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f190])).
fof(f330,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | sP5(X0,X1,X2) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f331,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X2,X1) | p(s(bool,X1)) | sP5(X0,X1,X2) | ~sP3(X1,X2,X0) | ~sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f317,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK15(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK15(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK15(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK15(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.int_arith.le_context_rwt4',aHL_EXT)).
fof(f299,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f178])).
fof(f178,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f177])).
fof(f177,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f300,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f179])).
fof(f301,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f179])).
fof(f304,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f179])).
fof(f414,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f284,f413])).
fof(f284,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f171])).
fof(f171,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f285,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f172])).
fof(f286,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f172])).
fof(f276,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10] : ((p(s(bool,X9)) => p(s(bool,X10))) => ((p(s(bool,X10)) => p(s(bool,X9))) => s(bool,X9) = s(bool,X10)))),
  file('thm.int_arith.le_context_rwt4','thm.bool.IMP_ANTISYM_AX')).
fof(f279,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f118])).
fof(f245,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f152])).
fof(f236,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.le_context_rwt4',aHL_BOOL_CASES)).
fof(f14145,plain,(
  $false | ($spl8 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14144,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f14131])).
fof(f14144,plain,(
  ( ! [X173] : (p(s(bool,X173)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0')) ) | ($spl8 | $spl82)),
  inference(subsumption_resolution,[],[f12486,f245])).
fof(f12486,plain,(
  ( ! [X173] : (p(s(bool,X173)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') | s(bool,'T_0') = s(bool,X173)) ) | ($spl8 | $spl82)),
  inference(superposition,[],[f2281,f6103])).
fof(f14143,plain,(
  $false | ($spl4 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14142,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f14131])).
fof(f14142,plain,(
  ( ! [X172] : (p(s(bool,X172)) | sP1('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl4 | $spl82)),
  inference(subsumption_resolution,[],[f12485,f245])).
fof(f12485,plain,(
  ( ! [X172] : (p(s(bool,X172)) | sP1('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X172)) ) | ($spl4 | $spl82)),
  inference(superposition,[],[f2277,f6103])).
fof(f14132,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886,f14131])).
fof(f14127,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14126,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14126,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13166,f227])).
fof(f13166,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6875])).
fof(f6875,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',sK12)))) | sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f6874,f275])).
fof(f6874,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(forward_demodulation,[],[f6863,f275])).
fof(f6863,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1716,f275])).
fof(f1716,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X11),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f285,f1468])).
fof(f1468,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f318,f409])).
fof(f14125,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14124,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14124,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13165,f227])).
fof(f13165,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6899])).
fof(f6899,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))),s('type.integer.int',sK12)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X3)) ) | $spl0),
  inference(forward_demodulation,[],[f6898,f275])).
fof(f6898,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X3) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(forward_demodulation,[],[f6887,f275])).
fof(f6887,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X3) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1717,f275])).
fof(f1717,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X14) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f286,f1468])).
fof(f14123,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14122,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14122,plain,(
  ( ! [X123,X122] : (p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13160,f227])).
fof(f13160,plain,(
  ( ! [X123,X122] : (~p(s(bool,'T_0')) | p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7140])).
fof(f7140,plain,(
  ( ! [X123,X122] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X122))),s('type.integer.int',sK12)))) | p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl0),
  inference(superposition,[],[f1205,f1706])).
fof(f1706,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',sK12))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1468,f275])).
fof(f14121,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14120,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14120,plain,(
  ( ! [X121,X120] : (p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13159,f227])).
fof(f13159,plain,(
  ( ! [X121,X120] : (~p(s(bool,'T_0')) | p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7139])).
fof(f7139,plain,(
  ( ! [X121,X120] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X120))),s('type.integer.int',sK12)))) | p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | $spl0),
  inference(superposition,[],[f968,f1706])).
fof(f14119,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14118,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14118,plain,(
  ( ! [X118,X119] : (p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13158,f227])).
fof(f13158,plain,(
  ( ! [X118,X119] : (~p(s(bool,'T_0')) | p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7138])).
fof(f7138,plain,(
  ( ! [X118,X119] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X118))),s('type.integer.int',sK12)))) | p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | $spl0),
  inference(superposition,[],[f915,f1706])).
fof(f14117,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14116,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14116,plain,(
  ( ! [X116,X117] : (p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13157,f227])).
fof(f13157,plain,(
  ( ! [X116,X117] : (~p(s(bool,'T_0')) | p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7137])).
fof(f7137,plain,(
  ( ! [X116,X117] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X116))),s('type.integer.int',sK12)))) | p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | $spl0),
  inference(superposition,[],[f886,f1706])).
fof(f14115,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14114,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14114,plain,(
  ( ! [X105,X104] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X105)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13156,f227])).
fof(f13156,plain,(
  ( ! [X105,X104] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X105)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7131])).
fof(f7131,plain,(
  ( ! [X105,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104))),s('type.integer.int',sK12)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X105)) ) | $spl0),
  inference(superposition,[],[f599,f1706])).
fof(f14113,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14112,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14112,plain,(
  ( ! [X103,X102] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X103)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13155,f227])).
fof(f13155,plain,(
  ( ! [X103,X102] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X103)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7130])).
fof(f7130,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X102))),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X103)) ) | $spl0),
  inference(superposition,[],[f567,f1706])).
fof(f14111,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14110,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14110,plain,(
  ( ! [X101,X100] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13154,f227])).
fof(f13154,plain,(
  ( ! [X101,X100] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7129])).
fof(f7129,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X100))),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f556,f1706])).
fof(f14109,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14108,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14108,plain,(
  ( ! [X99,X97,X98] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13153,f227])).
fof(f13153,plain,(
  ( ! [X99,X97,X98] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7128])).
fof(f7128,plain,(
  ( ! [X99,X97,X98] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98,X99)) ) | $spl0),
  inference(superposition,[],[f401,f1706])).
fof(f14107,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14106,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14106,plain,(
  ( ! [X94,X95,X96] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13152,f227])).
fof(f13152,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7127])).
fof(f7127,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94))),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X95,X96)) ) | $spl0),
  inference(superposition,[],[f400,f1706])).
fof(f14105,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14104,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14104,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X93,X92)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13151,f227])).
fof(f13151,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X93,X92)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7126])).
fof(f7126,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X91))),s('type.integer.int',sK12)))) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X93,X92)) ) | $spl0),
  inference(superposition,[],[f397,f1706])).
fof(f14103,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14102,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14102,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X89,X90)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13150,f227])).
fof(f13150,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X89,X90)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7125])).
fof(f7125,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X88))),s('type.integer.int',sK12)))) | ~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X89,X90)) ) | $spl0),
  inference(superposition,[],[f396,f1706])).
fof(f14101,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14100,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14100,plain,(
  ( ! [X87,X85,X86] : (p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X87,X86)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13149,f227])).
fof(f13149,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X87,X86)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7124])).
fof(f7124,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85))),s('type.integer.int',sK12)))) | p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X87,X86)) ) | $spl0),
  inference(superposition,[],[f395,f1706])).
fof(f14099,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14098,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14098,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13148,f227])).
fof(f13148,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7123])).
fof(f7123,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f390,f1706])).
fof(f14097,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14096,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14096,plain,(
  ( ! [X80,X81,X79] : (p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,X80)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13147,f227])).
fof(f13147,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,'T_0')) | p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,X80)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7122])).
fof(f7122,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79))),s('type.integer.int',sK12)))) | p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,X80)) ) | $spl0),
  inference(superposition,[],[f380,f1706])).
fof(f14095,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14094,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14094,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,X78)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13146,f227])).
fof(f13146,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,X78)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7121])).
fof(f7121,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X76))),s('type.integer.int',sK12)))) | ~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,X78)) ) | $spl0),
  inference(superposition,[],[f379,f1706])).
fof(f14093,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14092,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14092,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X75,X74)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13145,f227])).
fof(f13145,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X75,X74)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7120])).
fof(f7120,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73))),s('type.integer.int',sK12)))) | ~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X75,X74)) ) | $spl0),
  inference(superposition,[],[f378,f1706])).
fof(f14091,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14090,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14090,plain,(
  ( ! [X70,X72,X71] : (p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X71,X72)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13144,f227])).
fof(f13144,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X71,X72)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7119])).
fof(f7119,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70))),s('type.integer.int',sK12)))) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X71,X72)) ) | $spl0),
  inference(superposition,[],[f373,f1706])).
fof(f14089,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14088,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14088,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13143,f227])).
fof(f13143,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7118])).
fof(f7118,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int',sK12)))) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f365,f1706])).
fof(f14087,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14086,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14086,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13142,f227])).
fof(f13142,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7117])).
fof(f7117,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X64))),s('type.integer.int',sK12)))) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | $spl0),
  inference(superposition,[],[f356,f1706])).
fof(f14085,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14084,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14084,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13141,f227])).
fof(f13141,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7116])).
fof(f7116,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int',sK12)))) | ~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X63)) ) | $spl0),
  inference(superposition,[],[f337,f1706])).
fof(f14083,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14082,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14082,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13140,f227])).
fof(f13140,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7115])).
fof(f7115,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X58))),s('type.integer.int',sK12)))) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X60)) ) | $spl0),
  inference(superposition,[],[f333,f1706])).
fof(f14081,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14080,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14080,plain,(
  ( ! [X57,X56,X55] : (sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13139,f227])).
fof(f13139,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7114])).
fof(f7114,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X55))),s('type.integer.int',sK12)))) | sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56)) ) | $spl0),
  inference(superposition,[],[f330,f1706])).
fof(f14079,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14078,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14078,plain,(
  ( ! [X54,X53] : (p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13138,f227])).
fof(f13138,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7113])).
fof(f7113,plain,(
  ( ! [X54,X53] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53))),s('type.integer.int',sK12)))) | p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f304,f1706])).
fof(f14077,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14076,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14076,plain,(
  ( ! [X52,X51] : (p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X52)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13137,f227])).
fof(f13137,plain,(
  ( ! [X52,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X52)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7112])).
fof(f7112,plain,(
  ( ! [X52,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X51))),s('type.integer.int',sK12)))) | p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X52)) ) | $spl0),
  inference(superposition,[],[f301,f1706])).
fof(f14075,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14074,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14074,plain,(
  ( ! [X35,X33,X34,X32] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13136,f227])).
fof(f13136,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7101])).
fof(f7101,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X32))),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X34,X35)) ) | $spl0),
  inference(superposition,[],[f1497,f1706])).
fof(f14073,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14072,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14072,plain,(
  ( ! [X30,X28,X31,X29] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13135,f227])).
fof(f13135,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7100])).
fof(f7100,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X28))),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X30,X31)) ) | $spl0),
  inference(superposition,[],[f1496,f1706])).
fof(f14071,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14070,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14070,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X25)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13134,f227])).
fof(f13134,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X25)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7099])).
fof(f7099,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24))),s('type.integer.int',sK12)))) | p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X25)) ) | $spl0),
  inference(superposition,[],[f1493,f1706])).
fof(f14069,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14068,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14068,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X22,X21)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13133,f227])).
fof(f13133,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X22,X21)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7098])).
fof(f7098,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20))),s('type.integer.int',sK12)))) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X22,X21)) ) | $spl0),
  inference(superposition,[],[f1491,f1706])).
fof(f14067,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14066,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14066,plain,(
  ( ! [X19,X17,X18,X16] : (p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X17,X18)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13132,f227])).
fof(f13132,plain,(
  ( ! [X19,X17,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X17,X18)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7097])).
fof(f7097,plain,(
  ( ! [X19,X17,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int',sK12)))) | p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X17,X18)) ) | $spl0),
  inference(superposition,[],[f1488,f1706])).
fof(f14065,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14064,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14064,plain,(
  ( ! [X14,X12,X15,X13] : (sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14,X13)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13131,f227])).
fof(f13131,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14,X13)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7096])).
fof(f7096,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12))),s('type.integer.int',sK12)))) | sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X14,X13)) ) | $spl0),
  inference(superposition,[],[f1483,f1706])).
fof(f14063,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14062,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14062,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13130,f227])).
fof(f13130,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7095])).
fof(f7095,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int',sK12)))) | p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl0),
  inference(superposition,[],[f1482,f1706])).
fof(f14061,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14060,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14060,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13129,f227])).
fof(f13129,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7094])).
fof(f7094,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',sK12)))) | p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X7)) ) | $spl0),
  inference(superposition,[],[f1481,f1706])).
fof(f14059,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14058,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14058,plain,(
  ( ! [X4,X5,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13128,f227])).
fof(f13128,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7093])).
fof(f7093,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int',sK12)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X5)) ) | $spl0),
  inference(superposition,[],[f1480,f1706])).
fof(f14057,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14056,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14056,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13127,f227])).
fof(f13127,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7092])).
fof(f7092,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',sK12)))) | sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl0),
  inference(superposition,[],[f1479,f1706])).
fof(f14055,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14054,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14054,plain,(
  ( ! [X2,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X2)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13125,f227])).
fof(f13125,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X2)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6896])).
fof(f6896,plain,(
  ( ! [X2,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X2) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1717,f275])).
fof(f14053,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14052,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14052,plain,(
  ( ! [X2,X1] : (sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13124,f227])).
fof(f13124,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6872])).
fof(f6872,plain,(
  ( ! [X2,X1] : (sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1716,f275])).
fof(f14051,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14050,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14050,plain,(
  ( ! [X26,X24,X25] : (~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13123,f227])).
fof(f13123,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | ~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8650])).
fof(f8650,plain,(
  ( ! [X26,X24,X25] : (~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24))))),s('type.integer.int',sK12)))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | $spl0),
  inference(forward_demodulation,[],[f8631,f275])).
fof(f8631,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24))))),s('type.integer.int',sK12)))) | p(s(bool,X25)) | ~p(s(bool,X26)) | ~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1729,f1391])).
fof(f1729,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',sK12)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f390,f1468])).
fof(f14049,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14048,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14048,plain,(
  ( ! [X23,X21,X22] : (~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13122,f227])).
fof(f13122,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | ~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8649])).
fof(f8649,plain,(
  ( ! [X23,X21,X22] : (~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',sK12)))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | $spl0),
  inference(forward_demodulation,[],[f8630,f275])).
fof(f8630,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',sK12)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | ~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1729,f1397])).
fof(f14047,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14046,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14046,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13119,f227])).
fof(f13119,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9155])).
fof(f9155,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f4560,f409])).
fof(f14045,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14044,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14044,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13118,f227])).
fof(f13118,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9080])).
fof(f9080,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f4451,f409])).
fof(f14043,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14042,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14042,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13117,f227])).
fof(f13117,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9019])).
fof(f9019,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f4411,f409])).
fof(f14041,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14040,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14040,plain,(
  ( ! [X28,X26,X27,X25] : (sP5(X26,X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27) | ~sP3(X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13115,f227])).
fof(f13115,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | sP5(X26,X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27) | ~sP3(X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5890])).
fof(f5890,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12)))) | sP5(X26,X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27) | ~sP3(X27,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | $spl0),
  inference(superposition,[],[f1483,f1468])).
fof(f14039,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14038,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14038,plain,(
  ( ! [X28,X26,X27,X25] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13114,f227])).
fof(f13114,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5793])).
fof(f5793,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | $spl0),
  inference(superposition,[],[f1497,f1468])).
fof(f14037,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14036,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14036,plain,(
  ( ! [X28,X26,X27,X25] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13113,f227])).
fof(f13113,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5706])).
fof(f5706,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X28)) ) | $spl0),
  inference(superposition,[],[f1496,f1468])).
fof(f14035,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14034,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14034,plain,(
  ( ! [X28,X26,X27,X25] : (p(s(bool,X26)) | p(s(bool,X27)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13112,f227])).
fof(f13112,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5523])).
fof(f5523,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12)))) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X27,X26)) ) | $spl0),
  inference(superposition,[],[f1491,f1468])).
fof(f14033,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14032,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14032,plain,(
  ( ! [X28,X26,X27,X25] : (p(s(bool,X26)) | p(s(bool,X27)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26,X27)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13111,f227])).
fof(f13111,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26,X27)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5444])).
fof(f5444,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12)))) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X28),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X26,X27)) ) | $spl0),
  inference(superposition,[],[f1488,f1468])).
fof(f14031,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14030,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14030,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,X14)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X16,X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13110,f227])).
fof(f13110,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X16,X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4493])).
fof(f4493,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X13),s('type.integer.int',sK12)))) | p(s(bool,X14)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X16,X14)) ) | $spl0),
  inference(superposition,[],[f1493,f1468])).
fof(f14029,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14028,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14028,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X11)) | sP1(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13109,f227])).
fof(f13109,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4283])).
fof(f4283,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',sK12)))) | p(s(bool,X11)) | sP1(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl0),
  inference(superposition,[],[f1482,f1468])).
fof(f14027,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14026,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14026,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X11)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13108,f227])).
fof(f13108,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4230])).
fof(f4230,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',sK12)))) | p(s(bool,X11)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11)) ) | $spl0),
  inference(superposition,[],[f1481,f1468])).
fof(f14025,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14024,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14024,plain,(
  ( ! [X12,X10,X11] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X12)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13107,f227])).
fof(f13107,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X12)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4177])).
fof(f4177,plain,(
  ( ! [X12,X10,X11] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X12) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1480,f1468])).
fof(f14023,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14022,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14022,plain,(
  ( ! [X12,X10,X11] : (sP0(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13106,f227])).
fof(f13106,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | sP0(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4124])).
fof(f4124,plain,(
  ( ! [X12,X10,X11] : (sP0(X11,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X10))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f1479,f1468])).
fof(f14021,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14020,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14020,plain,(
  ( ! [X76,X77] : (p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13102,f227])).
fof(f13102,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1741])).
fof(f1741,plain,(
  ( ! [X76,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl0),
  inference(superposition,[],[f1205,f1468])).
fof(f14019,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14018,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14018,plain,(
  ( ! [X74,X75] : (p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13101,f227])).
fof(f13101,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1740])).
fof(f1740,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X74),s('type.integer.int',sK12)))) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | $spl0),
  inference(superposition,[],[f968,f1468])).
fof(f14017,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14016,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14016,plain,(
  ( ! [X72,X73] : (p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13100,f227])).
fof(f13100,plain,(
  ( ! [X72,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1739])).
fof(f1739,plain,(
  ( ! [X72,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X72),s('type.integer.int',sK12)))) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | $spl0),
  inference(superposition,[],[f915,f1468])).
fof(f14015,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14014,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14014,plain,(
  ( ! [X70,X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13099,f227])).
fof(f13099,plain,(
  ( ! [X70,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1738])).
fof(f1738,plain,(
  ( ! [X70,X71] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X70),s('type.integer.int',sK12)))) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | $spl0),
  inference(superposition,[],[f886,f1468])).
fof(f14013,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14012,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14012,plain,(
  ( ! [X68,X69] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X69)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13098,f227])).
fof(f13098,plain,(
  ( ! [X68,X69] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X69)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1737])).
fof(f1737,plain,(
  ( ! [X68,X69] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X68),s('type.integer.int',sK12)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X69)) ) | $spl0),
  inference(superposition,[],[f599,f1468])).
fof(f14011,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14010,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14010,plain,(
  ( ! [X66,X67] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X67)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13097,f227])).
fof(f13097,plain,(
  ( ! [X66,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X67)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1736])).
fof(f1736,plain,(
  ( ! [X66,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X66),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X67)) ) | $spl0),
  inference(superposition,[],[f567,f1468])).
fof(f14009,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14008,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14008,plain,(
  ( ! [X64,X65] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13096,f227])).
fof(f13096,plain,(
  ( ! [X64,X65] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1735])).
fof(f1735,plain,(
  ( ! [X64,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X64),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f556,f1468])).
fof(f14007,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14006,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14006,plain,(
  ( ! [X61,X62,X63] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13095,f227])).
fof(f13095,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1734])).
fof(f1734,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X61),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63)) ) | $spl0),
  inference(superposition,[],[f401,f1468])).
fof(f14005,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14004,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14004,plain,(
  ( ! [X59,X60,X58] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13094,f227])).
fof(f13094,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1733])).
fof(f1733,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X58),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | $spl0),
  inference(superposition,[],[f400,f1468])).
fof(f14003,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14002,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14002,plain,(
  ( ! [X57,X56,X55] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13093,f227])).
fof(f13093,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1732])).
fof(f1732,plain,(
  ( ! [X57,X56,X55] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f397,f1468])).
fof(f14001,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f14000,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f14000,plain,(
  ( ! [X54,X52,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X53,X54) | ~p(s(bool,X53))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13092,f227])).
fof(f13092,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X53,X54) | ~p(s(bool,X53))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1731])).
fof(f1731,plain,(
  ( ! [X54,X52,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X53,X54) | ~p(s(bool,X53)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X52),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f396,f1468])).
fof(f13999,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13998,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13998,plain,(
  ( ! [X50,X51,X49] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X51,X50) | p(s(bool,X50))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13091,f227])).
fof(f13091,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X51,X50) | p(s(bool,X50))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1730])).
fof(f1730,plain,(
  ( ! [X50,X51,X49] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X51,X50) | p(s(bool,X50)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X49),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f395,f1468])).
fof(f13997,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13996,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13996,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13090,f227])).
fof(f13090,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1729])).
fof(f13995,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13994,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13994,plain,(
  ( ! [X45,X43,X44] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13089,f227])).
fof(f13089,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1728])).
fof(f1728,plain,(
  ( ! [X45,X43,X44] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X43),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f380,f1468])).
fof(f13993,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13992,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13992,plain,(
  ( ! [X41,X42,X40] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X41,X42) | ~p(s(bool,X41))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13088,f227])).
fof(f13088,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X41,X42) | ~p(s(bool,X41))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1727])).
fof(f1727,plain,(
  ( ! [X41,X42,X40] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X41,X42) | ~p(s(bool,X41)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X40),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f379,f1468])).
fof(f13991,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13990,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13990,plain,(
  ( ! [X39,X37,X38] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X39,X38) | ~p(s(bool,X38))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13087,f227])).
fof(f13087,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X39,X38) | ~p(s(bool,X38))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1726])).
fof(f1726,plain,(
  ( ! [X39,X37,X38] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X39,X38) | ~p(s(bool,X38)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X37),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f378,f1468])).
fof(f13989,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13988,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13988,plain,(
  ( ! [X35,X36,X34] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13086,f227])).
fof(f13086,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1725])).
fof(f1725,plain,(
  ( ! [X35,X36,X34] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X34),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f373,f1468])).
fof(f13987,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13986,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13986,plain,(
  ( ! [X33,X31,X32] : (~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X32)) | p(s(bool,X33))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13085,f227])).
fof(f13085,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X32)) | p(s(bool,X33))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1724])).
fof(f1724,plain,(
  ( ! [X33,X31,X32] : (~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X31),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f365,f1468])).
fof(f13985,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13984,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13984,plain,(
  ( ! [X30,X28,X29] : (~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30) | ~p(s(bool,X29)) | p(s(bool,X30))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13084,f227])).
fof(f13084,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30) | ~p(s(bool,X29)) | p(s(bool,X30))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1723])).
fof(f1723,plain,(
  ( ! [X30,X28,X29] : (~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30) | ~p(s(bool,X29)) | p(s(bool,X30)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X28),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f356,f1468])).
fof(f13983,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13982,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13982,plain,(
  ( ! [X26,X27,X25] : (~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X27) | ~p(s(bool,X26)) | p(s(bool,X27))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13083,f227])).
fof(f13083,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X27) | ~p(s(bool,X26)) | p(s(bool,X27))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1722])).
fof(f1722,plain,(
  ( ! [X26,X27,X25] : (~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X27) | ~p(s(bool,X26)) | p(s(bool,X27)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X25),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f337,f1468])).
fof(f13981,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13980,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13980,plain,(
  ( ! [X24,X23,X22] : (~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X24) | ~p(s(bool,X23)) | p(s(bool,X24))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13082,f227])).
fof(f13082,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X24) | ~p(s(bool,X23)) | p(s(bool,X24))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1721])).
fof(f1721,plain,(
  ( ! [X24,X23,X22] : (~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X24) | ~p(s(bool,X23)) | p(s(bool,X24)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X22),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f333,f1468])).
fof(f13979,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13978,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13978,plain,(
  ( ! [X21,X19,X20] : (sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21,X20)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13081,f227])).
fof(f13081,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21,X20)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1720])).
fof(f1720,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X19),s('type.integer.int',sK12)))) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21,X20)) ) | $spl0),
  inference(superposition,[],[f330,f1468])).
fof(f13977,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13976,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13976,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X18))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13080,f227])).
fof(f13080,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X18))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1719])).
fof(f1719,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X18)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X17),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f304,f1468])).
fof(f13975,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13974,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13974,plain,(
  ( ! [X15,X16] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X16) | p(s(bool,X16))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13079,f227])).
fof(f13079,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X16) | p(s(bool,X16))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1718])).
fof(f1718,plain,(
  ( ! [X15,X16] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X16) | p(s(bool,X16)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X15),s('type.integer.int',sK12))))) ) | $spl0),
  inference(superposition,[],[f301,f1468])).
fof(f13973,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13972,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13972,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13078,f227])).
fof(f13078,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1717])).
fof(f13971,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13970,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13970,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13077,f227])).
fof(f13077,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1716])).
fof(f13969,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13968,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13968,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13076,f227])).
fof(f13076,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6810])).
fof(f6810,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) | sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f6809,f275])).
fof(f6809,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f6798,f275])).
fof(f6798,plain,(
  ( ! [X2,X3,X1] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))))))) ) | $spl0),
  inference(superposition,[],[f1650,f275])).
fof(f1650,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X11))))) ) | $spl0),
  inference(superposition,[],[f285,f1458])).
fof(f1458,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))))) ) | $spl0),
  inference(superposition,[],[f318,f409])).
fof(f13967,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13966,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13966,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13075,f227])).
fof(f13075,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6843])).
fof(f6843,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),X3)) ) | $spl0),
  inference(forward_demodulation,[],[f6842,f275])).
fof(f6842,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),X3) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f6831,f275])).
fof(f6831,plain,(
  ( ! [X2,X3,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),X3) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X2))))))))) ) | $spl0),
  inference(superposition,[],[f1651,f275])).
fof(f1651,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13)))),X14) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X13))))) ) | $spl0),
  inference(superposition,[],[f286,f1458])).
fof(f13965,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13964,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13964,plain,(
  ( ! [X123,X122] : (p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122)))))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13070,f227])).
fof(f13070,plain,(
  ( ! [X123,X122] : (~p(s(bool,'T_0')) | p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122)))))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7036])).
fof(f7036,plain,(
  ( ! [X123,X122] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X122)))))) | p(s(bool,X123)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X122)))))),X123,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl0),
  inference(superposition,[],[f1205,f1640])).
fof(f1640,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0)))))))) ) | $spl0),
  inference(superposition,[],[f1458,f275])).
fof(f13963,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13962,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13962,plain,(
  ( ! [X121,X120] : (p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13069,f227])).
fof(f13069,plain,(
  ( ! [X121,X120] : (~p(s(bool,'T_0')) | p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7035])).
fof(f7035,plain,(
  ( ! [X121,X120] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X120)))))) | p(s(bool,X121)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X120)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121)) ) | $spl0),
  inference(superposition,[],[f968,f1640])).
fof(f13961,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13960,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13960,plain,(
  ( ! [X118,X119] : (p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13068,f227])).
fof(f13068,plain,(
  ( ! [X118,X119] : (~p(s(bool,'T_0')) | p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7034])).
fof(f7034,plain,(
  ( ! [X118,X119] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X118)))))) | p(s(bool,X119)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X118)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X119)) ) | $spl0),
  inference(superposition,[],[f915,f1640])).
fof(f13959,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13958,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13958,plain,(
  ( ! [X116,X117] : (p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13067,f227])).
fof(f13067,plain,(
  ( ! [X116,X117] : (~p(s(bool,'T_0')) | p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7033])).
fof(f7033,plain,(
  ( ! [X116,X117] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X116)))))) | p(s(bool,X117)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X116)))))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X117)) ) | $spl0),
  inference(superposition,[],[f886,f1640])).
fof(f13957,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13956,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13956,plain,(
  ( ! [X105,X104] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104)))))),X105)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13066,f227])).
fof(f13066,plain,(
  ( ! [X105,X104] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104)))))),X105)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7027])).
fof(f7027,plain,(
  ( ! [X105,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X104)))))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X104)))))),X105)) ) | $spl0),
  inference(superposition,[],[f599,f1640])).
fof(f13955,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13954,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13954,plain,(
  ( ! [X103,X102] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102)))))),X103)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13065,f227])).
fof(f13065,plain,(
  ( ! [X103,X102] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102)))))),X103)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7026])).
fof(f7026,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X102)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X102)))))),X103)) ) | $spl0),
  inference(superposition,[],[f567,f1640])).
fof(f13953,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13952,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13952,plain,(
  ( ! [X101,X100] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13064,f227])).
fof(f13064,plain,(
  ( ! [X101,X100] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7025])).
fof(f7025,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X100)))))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X101,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X100)))))))) ) | $spl0),
  inference(superposition,[],[f556,f1640])).
fof(f13951,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13950,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13950,plain,(
  ( ! [X99,X97,X98] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13063,f227])).
fof(f13063,plain,(
  ( ! [X99,X97,X98] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7024])).
fof(f7024,plain,(
  ( ! [X99,X97,X98] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97)))))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X97)))))),X98,X99)) ) | $spl0),
  inference(superposition,[],[f401,f1640])).
fof(f13949,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13948,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13948,plain,(
  ( ! [X94,X95,X96] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13062,f227])).
fof(f13062,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7023])).
fof(f7023,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X94)))))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X94)))))),X95,X96)) ) | $spl0),
  inference(superposition,[],[f400,f1640])).
fof(f13947,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13946,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13946,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91)))))),X93,X92)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13061,f227])).
fof(f13061,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91)))))),X93,X92)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7022])).
fof(f7022,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X91)))))) | ~p(s(bool,X92)) | p(s(bool,X93)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X91)))))),X93,X92)) ) | $spl0),
  inference(superposition,[],[f397,f1640])).
fof(f13945,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13944,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13944,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88)))))),X89,X90)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13060,f227])).
fof(f13060,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88)))))),X89,X90)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7021])).
fof(f7021,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X88)))))) | ~p(s(bool,X89)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X88)))))),X89,X90)) ) | $spl0),
  inference(superposition,[],[f396,f1640])).
fof(f13943,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13942,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13942,plain,(
  ( ! [X87,X85,X86] : (p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85)))))),X87,X86)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13059,f227])).
fof(f13059,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85)))))),X87,X86)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7020])).
fof(f7020,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X85)))))) | p(s(bool,X86)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X85)))))),X87,X86)) ) | $spl0),
  inference(superposition,[],[f395,f1640])).
fof(f13941,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13940,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13940,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13058,f227])).
fof(f13058,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7019])).
fof(f7019,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82)))))) | p(s(bool,X83)) | ~p(s(bool,X84)) | ~sP10(X84,X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X82)))))))) ) | $spl0),
  inference(superposition,[],[f390,f1640])).
fof(f13939,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13938,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13938,plain,(
  ( ! [X80,X81,X79] : (p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79)))))),X81,X80)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13057,f227])).
fof(f13057,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,'T_0')) | p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79)))))),X81,X80)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7018])).
fof(f7018,plain,(
  ( ! [X80,X81,X79] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X79)))))) | p(s(bool,X80)) | p(s(bool,X81)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X79)))))),X81,X80)) ) | $spl0),
  inference(superposition,[],[f380,f1640])).
fof(f13937,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13936,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13936,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76)))))),X77,X78)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13056,f227])).
fof(f13056,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76)))))),X77,X78)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7017])).
fof(f7017,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X76)))))) | ~p(s(bool,X77)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X76)))))),X77,X78)) ) | $spl0),
  inference(superposition,[],[f379,f1640])).
fof(f13935,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13934,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13934,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73)))))),X75,X74)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13055,f227])).
fof(f13055,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73)))))),X75,X74)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7016])).
fof(f7016,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X73)))))) | ~p(s(bool,X74)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X73)))))),X75,X74)) ) | $spl0),
  inference(superposition,[],[f378,f1640])).
fof(f13933,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13932,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13932,plain,(
  ( ! [X70,X72,X71] : (p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70)))))),X71,X72)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13054,f227])).
fof(f13054,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70)))))),X71,X72)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7015])).
fof(f7015,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X70)))))) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X70)))))),X71,X72)) ) | $spl0),
  inference(superposition,[],[f373,f1640])).
fof(f13931,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13930,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13930,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13053,f227])).
fof(f13053,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7014])).
fof(f7014,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67)))))) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP7(X69,X68,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X67)))))))) ) | $spl0),
  inference(superposition,[],[f365,f1640])).
fof(f13929,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13928,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13928,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64)))))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13052,f227])).
fof(f13052,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64)))))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7013])).
fof(f7013,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X64)))))) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP6(X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X64)))))),X66)) ) | $spl0),
  inference(superposition,[],[f356,f1640])).
fof(f13927,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13926,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13926,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61)))))),X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13051,f227])).
fof(f13051,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61)))))),X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7012])).
fof(f7012,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61)))))) | ~p(s(bool,X62)) | p(s(bool,X63)) | ~sP3(X62,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X61)))))),X63)) ) | $spl0),
  inference(superposition,[],[f337,f1640])).
fof(f13925,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13924,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13924,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58)))))),X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13050,f227])).
fof(f13050,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58)))))),X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7011])).
fof(f7011,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X58)))))) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP4(X59,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X58)))))),X60)) ) | $spl0),
  inference(superposition,[],[f333,f1640])).
fof(f13923,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13922,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13922,plain,(
  ( ! [X57,X56,X55] : (sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57,X56)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13049,f227])).
fof(f13049,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57,X56)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7010])).
fof(f7010,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X55)))))) | sP5(X56,X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55))))))) | ~sP4(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57) | ~sP3(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X56) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X55)))))),X57,X56)) ) | $spl0),
  inference(superposition,[],[f330,f1640])).
fof(f13921,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13920,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13920,plain,(
  ( ! [X54,X53] : (p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13048,f227])).
fof(f13048,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7009])).
fof(f7009,plain,(
  ( ! [X54,X53] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X53)))))) | p(s(bool,X54)) | sP1(X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X53)))))))) ) | $spl0),
  inference(superposition,[],[f304,f1640])).
fof(f13919,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13918,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13918,plain,(
  ( ! [X52,X51] : (p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51)))))),X52)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13047,f227])).
fof(f13047,plain,(
  ( ! [X52,X51] : (~p(s(bool,'T_0')) | p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51)))))),X52)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7008])).
fof(f7008,plain,(
  ( ! [X52,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X51)))))) | p(s(bool,X52)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X51)))))),X52)) ) | $spl0),
  inference(superposition,[],[f301,f1640])).
fof(f13917,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13916,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13916,plain,(
  ( ! [X35,X33,X34,X32] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13046,f227])).
fof(f13046,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6997])).
fof(f6997,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X32)))))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X32)))))))),X34,X35)) ) | $spl0),
  inference(superposition,[],[f1497,f1640])).
fof(f13915,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13914,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13914,plain,(
  ( ! [X30,X28,X31,X29] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13045,f227])).
fof(f13045,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6996])).
fof(f6996,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X28)))))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X29),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X28)))))))),X30,X31)) ) | $spl0),
  inference(superposition,[],[f1496,f1640])).
fof(f13913,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13912,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13912,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24)))))))),X27,X25)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13044,f227])).
fof(f13044,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24)))))))),X27,X25)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6995])).
fof(f6995,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24)))))) | p(s(bool,X25)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X26),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X24)))))))),X27,X25)) ) | $spl0),
  inference(superposition,[],[f1493,f1640])).
fof(f13911,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13910,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13910,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20)))))))),X22,X21)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13043,f227])).
fof(f13043,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20)))))))),X22,X21)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6994])).
fof(f6994,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X20)))))) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X20)))))))),X22,X21)) ) | $spl0),
  inference(superposition,[],[f1491,f1640])).
fof(f13909,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13908,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13908,plain,(
  ( ! [X19,X17,X18,X16] : (p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16)))))))),X17,X18)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13042,f227])).
fof(f13042,plain,(
  ( ! [X19,X17,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16)))))))),X17,X18)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6993])).
fof(f6993,plain,(
  ( ! [X19,X17,X18,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16)))))) | p(s(bool,X17)) | p(s(bool,X18)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X19),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X16)))))))),X17,X18)) ) | $spl0),
  inference(superposition,[],[f1488,f1640])).
fof(f13907,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13906,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13906,plain,(
  ( ! [X14,X12,X15,X13] : (sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14,X13)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13041,f227])).
fof(f13041,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14,X13)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6992])).
fof(f6992,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12)))))) | sP5(X13,X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12))))))))) | ~sP4(X13,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14) | ~sP3(X14,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X13) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X12)))))))),X14,X13)) ) | $spl0),
  inference(superposition,[],[f1483,f1640])).
fof(f13905,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13904,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13904,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13040,f227])).
fof(f13040,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6991])).
fof(f6991,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9)))))) | p(s(bool,X10)) | sP1(X10,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X9)))))))))) ) | $spl0),
  inference(superposition,[],[f1482,f1640])).
fof(f13903,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13902,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13902,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))))))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13039,f227])).
fof(f13039,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))))))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6990])).
fof(f6990,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))) | p(s(bool,X7)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))))))),X7)) ) | $spl0),
  inference(superposition,[],[f1481,f1640])).
fof(f13901,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13900,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13900,plain,(
  ( ! [X4,X5,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3)))))))),X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13038,f227])).
fof(f13038,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3)))))))),X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6989])).
fof(f6989,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3)))))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X3)))))))),X5)) ) | $spl0),
  inference(superposition,[],[f1480,f1640])).
fof(f13899,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13898,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13898,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13037,f227])).
fof(f13037,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0)))))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6988])).
fof(f6988,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) | sP0(X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X0)))))))))) ) | $spl0),
  inference(superposition,[],[f1479,f1640])).
fof(f13897,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13896,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13896,plain,(
  ( ! [X2,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))))),X2)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13035,f227])).
fof(f13035,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))))),X2)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6840])).
fof(f6840,plain,(
  ( ! [X2,X1] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))))),X2) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) ) | $spl0),
  inference(superposition,[],[f1651,f275])).
fof(f13895,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13894,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13894,plain,(
  ( ! [X2,X1] : (sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13034,f227])).
fof(f13034,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6807])).
fof(f6807,plain,(
  ( ! [X2,X1] : (sP0(X2,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X1))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) ) | $spl0),
  inference(superposition,[],[f1650,f275])).
fof(f13893,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13892,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13892,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13031,f227])).
fof(f13031,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9021])).
fof(f9021,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))))) ) | $spl0),
  inference(superposition,[],[f4411,f3586])).
fof(f13891,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13890,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13890,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13030,f227])).
fof(f13030,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9082])).
fof(f9082,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))))) ) | $spl0),
  inference(superposition,[],[f4451,f3586])).
fof(f13889,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13888,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13888,plain,(
  ( ! [X6,X7] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13029,f227])).
fof(f13029,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9157])).
fof(f9157,plain,(
  ( ! [X6,X7] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))))) ) | $spl0),
  inference(superposition,[],[f4560,f3586])).
fof(f13887,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884,f13886])).
fof(f13885,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882,f13884])).
fof(f13883,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880,f13882])).
fof(f13881,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878,f13880])).
fof(f13879,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876,f13878])).
fof(f13877,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874,f13876])).
fof(f13875,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872,f13874])).
fof(f13873,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870,f13872])).
fof(f13871,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868,f13870])).
fof(f13869,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866,f13868])).
fof(f13867,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864,f13866])).
fof(f13865,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862,f13864])).
fof(f13863,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860,f13862])).
fof(f13861,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858,f13860])).
fof(f13859,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856,f13858])).
fof(f13857,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854,f13856])).
fof(f13855,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852,f13854])).
fof(f13853,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850,f13852])).
fof(f13851,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848,f13850])).
fof(f13849,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846,f13848])).
fof(f13847,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844,f13846])).
fof(f13845,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842,f13844])).
fof(f13843,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840,f13842])).
fof(f13841,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838,f13840])).
fof(f13839,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836,f13838])).
fof(f13837,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834,f13836])).
fof(f13835,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832,f13834])).
fof(f13833,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830,f13832])).
fof(f13831,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828,f13830])).
fof(f13829,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826,f13828])).
fof(f13827,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824,f13826])).
fof(f13825,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822,f13824])).
fof(f13823,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820,f13822])).
fof(f13821,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818,f13820])).
fof(f13819,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816,f13818])).
fof(f13817,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814,f13816])).
fof(f13815,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812,f13814])).
fof(f13813,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810,f13812])).
fof(f13811,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696,f13810])).
fof(f13809,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13808,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13808,plain,(
  ( ! [X26,X24,X25] : (~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12981,f227])).
fof(f12981,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | ~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8373])).
fof(f8373,plain,(
  ( ! [X26,X24,X25] : (~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24)))))))) | p(s(bool,X25)) | ~p(s(bool,X26))) ) | $spl0),
  inference(forward_demodulation,[],[f8354,f275])).
fof(f8354,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24)))))))) | p(s(bool,X25)) | ~p(s(bool,X26)) | ~sP10(X26,X25,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X24)))))))))) ) | $spl0),
  inference(superposition,[],[f1663,f1391])).
fof(f1663,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X46)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46)))))) ) | $spl0),
  inference(superposition,[],[f390,f1458])).
fof(f13807,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13806,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13806,plain,(
  ( ! [X23,X21,X22] : (~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12980,f227])).
fof(f12980,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | ~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8372])).
fof(f8372,plain,(
  ( ! [X23,X21,X22] : (~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | $spl0),
  inference(forward_demodulation,[],[f8353,f275])).
fof(f8353,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X21))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) | p(s(bool,X22)) | ~p(s(bool,X23)) | ~sP10(X23,X22,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X21),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))))))) ) | $spl0),
  inference(superposition,[],[f1663,f1397])).
fof(f13805,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13804,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13804,plain,(
  ( ! [X167,X165,X166,X164,X168] : (p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13803,f227])).
fof(f13803,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'T_0')) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13802,f12509])).
fof(f13802,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164))),s('type.integer.int',sK12)))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12974,f227])).
fof(f12974,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164))),s('type.integer.int',sK12)))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7149])).
fof(f7149,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X165),s('type.integer.int',X166)))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1495,f1706])).
fof(f13801,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13800,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13800,plain,(
  ( ! [X163,X161,X159,X162,X160] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13799,f227])).
fof(f13799,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13798,f12509])).
fof(f13798,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159))),s('type.integer.int',sK12)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12973,f227])).
fof(f12973,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159))),s('type.integer.int',sK12)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7148])).
fof(f7148,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X160),s('type.integer.int',X161)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X163)) ) | $spl0),
  inference(superposition,[],[f1494,f1706])).
fof(f13797,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13796,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13796,plain,(
  ( ! [X158,X156,X154,X157,X155] : (p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13795,f227])).
fof(f13795,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'T_0')) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13794,f12509])).
fof(f13794,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154))),s('type.integer.int',sK12)))) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12972,f227])).
fof(f12972,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154))),s('type.integer.int',sK12)))) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7147])).
fof(f7147,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154))),s('type.integer.int',sK12)))) | p(s(bool,X155)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X156),s('type.integer.int',X157)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | $spl0),
  inference(superposition,[],[f1492,f1706])).
fof(f13793,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13792,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13792,plain,(
  ( ! [X152,X151,X149,X153,X150] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13791,f227])).
fof(f13791,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13790,f12509])).
fof(f13790,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149))),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12971,f227])).
fof(f12971,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149))),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7146])).
fof(f7146,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X150),s('type.integer.int',X151)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X153)) ) | $spl0),
  inference(superposition,[],[f1490,f1706])).
fof(f13789,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13788,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13788,plain,(
  ( ! [X146,X144,X147,X145,X148] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13787,f227])).
fof(f13787,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13786,f12509])).
fof(f13786,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12970,f227])).
fof(f12970,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7145])).
fof(f7145,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X145),s('type.integer.int',X146)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1489,f1706])).
fof(f13785,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13784,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13784,plain,(
  ( ! [X142,X140,X143,X141,X139] : (p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13783,f227])).
fof(f13783,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13782,f12509])).
fof(f13782,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',sK12)))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12969,f227])).
fof(f12969,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',sK12)))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7144])).
fof(f7144,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X140),s('type.integer.int',X141)))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | $spl0),
  inference(superposition,[],[f1487,f1706])).
fof(f13781,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13780,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13780,plain,(
  ( ! [X134,X138,X136,X135,X137] : (p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13779,f227])).
fof(f13779,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13778,f12509])).
fof(f13778,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',sK12)))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12968,f227])).
fof(f12968,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',sK12)))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7143])).
fof(f7143,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X135),s('type.integer.int',X136)))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | $spl0),
  inference(superposition,[],[f1486,f1706])).
fof(f13777,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13776,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13776,plain,(
  ( ! [X132,X130,X133,X131,X129] : (p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13775,f227])).
fof(f13775,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13774,f12509])).
fof(f13774,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',sK12)))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12967,f227])).
fof(f12967,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',sK12)))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7142])).
fof(f7142,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X130),s('type.integer.int',X131)))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | $spl0),
  inference(superposition,[],[f1485,f1706])).
fof(f13773,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13772,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13772,plain,(
  ( ! [X127,X125,X128,X126,X124] : (p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13771,f227])).
fof(f13771,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13770,f12509])).
fof(f13770,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',sK12)))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12966,f227])).
fof(f12966,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',sK12)))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7141])).
fof(f7141,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124))),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X125),s('type.integer.int',X126)))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | $spl0),
  inference(superposition,[],[f1484,f1706])).
fof(f13769,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13768,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13768,plain,(
  ( ! [X167,X165,X166,X164,X168] : (p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13767,f227])).
fof(f13767,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'T_0')) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13766,f12509])).
fof(f13766,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164)))))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12965,f227])).
fof(f12965,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164)))))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7045])).
fof(f7045,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X164)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X165),s('type.integer.int',X166)))) | p(s(bool,X167)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X165))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X168),s('type.integer.int',X166)))),X167,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X164)))))))) ) | $spl0),
  inference(superposition,[],[f1495,f1640])).
fof(f13765,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13764,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13764,plain,(
  ( ! [X163,X161,X159,X162,X160] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159)))))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13763,f227])).
fof(f13763,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159)))))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13762,f12509])).
fof(f13762,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159)))))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159)))))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12964,f227])).
fof(f12964,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159)))))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159)))))),X163)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7044])).
fof(f7044,plain,(
  ( ! [X163,X161,X159,X162,X160] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X159)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X160),s('type.integer.int',X161)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X160))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X162),s('type.integer.int',X161)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X159)))))),X163)) ) | $spl0),
  inference(superposition,[],[f1494,f1640])).
fof(f13761,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13760,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13760,plain,(
  ( ! [X158,X156,X154,X157,X155] : (p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154)))))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13759,f227])).
fof(f13759,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'T_0')) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154)))))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13758,f12509])).
fof(f13758,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154)))))) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154)))))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12963,f227])).
fof(f12963,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154)))))) | p(s(bool,X155)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154)))))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7043])).
fof(f7043,plain,(
  ( ! [X158,X156,X154,X157,X155] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X154)))))) | p(s(bool,X155)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X156),s('type.integer.int',X157)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X154)))))),X155,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X156))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X158),s('type.integer.int',X157)))))) ) | $spl0),
  inference(superposition,[],[f1492,f1640])).
fof(f13757,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13756,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13756,plain,(
  ( ! [X152,X151,X149,X153,X150] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149)))))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13755,f227])).
fof(f13755,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149)))))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13754,f12509])).
fof(f13754,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149)))))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12962,f227])).
fof(f12962,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149)))))),X153)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7042])).
fof(f7042,plain,(
  ( ! [X152,X151,X149,X153,X150] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X149)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X150),s('type.integer.int',X151)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X150))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X152),s('type.integer.int',X151)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X149)))))),X153)) ) | $spl0),
  inference(superposition,[],[f1490,f1640])).
fof(f13753,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13752,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13752,plain,(
  ( ! [X146,X144,X147,X145,X148] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13751,f227])).
fof(f13751,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13750,f12509])).
fof(f13750,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12961,f227])).
fof(f12961,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144)))))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7041])).
fof(f7041,plain,(
  ( ! [X146,X144,X147,X145,X148] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X144)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X145),s('type.integer.int',X146)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X147),s('type.integer.int',X146)))),X148,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X144)))))))) ) | $spl0),
  inference(superposition,[],[f1489,f1640])).
fof(f13749,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13748,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13748,plain,(
  ( ! [X142,X140,X143,X141,X139] : (p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13747,f227])).
fof(f13747,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13746,f12509])).
fof(f13746,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139)))))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12960,f227])).
fof(f12960,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139)))))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7040])).
fof(f7040,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X139)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X140),s('type.integer.int',X141)))) | p(s(bool,X142)) | ~sP7(X142,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X139)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X140))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X143),s('type.integer.int',X141)))))) ) | $spl0),
  inference(superposition,[],[f1487,f1640])).
fof(f13745,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13744,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13744,plain,(
  ( ! [X134,X138,X136,X135,X137] : (p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13743,f227])).
fof(f13743,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13742,f12509])).
fof(f13742,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134)))))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12959,f227])).
fof(f12959,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134)))))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7039])).
fof(f7039,plain,(
  ( ! [X134,X138,X136,X135,X137] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X134)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X135),s('type.integer.int',X136)))) | p(s(bool,X137)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X134)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X136)))),X137)) ) | $spl0),
  inference(superposition,[],[f1486,f1640])).
fof(f13741,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13740,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13740,plain,(
  ( ! [X132,X130,X133,X131,X129] : (p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13739,f227])).
fof(f13739,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13738,f12509])).
fof(f13738,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129)))))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12958,f227])).
fof(f12958,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129)))))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7038])).
fof(f7038,plain,(
  ( ! [X132,X130,X133,X131,X129] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X129)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X130),s('type.integer.int',X131)))) | p(s(bool,X132)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X129)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X130))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X133),s('type.integer.int',X131)))),X132)) ) | $spl0),
  inference(superposition,[],[f1485,f1640])).
fof(f13737,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13736,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13736,plain,(
  ( ! [X127,X125,X128,X126,X124] : (p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13735,f227])).
fof(f13735,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13734,f12509])).
fof(f13734,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124)))))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12957,f227])).
fof(f12957,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124)))))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f7037])).
fof(f7037,plain,(
  ( ! [X127,X125,X128,X126,X124] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X124)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X125),s('type.integer.int',X126)))) | p(s(bool,X127)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X124)))))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X125))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X128),s('type.integer.int',X126)))),X127)) ) | $spl0),
  inference(superposition,[],[f1484,f1640])).
fof(f13733,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13732,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13732,plain,(
  ( ! [X107,X105,X108,X106] : (p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X106)))),X107,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12956,f227])).
fof(f12956,plain,(
  ( ! [X107,X105,X108,X106] : (~p(s(bool,'T_0')) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X106)))),X107,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6297])).
fof(f6297,plain,(
  ( ! [X107,X105,X108,X106] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X105),s('type.integer.int',X106)))) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X106)))),X107,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6235,f227])).
fof(f6235,plain,(
  ( ! [X107,X105,X108,X106] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X105),s('type.integer.int',X106)))) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X105))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X106)))),X107,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1495,f6170])).
fof(f6170,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(backward_demodulation,[],[f6107,f1639])).
fof(f1639,plain,(
  s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl0),
  inference(superposition,[],[f1458,f409])).
fof(f13731,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13730,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13730,plain,(
  ( ! [X103,X101,X102,X104] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X101))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X102)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X104)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12955,f227])).
fof(f12955,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X101))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X102)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X104)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6296])).
fof(f6296,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X101),s('type.integer.int',X102)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X101))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X102)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X104)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6234,f227])).
fof(f6234,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X101),s('type.integer.int',X102)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X101))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X102)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X104)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1494,f6170])).
fof(f13729,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13728,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13728,plain,(
  ( ! [X99,X97,X100,X98] : (p(s(bool,X97)) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X97,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X99)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12954,f227])).
fof(f12954,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X97)) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X97,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X99)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6295])).
fof(f6295,plain,(
  ( ! [X99,X97,X100,X98] : (p(s(bool,X97)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X98),s('type.integer.int',X99)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X97,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X99)))))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6233,f227])).
fof(f6233,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'T_0')) | p(s(bool,X97)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X98),s('type.integer.int',X99)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X97,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X98))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X100),s('type.integer.int',X99)))))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1492,f6170])).
fof(f13727,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13726,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13726,plain,(
  ( ! [X94,X95,X93,X96] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12953,f227])).
fof(f12953,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X96)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6294])).
fof(f6294,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X96)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6232,f227])).
fof(f6232,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X93),s('type.integer.int',X94)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X95),s('type.integer.int',X94)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X96)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1490,f6170])).
fof(f13725,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13724,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13724,plain,(
  ( ! [X92,X90,X91,X89] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))),X92,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12952,f227])).
fof(f12952,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))),X92,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6293])).
fof(f6293,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X89),s('type.integer.int',X90)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))),X92,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6231,f227])).
fof(f6231,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X89),s('type.integer.int',X90)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X91),s('type.integer.int',X90)))),X92,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1489,f6170])).
fof(f13723,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13722,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13722,plain,(
  ( ! [X88,X87,X85,X86] : (p(s(bool,X87)) | ~sP7(X87,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X86)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12951,f227])).
fof(f12951,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'T_0')) | p(s(bool,X87)) | ~sP7(X87,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X86)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6292])).
fof(f6292,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X85),s('type.integer.int',X86)))) | p(s(bool,X87)) | ~sP7(X87,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X86)))))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6230,f227])).
fof(f6230,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X85),s('type.integer.int',X86)))) | p(s(bool,X87)) | ~sP7(X87,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X85))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X86)))))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1487,f6170])).
fof(f13721,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13720,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13720,plain,(
  ( ! [X83,X81,X84,X82] : (p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12950,f227])).
fof(f12950,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6291])).
fof(f6291,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6229,f227])).
fof(f6229,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1486,f6170])).
fof(f13719,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13718,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13718,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12949,f227])).
fof(f12949,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6290])).
fof(f6290,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6228,f227])).
fof(f6228,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1485,f6170])).
fof(f13717,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13716,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13716,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,X75)) | ~sP4('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X74)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12948,f227])).
fof(f12948,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~sP4('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X74)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f6289])).
fof(f6289,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X73),s('type.integer.int',X74)))) | p(s(bool,X75)) | ~sP4('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X74)))),X75)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6227,f227])).
fof(f6227,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X73),s('type.integer.int',X74)))) | p(s(bool,X75)) | ~sP4('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X73))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X76),s('type.integer.int',X74)))),X75)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1484,f6170])).
fof(f13715,plain,(
  $false | ($spl82 | $spl86 | $spl182)),
  inference(global_subsumption,[],[f13714,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13714,plain,(
  ( ! [X109,X107,X110,X108] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X107))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X108)))),X109,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X109))) ) | ($spl82 | $spl86 | $spl182)),
  inference(subsumption_resolution,[],[f12947,f227])).
fof(f12947,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'T_0')) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X107))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X108)))),X109,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X109))) ) | ($spl82 | $spl86 | $spl182)),
  inference(backward_demodulation,[],[f12509,f6165])).
fof(f13713,plain,(
  $false | ($spl82 | $spl86 | $spl180)),
  inference(global_subsumption,[],[f13712,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13712,plain,(
  ( ! [X103,X105,X106,X104] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X104)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X106)) ) | ($spl82 | $spl86 | $spl180)),
  inference(subsumption_resolution,[],[f12946,f227])).
fof(f12946,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X104)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X106)) ) | ($spl82 | $spl86 | $spl180)),
  inference(backward_demodulation,[],[f12509,f6164])).
fof(f13711,plain,(
  $false | ($spl82 | $spl86 | $spl178)),
  inference(global_subsumption,[],[f13710,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13710,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,X99)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X99,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X101)))))) ) | ($spl82 | $spl86 | $spl178)),
  inference(subsumption_resolution,[],[f12945,f227])).
fof(f12945,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X99,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X101)))))) ) | ($spl82 | $spl86 | $spl178)),
  inference(backward_demodulation,[],[f12509,f6163])).
fof(f13709,plain,(
  $false | ($spl82 | $spl86 | $spl176)),
  inference(global_subsumption,[],[f13708,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13708,plain,(
  ( ! [X97,X95,X98,X96] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X96)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98)) ) | ($spl82 | $spl86 | $spl176)),
  inference(subsumption_resolution,[],[f12944,f227])).
fof(f12944,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X96)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98)) ) | ($spl82 | $spl86 | $spl176)),
  inference(backward_demodulation,[],[f12509,f6162])).
fof(f13707,plain,(
  $false | ($spl82 | $spl86 | $spl174)),
  inference(global_subsumption,[],[f13706,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13706,plain,(
  ( ! [X94,X92,X93,X91] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X91))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X92)))),X94,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl82 | $spl86 | $spl174)),
  inference(subsumption_resolution,[],[f12943,f227])).
fof(f12943,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X91))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X92)))),X94,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl82 | $spl86 | $spl174)),
  inference(backward_demodulation,[],[f12509,f6161])).
fof(f13705,plain,(
  $false | ($spl82 | $spl86 | $spl172)),
  inference(global_subsumption,[],[f13704,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13704,plain,(
  ( ! [X90,X88,X87,X89] : (~sP7(X89,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X88))))) | p(s(bool,X89))) ) | ($spl82 | $spl86 | $spl172)),
  inference(subsumption_resolution,[],[f12942,f227])).
fof(f12942,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~sP7(X89,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X88))))) | p(s(bool,X89))) ) | ($spl82 | $spl86 | $spl172)),
  inference(backward_demodulation,[],[f12509,f6160])).
fof(f13703,plain,(
  $false | ($spl82 | $spl86 | $spl170)),
  inference(global_subsumption,[],[f13702,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13702,plain,(
  ( ! [X85,X83,X86,X84] : (~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X84)))),X85) | p(s(bool,X85))) ) | ($spl82 | $spl86 | $spl170)),
  inference(subsumption_resolution,[],[f12941,f227])).
fof(f12941,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X84)))),X85) | p(s(bool,X85))) ) | ($spl82 | $spl86 | $spl170)),
  inference(backward_demodulation,[],[f12509,f6159])).
fof(f13701,plain,(
  $false | ($spl82 | $spl86 | $spl168)),
  inference(global_subsumption,[],[f13700,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13700,plain,(
  ( ! [X80,X81,X79,X82] : (~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X80)))),X81) | p(s(bool,X81))) ) | ($spl82 | $spl86 | $spl168)),
  inference(subsumption_resolution,[],[f12940,f227])).
fof(f12940,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X80)))),X81) | p(s(bool,X81))) ) | ($spl82 | $spl86 | $spl168)),
  inference(backward_demodulation,[],[f12509,f6158])).
fof(f13699,plain,(
  $false | ($spl82 | $spl86 | $spl166)),
  inference(global_subsumption,[],[f13698,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13698,plain,(
  ( ! [X78,X76,X77,X75] : (~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X76)))),X77) | p(s(bool,X77))) ) | ($spl82 | $spl86 | $spl166)),
  inference(subsumption_resolution,[],[f12939,f227])).
fof(f12939,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X76)))),X77) | p(s(bool,X77))) ) | ($spl82 | $spl86 | $spl166)),
  inference(backward_demodulation,[],[f12509,f6157])).
fof(f13697,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694,f13696])).
fof(f13695,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692,f13694])).
fof(f13693,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690,f13692])).
fof(f13691,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688,f13690])).
fof(f13689,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682,f13688])).
fof(f13687,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13686,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682])).
fof(f13686,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X48)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48,f(s(bool,'T_0')))) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12930,f227])).
fof(f12930,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48,f(s(bool,'T_0')))) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5656])).
fof(f5656,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48,f(s(bool,'T_0')))) ) | $spl69),
  inference(subsumption_resolution,[],[f5640,f227])).
fof(f5640,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f1495,f4786])).
fof(f4786,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f4773,f736])).
fof(f13685,plain,(
  $false | ($spl80 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13684,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682])).
fof(f13684,plain,(
  ( ! [X4,X2,X3,X1] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0') | p(s(bool,X3))) ) | ($spl80 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12929,f227])).
fof(f12929,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0') | p(s(bool,X3))) ) | ($spl80 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5653])).
fof(f13683,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674,f13682])).
fof(f13679,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13678,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674])).
fof(f13678,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,X83)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13677,f227])).
fof(f13677,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13676,f12509])).
fof(f13676,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12926,f227])).
fof(f12926,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5646])).
fof(f5646,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,X83)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1495,f1468])).
fof(f13675,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670,f13674])).
fof(f13671,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668,f13670])).
fof(f13669,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662,f13668])).
fof(f13667,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13666,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662])).
fof(f13666,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X46)) | ~sP10(f(s(bool,'T_0')),X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X48)))))) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12922,f227])).
fof(f12922,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X46)) | ~sP10(f(s(bool,'T_0')),X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X48)))))) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5602])).
fof(f5602,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X46)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X47),s('type.integer.int',X48)))) | ~sP10(f(s(bool,'T_0')),X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X48)))))) ) | $spl69),
  inference(subsumption_resolution,[],[f5586,f227])).
fof(f5586,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X46)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X47),s('type.integer.int',X48)))) | ~sP10(f(s(bool,'T_0')),X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X48)))))) ) | $spl69),
  inference(superposition,[],[f1492,f4786])).
fof(f13665,plain,(
  $false | ($spl78 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13664,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662])).
fof(f13664,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) ) | ($spl78 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12921,f227])).
fof(f12921,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) ) | ($spl78 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5599])).
fof(f13663,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654,f13662])).
fof(f13659,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13658,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654])).
fof(f13658,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,X81)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13657,f227])).
fof(f13657,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X81)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13656,f12509])).
fof(f13656,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X81)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12918,f227])).
fof(f12918,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X81)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5592])).
fof(f5592,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X81)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X82),s('type.integer.int',X83)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X81,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X83)))))) ) | $spl0),
  inference(superposition,[],[f1492,f1468])).
fof(f13655,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650,f13654])).
fof(f13651,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648,f13650])).
fof(f13649,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646,f13648])).
fof(f13647,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644,f13646])).
fof(f13645,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638,f13644])).
fof(f13643,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13642,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638])).
fof(f13642,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X48)) | ~sP7(X48,f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))))) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12910,f227])).
fof(f12910,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | ~sP7(X48,f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))))) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5393])).
fof(f5393,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP7(X48,f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))))) ) | $spl69),
  inference(subsumption_resolution,[],[f5377,f227])).
fof(f5377,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP7(X48,f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))))) ) | $spl69),
  inference(superposition,[],[f1487,f4786])).
fof(f13641,plain,(
  $false | ($spl76 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13640,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638])).
fof(f13640,plain,(
  ( ! [X4,X2,X3,X1] : (~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | p(s(bool,X3))) ) | ($spl76 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12909,f227])).
fof(f12909,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | ~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | p(s(bool,X3))) ) | ($spl76 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5390])).
fof(f13639,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630,f13638])).
fof(f13635,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13634,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630])).
fof(f13634,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,X83)) | ~sP7(X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13633,f227])).
fof(f13633,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~sP7(X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13632,f12509])).
fof(f13632,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP7(X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12906,f227])).
fof(f12906,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP7(X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5383])).
fof(f5383,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,X83)) | ~sP7(X83,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))))) ) | $spl0),
  inference(superposition,[],[f1487,f1468])).
fof(f13631,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626,f13630])).
fof(f13627,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624,f13626])).
fof(f13625,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618,f13624])).
fof(f13623,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13622,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618])).
fof(f13622,plain,(
  ( ! [X47,X48,X46,X49] : (p(s(bool,X48)) | ~sP6(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12902,f227])).
fof(f12902,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | ~sP6(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5342])).
fof(f5342,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP6(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | $spl69),
  inference(subsumption_resolution,[],[f5326,f227])).
fof(f5326,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X46),s('type.integer.int',X47)))) | p(s(bool,X48)) | ~sP6(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X49),s('type.integer.int',X47)))),X48)) ) | $spl69),
  inference(superposition,[],[f1486,f4786])).
fof(f13621,plain,(
  $false | ($spl74 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13620,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618])).
fof(f13620,plain,(
  ( ! [X4,X2,X3,X1] : (~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl74 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12901,f227])).
fof(f12901,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl74 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5339])).
fof(f13619,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610,f13618])).
fof(f13615,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13614,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610])).
fof(f13614,plain,(
  ( ! [X80,X83,X81,X84,X82] : (p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13613,f227])).
fof(f13613,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13612,f12509])).
fof(f13612,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12898,f227])).
fof(f12898,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5332])).
fof(f5332,plain,(
  ( ! [X80,X83,X81,X84,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X80),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X81),s('type.integer.int',X82)))) | p(s(bool,X83)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X80))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X81))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X84),s('type.integer.int',X82)))),X83)) ) | $spl0),
  inference(superposition,[],[f1486,f1468])).
fof(f13611,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596,f13610])).
fof(f13607,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13606,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13606,plain,(
  ( ! [X66,X64,X65,X63] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),f(s(bool,'T_0')),X66)) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12896,f227])).
fof(f12896,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),f(s(bool,'T_0')),X66)) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5307])).
fof(f5307,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),f(s(bool,'T_0')),X66)) ) | $spl69),
  inference(subsumption_resolution,[],[f5255,f227])).
fof(f5255,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),f(s(bool,'T_0')),X66)) ) | $spl69),
  inference(superposition,[],[f1494,f4786])).
fof(f13605,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13604,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13604,plain,(
  ( ! [X61,X59,X62,X60] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X60)))),f(s(bool,'T_0')),X62)) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12895,f227])).
fof(f12895,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X60)))),f(s(bool,'T_0')),X62)) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5306])).
fof(f5306,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X59),s('type.integer.int',X60)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X60)))),f(s(bool,'T_0')),X62)) ) | $spl69),
  inference(subsumption_resolution,[],[f5254,f227])).
fof(f5254,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X59),s('type.integer.int',X60)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X61),s('type.integer.int',X60)))),f(s(bool,'T_0')),X62)) ) | $spl69),
  inference(superposition,[],[f1490,f4786])).
fof(f13603,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13602,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13602,plain,(
  ( ! [X57,X58,X56,X55] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X56)))),X58,f(s(bool,'T_0')))) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12894,f227])).
fof(f12894,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X56)))),X58,f(s(bool,'T_0')))) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5305])).
fof(f5305,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X56)))),X58,f(s(bool,'T_0')))) ) | $spl69),
  inference(subsumption_resolution,[],[f5253,f227])).
fof(f5253,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X57),s('type.integer.int',X56)))),X58,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f1489,f4786])).
fof(f13601,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13600,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13600,plain,(
  ( ! [X54,X52,X53,X51] : (p(s(bool,X53)) | ~sP3(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12893,f227])).
fof(f12893,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X53)) | ~sP3(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5304])).
fof(f5304,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP3(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | $spl69),
  inference(subsumption_resolution,[],[f5252,f227])).
fof(f5252,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP3(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | $spl69),
  inference(superposition,[],[f1485,f4786])).
fof(f13599,plain,(
  $false | ($spl69 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13598,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13598,plain,(
  ( ! [X47,X50,X48,X49] : (p(s(bool,X49)) | ~sP4(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X48)))),X49)) ) | ($spl69 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12892,f227])).
fof(f12892,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | p(s(bool,X49)) | ~sP4(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X48)))),X49)) ) | ($spl69 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5303])).
fof(f5303,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X47),s('type.integer.int',X48)))) | p(s(bool,X49)) | ~sP4(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X48)))),X49)) ) | $spl69),
  inference(subsumption_resolution,[],[f5251,f227])).
fof(f5251,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X47),s('type.integer.int',X48)))) | p(s(bool,X49)) | ~sP4(f(s(bool,'T_0')),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X47))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X50),s('type.integer.int',X48)))),X49)) ) | $spl69),
  inference(superposition,[],[f1484,f4786])).
fof(f13597,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594,f13596])).
fof(f13595,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590,f13594])).
fof(f13593,plain,(
  $false | ($spl72 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13592,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590])).
fof(f13592,plain,(
  ( ! [X4,X2,X3,X1] : (~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl72 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12889,f227])).
fof(f12889,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl72 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5194])).
fof(f13591,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582,f13590])).
fof(f13587,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13586,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582])).
fof(f13586,plain,(
  ( ! [X80,X78,X76,X79,X77] : (p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13585,f227])).
fof(f13585,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13584,f12509])).
fof(f13584,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12886,f227])).
fof(f12886,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5187])).
fof(f5187,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | p(s(bool,X79)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | $spl0),
  inference(superposition,[],[f1485,f1468])).
fof(f13583,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578,f13582])).
fof(f13579,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576,f13578])).
fof(f13577,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572,f13576])).
fof(f13575,plain,(
  $false | ($spl70 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13574,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572])).
fof(f13574,plain,(
  ( ! [X4,X2,X3,X1] : (~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl70 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12882,f227])).
fof(f12882,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | ($spl70 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5143])).
fof(f13573,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564,f13572])).
fof(f13569,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13568,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564])).
fof(f13568,plain,(
  ( ! [X80,X78,X76,X79,X77] : (p(s(bool,X79)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13567,f227])).
fof(f13567,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,X79)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13566,f12509])).
fof(f13566,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | p(s(bool,X79)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12879,f227])).
fof(f12879,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | p(s(bool,X79)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5136])).
fof(f5136,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X76),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X77),s('type.integer.int',X78)))) | p(s(bool,X79)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X77))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X80),s('type.integer.int',X78)))),X79)) ) | $spl0),
  inference(superposition,[],[f1484,f1468])).
fof(f13565,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560,f13564])).
fof(f13561,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556,f13560])).
fof(f13557,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552,f13556])).
fof(f13553,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548,f13552])).
fof(f13549,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546,f13548])).
fof(f13547,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538,f13546])).
fof(f13545,plain,(
  $false | ($spl64 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13544,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538])).
fof(f13544,plain,(
  ( ! [X4,X2,X3,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | ($spl64 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12872,f227])).
fof(f12872,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | ($spl64 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4556])).
fof(f13543,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13542,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538])).
fof(f13542,plain,(
  ( ! [X66,X64,X62,X65,X63] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13541,f227])).
fof(f13541,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13540,f12509])).
fof(f13540,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12870,f227])).
fof(f12870,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4550])).
fof(f4550,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | $spl0),
  inference(superposition,[],[f1494,f1468])).
fof(f13539,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534,f13538])).
fof(f13535,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532,f13534])).
fof(f13533,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530,f13532])).
fof(f13531,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522,f13530])).
fof(f13529,plain,(
  $false | ($spl62 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13528,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522])).
fof(f13528,plain,(
  ( ! [X4,X2,X3,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | ($spl62 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12864,f227])).
fof(f12864,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | ($spl62 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4447])).
fof(f13527,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13526,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522])).
fof(f13526,plain,(
  ( ! [X66,X64,X62,X65,X63] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13525,f227])).
fof(f13525,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13524,f12509])).
fof(f13524,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12862,f227])).
fof(f12862,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4441])).
fof(f4441,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X66)) ) | $spl0),
  inference(superposition,[],[f1490,f1468])).
fof(f13523,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518,f13522])).
fof(f13519,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516,f13518])).
fof(f13517,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508,f13516])).
fof(f13515,plain,(
  $false | ($spl60 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13514,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508])).
fof(f13514,plain,(
  ( ! [X4,X2,X3,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) ) | ($spl60 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12858,f227])).
fof(f12858,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) ) | ($spl60 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4407])).
fof(f13513,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13512,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508])).
fof(f13512,plain,(
  ( ! [X66,X64,X62,X65,X63] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13511,f227])).
fof(f13511,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13510,f12509])).
fof(f13510,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12856,f227])).
fof(f12856,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4401])).
fof(f4401,plain,(
  ( ! [X66,X64,X62,X65,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X62),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X63),s('type.integer.int',X64)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X63))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X65),s('type.integer.int',X64)))),X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X62))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1489,f1468])).
fof(f13509,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504,f13508])).
fof(f13505,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502,f13504])).
fof(f13503,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500,f13502])).
fof(f13501,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498,f13500])).
fof(f13499,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496,f13498])).
fof(f13497,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494,f13496])).
fof(f13495,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492,f13494])).
fof(f13493,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490,f13492])).
fof(f13491,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488,f13490])).
fof(f13489,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486,f13488])).
fof(f13487,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484,f13486])).
fof(f13485,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482,f13484])).
fof(f13483,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480,f13482])).
fof(f13481,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478,f13480])).
fof(f13479,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476,f13478])).
fof(f13477,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474,f13476])).
fof(f13475,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472,f13474])).
fof(f13473,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470,f13472])).
fof(f13471,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468,f13470])).
fof(f13469,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466,f13468])).
fof(f13467,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464,f13466])).
fof(f13465,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462,f13464])).
fof(f13463,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460,f13462])).
fof(f13461,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458,f13460])).
fof(f13459,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456,f13458])).
fof(f13457,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454,f13456])).
fof(f13455,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452,f13454])).
fof(f13453,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450,f13452])).
fof(f13451,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448,f13450])).
fof(f13449,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446,f13448])).
fof(f13447,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440,f13446])).
fof(f13441,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438,f13440])).
fof(f13439,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436,f13438])).
fof(f13437,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434,f13436])).
fof(f13435,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432,f13434])).
fof(f13433,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430,f13432])).
fof(f13431,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428,f13430])).
fof(f13429,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424,f13428])).
fof(f13425,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420,f13424])).
fof(f13421,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418,f13420])).
fof(f13419,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416,f13418])).
fof(f13417,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412,f13416])).
fof(f13413,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408,f13412])).
fof(f13409,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404,f13408])).
fof(f13405,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400,f13404])).
fof(f13401,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396,f13400])).
fof(f13397,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392,f13396])).
fof(f13393,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388,f13392])).
fof(f13389,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386,f13388])).
fof(f13387,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384,f13386])).
fof(f13385,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382,f13384])).
fof(f13383,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380,f13382])).
fof(f13381,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378,f13380])).
fof(f13379,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376,f13378])).
fof(f13377,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374,f13376])).
fof(f13375,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372,f13374])).
fof(f13373,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370,f13372])).
fof(f13371,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368,f13370])).
fof(f13369,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366,f13368])).
fof(f13367,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364,f13366])).
fof(f13365,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362,f13364])).
fof(f13363,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360,f13362])).
fof(f13361,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358,f13360])).
fof(f13359,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356,f13358])).
fof(f13357,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354,f13356])).
fof(f13355,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352,f13354])).
fof(f13353,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350,f13352])).
fof(f13351,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348,f13350])).
fof(f13349,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346,f13348])).
fof(f13347,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344,f13346])).
fof(f13345,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342,f13344])).
fof(f13343,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340,f13342])).
fof(f13341,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338,f13340])).
fof(f13339,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336,f13338])).
fof(f13337,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334,f13336])).
fof(f13335,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332,f13334])).
fof(f13333,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330,f13332])).
fof(f13331,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328,f13330])).
fof(f13329,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197,f13328])).
fof(f13327,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13326,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13326,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12757,f227])).
fof(f12757,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9000])).
fof(f9000,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),X7,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',X6))))) ) | $spl0),
  inference(superposition,[],[f4411,f3586])).
fof(f13325,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13324,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13324,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12756,f227])).
fof(f12756,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9061])).
fof(f9061,plain,(
  ( ! [X6,X7] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',X6))))) ) | $spl0),
  inference(superposition,[],[f4451,f3586])).
fof(f13323,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13322,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13322,plain,(
  ( ! [X6,X7] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12755,f227])).
fof(f12755,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9136])).
fof(f9136,plain,(
  ( ! [X6,X7] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',X6)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X7) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))),s('type.integer.int',X6))))) ) | $spl0),
  inference(superposition,[],[f4560,f3586])).
fof(f13321,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13320,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13320,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12752,f227])).
fof(f12752,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9134])).
fof(f9134,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | $spl0),
  inference(superposition,[],[f4560,f409])).
fof(f13319,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13318,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13318,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12751,f227])).
fof(f12751,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f9059])).
fof(f9059,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | $spl0),
  inference(superposition,[],[f4451,f409])).
fof(f13317,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13316,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13316,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12750,f227])).
fof(f12750,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f8998])).
fof(f8998,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | $spl0),
  inference(superposition,[],[f4411,f409])).
fof(f13315,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13314,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13314,plain,(
  ( ! [X6,X4,X5,X3] : (sP5(X4,X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3))))))) | ~sP4(X4,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5) | ~sP3(X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12748,f227])).
fof(f12748,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP5(X4,X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3))))))) | ~sP4(X4,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5) | ~sP3(X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5886])).
fof(f5886,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | sP5(X4,X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3))))))) | ~sP4(X4,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5) | ~sP3(X5,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | $spl0),
  inference(superposition,[],[f1483,f1458])).
fof(f13313,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13312,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13312,plain,(
  ( ! [X6,X4,X5,X3] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12747,f227])).
fof(f12747,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5789])).
fof(f5789,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | $spl0),
  inference(superposition,[],[f1497,f1458])).
fof(f13311,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13310,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13310,plain,(
  ( ! [X6,X4,X5,X3] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12746,f227])).
fof(f12746,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5702])).
fof(f5702,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X6)) ) | $spl0),
  inference(superposition,[],[f1496,f1458])).
fof(f13309,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13308,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13308,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13307,f227])).
fof(f13307,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13306,f12509])).
fof(f13306,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12745,f227])).
fof(f12745,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5642])).
fof(f5642,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X54)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))))) ) | $spl0),
  inference(superposition,[],[f1495,f1458])).
fof(f13305,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13304,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13304,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X55)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),X55,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X57)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13303,f227])).
fof(f13303,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X55)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),X55,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X57)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13302,f12509])).
fof(f13302,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X55)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),X55,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X57)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12744,f227])).
fof(f12744,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X55)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),X55,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X57)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5588])).
fof(f5588,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X54)))) | p(s(bool,X55)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X56),s('type.integer.int',X57)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),X55,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X57)))))) ) | $spl0),
  inference(superposition,[],[f1492,f1458])).
fof(f13301,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13300,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13300,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,X4)) | p(s(bool,X5)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12743,f227])).
fof(f12743,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | p(s(bool,X5)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5519])).
fof(f5519,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | p(s(bool,X4)) | p(s(bool,X5)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X5,X4)) ) | $spl0),
  inference(superposition,[],[f1491,f1458])).
fof(f13299,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13298,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13298,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,X4)) | p(s(bool,X5)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4,X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12742,f227])).
fof(f12742,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | p(s(bool,X5)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4,X5)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5440])).
fof(f5440,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | p(s(bool,X4)) | p(s(bool,X5)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X4,X5)) ) | $spl0),
  inference(superposition,[],[f1488,f1458])).
fof(f13297,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13296,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13296,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X57)) | ~sP7(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13295,f227])).
fof(f13295,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X57)) | ~sP7(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13294,f12509])).
fof(f13294,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP7(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12741,f227])).
fof(f12741,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP7(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5379])).
fof(f5379,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X54)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP7(X57,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))))) ) | $spl0),
  inference(superposition,[],[f1487,f1458])).
fof(f13293,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13292,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13292,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X57)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13291,f227])).
fof(f13291,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,X57)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13290,f12509])).
fof(f13290,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12740,f227])).
fof(f12740,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5328])).
fof(f5328,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X54)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X55),s('type.integer.int',X56)))) | p(s(bool,X57)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X54)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X56)))),X57)) ) | $spl0),
  inference(superposition,[],[f1486,f1458])).
fof(f13289,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13288,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13288,plain,(
  ( ! [X54,X52,X50,X53,X51] : (p(s(bool,X53)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13287,f227])).
fof(f13287,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X53)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13286,f12509])).
fof(f13286,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12739,f227])).
fof(f12739,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5183])).
fof(f5183,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X50)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | $spl0),
  inference(superposition,[],[f1485,f1458])).
fof(f13285,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13284,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13284,plain,(
  ( ! [X54,X52,X50,X53,X51] : (p(s(bool,X53)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13283,f227])).
fof(f13283,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | p(s(bool,X53)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13282,f12509])).
fof(f13282,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12738,f227])).
fof(f12738,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f5132])).
fof(f5132,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X50)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | p(s(bool,X53)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X54),s('type.integer.int',X52)))),X53)) ) | $spl0),
  inference(superposition,[],[f1484,f1458])).
fof(f13281,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13280,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13280,plain,(
  ( ! [X54,X52,X50,X53,X51] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13279,f227])).
fof(f13279,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13278,f12509])).
fof(f13278,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12737,f227])).
fof(f12737,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4548])).
fof(f4548,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X50)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | $spl0),
  inference(superposition,[],[f1494,f1458])).
fof(f13277,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13276,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13276,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,X4)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X6,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12736,f227])).
fof(f12736,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X6,X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4491])).
fof(f4491,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X3)))) | p(s(bool,X4)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X3)))))),X6,X4)) ) | $spl0),
  inference(superposition,[],[f1493,f1458])).
fof(f13275,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13274,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13274,plain,(
  ( ! [X54,X52,X50,X53,X51] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13273,f227])).
fof(f13273,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13272,f12509])).
fof(f13272,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12735,f227])).
fof(f12735,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4439])).
fof(f4439,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X50)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))),X54)) ) | $spl0),
  inference(superposition,[],[f1490,f1458])).
fof(f13271,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13270,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13270,plain,(
  ( ! [X54,X52,X50,X53,X51] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f13269,f227])).
fof(f13269,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(forward_demodulation,[],[f13268,f12509])).
fof(f13268,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12734,f227])).
fof(f12734,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4399])).
fof(f4399,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X50)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X51),s('type.integer.int',X52)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X51))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X52)))),X54,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X50)))))) ) | $spl0),
  inference(superposition,[],[f1489,f1458])).
fof(f13267,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13266,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13266,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X3)) | sP1(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12733,f227])).
fof(f12733,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | sP1(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4281])).
fof(f4281,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X2)))) | p(s(bool,X3)) | sP1(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))))) ) | $spl0),
  inference(superposition,[],[f1482,f1458])).
fof(f13265,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13264,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13264,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X3)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12732,f227])).
fof(f12732,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X3)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4228])).
fof(f4228,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X2)))) | p(s(bool,X3)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X3)) ) | $spl0),
  inference(superposition,[],[f1481,f1458])).
fof(f13263,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13262,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13262,plain,(
  ( ! [X4,X2,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12731,f227])).
fof(f12731,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X4)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4175])).
fof(f4175,plain,(
  ( ! [X4,X2,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))),X4) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X2))))) ) | $spl0),
  inference(superposition,[],[f1480,f1458])).
fof(f13261,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13260,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13260,plain,(
  ( ! [X4,X2,X3] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12730,f227])).
fof(f12730,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2)))))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f4122])).
fof(f4122,plain,(
  ( ! [X4,X2,X3] : (sP0(X3,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X2))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X2))))) ) | $spl0),
  inference(superposition,[],[f1479,f1458])).
fof(f13259,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13258,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13258,plain,(
  ( ! [X76,X77] : (p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76)))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12726,f227])).
fof(f12726,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76)))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1675])).
fof(f1675,plain,(
  ( ! [X76,X77] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X76)))) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76)))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl0),
  inference(superposition,[],[f1205,f1458])).
fof(f13257,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13256,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13256,plain,(
  ( ! [X74,X75] : (p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12725,f227])).
fof(f12725,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1674])).
fof(f1674,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X74)))) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | $spl0),
  inference(superposition,[],[f968,f1458])).
fof(f13255,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13254,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13254,plain,(
  ( ! [X72,X73] : (p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12724,f227])).
fof(f12724,plain,(
  ( ! [X72,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1673])).
fof(f1673,plain,(
  ( ! [X72,X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X72)))) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | $spl0),
  inference(superposition,[],[f915,f1458])).
fof(f13253,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13252,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13252,plain,(
  ( ! [X70,X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12723,f227])).
fof(f12723,plain,(
  ( ! [X70,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1672])).
fof(f1672,plain,(
  ( ! [X70,X71] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X70)))) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | $spl0),
  inference(superposition,[],[f886,f1458])).
fof(f13251,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13250,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13250,plain,(
  ( ! [X68,X69] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68)))),X69)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12722,f227])).
fof(f12722,plain,(
  ( ! [X68,X69] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68)))),X69)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1671])).
fof(f1671,plain,(
  ( ! [X68,X69] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X68)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68)))),X69)) ) | $spl0),
  inference(superposition,[],[f599,f1458])).
fof(f13249,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13248,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13248,plain,(
  ( ! [X66,X67] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66)))),X67)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12721,f227])).
fof(f12721,plain,(
  ( ! [X66,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66)))),X67)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1670])).
fof(f1670,plain,(
  ( ! [X66,X67] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X66)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66)))),X67)) ) | $spl0),
  inference(superposition,[],[f567,f1458])).
fof(f13247,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13246,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13246,plain,(
  ( ! [X64,X65] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12720,f227])).
fof(f12720,plain,(
  ( ! [X64,X65] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1669])).
fof(f1669,plain,(
  ( ! [X64,X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X64)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64)))))) ) | $spl0),
  inference(superposition,[],[f556,f1458])).
fof(f13245,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13244,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13244,plain,(
  ( ! [X61,X62,X63] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12719,f227])).
fof(f12719,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1668])).
fof(f1668,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X61)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63)) ) | $spl0),
  inference(superposition,[],[f401,f1458])).
fof(f13243,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13242,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13242,plain,(
  ( ! [X59,X60,X58] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12718,f227])).
fof(f12718,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1667])).
fof(f1667,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X58)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60)) ) | $spl0),
  inference(superposition,[],[f400,f1458])).
fof(f13241,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13240,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13240,plain,(
  ( ! [X57,X56,X55] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55)))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12717,f227])).
fof(f12717,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55)))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1666])).
fof(f1666,plain,(
  ( ! [X57,X56,X55] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55)))),X57,X56) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X55))))) ) | $spl0),
  inference(superposition,[],[f397,f1458])).
fof(f13239,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13238,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13238,plain,(
  ( ! [X54,X52,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52)))),X53,X54) | ~p(s(bool,X53))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12716,f227])).
fof(f12716,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52)))),X53,X54) | ~p(s(bool,X53))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1665])).
fof(f1665,plain,(
  ( ! [X54,X52,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52)))),X53,X54) | ~p(s(bool,X53)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X52))))) ) | $spl0),
  inference(superposition,[],[f396,f1458])).
fof(f13237,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13236,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13236,plain,(
  ( ! [X50,X51,X49] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49)))),X51,X50) | p(s(bool,X50))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12715,f227])).
fof(f12715,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49)))),X51,X50) | p(s(bool,X50))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1664])).
fof(f1664,plain,(
  ( ! [X50,X51,X49] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49)))),X51,X50) | p(s(bool,X50)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X49))))) ) | $spl0),
  inference(superposition,[],[f395,f1458])).
fof(f13235,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13234,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13234,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12714,f227])).
fof(f12714,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1663])).
fof(f13233,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13232,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13232,plain,(
  ( ! [X45,X43,X44] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43)))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12713,f227])).
fof(f12713,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43)))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1662])).
fof(f1662,plain,(
  ( ! [X45,X43,X44] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43)))),X45,X44) | p(s(bool,X44)) | p(s(bool,X45)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X43))))) ) | $spl0),
  inference(superposition,[],[f380,f1458])).
fof(f13231,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13230,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13230,plain,(
  ( ! [X41,X42,X40] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40)))),X41,X42) | ~p(s(bool,X41))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12712,f227])).
fof(f12712,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40)))),X41,X42) | ~p(s(bool,X41))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1661])).
fof(f1661,plain,(
  ( ! [X41,X42,X40] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40)))),X41,X42) | ~p(s(bool,X41)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X40))))) ) | $spl0),
  inference(superposition,[],[f379,f1458])).
fof(f13229,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13228,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13228,plain,(
  ( ! [X39,X37,X38] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37)))),X39,X38) | ~p(s(bool,X38))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12711,f227])).
fof(f12711,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37)))),X39,X38) | ~p(s(bool,X38))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1660])).
fof(f1660,plain,(
  ( ! [X39,X37,X38] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37)))),X39,X38) | ~p(s(bool,X38)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X37))))) ) | $spl0),
  inference(superposition,[],[f378,f1458])).
fof(f13227,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13226,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13226,plain,(
  ( ! [X35,X36,X34] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34)))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12710,f227])).
fof(f12710,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34)))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1659])).
fof(f1659,plain,(
  ( ! [X35,X36,X34] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34)))),X35,X36) | p(s(bool,X35)) | p(s(bool,X36)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X34))))) ) | $spl0),
  inference(superposition,[],[f373,f1458])).
fof(f13225,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13224,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13224,plain,(
  ( ! [X33,X31,X32] : (~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))))) | ~p(s(bool,X32)) | p(s(bool,X33))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12709,f227])).
fof(f12709,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))))) | ~p(s(bool,X32)) | p(s(bool,X33))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1658])).
fof(f1658,plain,(
  ( ! [X33,X31,X32] : (~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))))) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X31))))) ) | $spl0),
  inference(superposition,[],[f365,f1458])).
fof(f13223,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13222,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13222,plain,(
  ( ! [X30,X28,X29] : (~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28)))),X30) | ~p(s(bool,X29)) | p(s(bool,X30))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12708,f227])).
fof(f12708,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28)))),X30) | ~p(s(bool,X29)) | p(s(bool,X30))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1657])).
fof(f1657,plain,(
  ( ! [X30,X28,X29] : (~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28)))),X30) | ~p(s(bool,X29)) | p(s(bool,X30)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X28))))) ) | $spl0),
  inference(superposition,[],[f356,f1458])).
fof(f13221,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13220,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13220,plain,(
  ( ! [X26,X27,X25] : (~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25)))),X27) | ~p(s(bool,X26)) | p(s(bool,X27))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12707,f227])).
fof(f12707,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25)))),X27) | ~p(s(bool,X26)) | p(s(bool,X27))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1656])).
fof(f1656,plain,(
  ( ! [X26,X27,X25] : (~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25)))),X27) | ~p(s(bool,X26)) | p(s(bool,X27)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X25))))) ) | $spl0),
  inference(superposition,[],[f337,f1458])).
fof(f13219,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13218,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13218,plain,(
  ( ! [X24,X23,X22] : (~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22)))),X24) | ~p(s(bool,X23)) | p(s(bool,X24))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12706,f227])).
fof(f12706,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22)))),X24) | ~p(s(bool,X23)) | p(s(bool,X24))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1655])).
fof(f1655,plain,(
  ( ! [X24,X23,X22] : (~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22)))),X24) | ~p(s(bool,X23)) | p(s(bool,X24)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X22))))) ) | $spl0),
  inference(superposition,[],[f333,f1458])).
fof(f13217,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13216,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13216,plain,(
  ( ! [X21,X19,X20] : (sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21,X20)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12705,f227])).
fof(f12705,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21,X20)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1654])).
fof(f1654,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X19)))) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21,X20)) ) | $spl0),
  inference(superposition,[],[f330,f1458])).
fof(f13215,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13214,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13214,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))))) | p(s(bool,X18))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12704,f227])).
fof(f12704,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))))) | p(s(bool,X18))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1653])).
fof(f1653,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))))) | p(s(bool,X18)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X17))))) ) | $spl0),
  inference(superposition,[],[f304,f1458])).
fof(f13213,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13212,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13212,plain,(
  ( ! [X15,X16] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15)))),X16) | p(s(bool,X16))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12703,f227])).
fof(f12703,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15)))),X16) | p(s(bool,X16))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1652])).
fof(f1652,plain,(
  ( ! [X15,X16] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15)))),X16) | p(s(bool,X16)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X15))))) ) | $spl0),
  inference(superposition,[],[f301,f1458])).
fof(f13211,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13210,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13210,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13)))),X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12702,f227])).
fof(f12702,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13)))),X14)) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1651])).
fof(f13209,plain,(
  $false | ($spl0 | $spl82 | $spl86)),
  inference(global_subsumption,[],[f13208,f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f13208,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12701,f227])).
fof(f12701,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11)))))) ) | ($spl0 | $spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f1650])).
fof(f13199,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12538,f227])).
fof(f12538,plain,(
  ~p(s(bool,'T_0')) | ($spl82 | $spl86)),
  inference(backward_demodulation,[],[f12509,f413])).
fof(f13198,plain,(
  $false | ($spl82 | $spl86)),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f235,f236,f246,f245,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1453,f1452,f1451,f1450,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1840,f1916,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2050,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f1441,f1469,f1459,f2368,f1851,f1822,f1504,f1503,f1502,f1501,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1486,f1485,f1484,f1483,f1482,f1481,f1480,f1479,f319,f318,f1917,f2051,f1523,f1522,f1470,f491,f413,f250,f249,f3537,f3545,f3546,f3637,f3662,f3740,f3750,f3754,f3764,f3797,f3801,f3811,f3843,f3854,f3871,f3885,f3888,f3899,f3916,f3935,f3936,f3937,f3938,f3939,f4027,f4028,f4029,f4030,f4031,f4102,f4148,f4123,f4149,f4155,f4201,f4176,f4202,f4208,f4254,f4229,f4255,f4261,f4307,f4282,f4308,f4337,f4344,f4345,f4346,f4347,f4348,f4404,f4406,f4409,f4410,f4400,f4411,f4444,f4446,f4449,f4450,f4440,f4451,f4517,f4492,f4518,f4553,f4555,f4558,f4559,f4549,f4560,f4594,f4615,f4696,f4697,f4698,f4699,f4700,f4702,f4704,f4705,f4706,f4707,f4708,f4709,f4710,f4711,f4712,f4713,f4714,f4715,f4716,f4717,f4718,f4719,f4720,f4721,f4722,f4723,f4724,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4733,f4760,f4761,f4775,f4862,f4863,f4874,f4875,f4877,f4880,f4881,f4882,f4883,f4884,f4893,f4894,f4895,f4896,f4897,f4898,f4899,f4900,f4901,f4902,f4903,f4904,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4984,f4985,f5022,f5024,f5027,f5028,f5029,f5030,f5031,f5040,f5041,f5042,f5043,f5044,f5045,f5046,f5047,f5048,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5059,f5060,f5061,f5067,f5068,f5069,f5070,f5071,f5072,f5073,f5140,f5142,f5145,f5146,f5147,f5134,f5135,f5137,f5148,f5191,f5193,f5196,f5197,f5198,f5185,f5186,f5188,f5199,f5336,f5338,f5341,f5343,f5344,f5330,f5331,f5333,f5345,f5387,f5389,f5392,f5394,f5395,f5381,f5382,f5384,f5396,f5469,f5470,f5442,f5443,f5445,f5471,f5548,f5549,f5521,f5522,f5524,f5550,f5596,f5598,f5601,f5603,f5604,f5590,f5591,f5593,f5605,f5650,f5652,f5655,f5657,f5658,f5644,f5645,f5647,f5659,f5749,f5750,f5704,f5705,f5707,f5751,f5836,f5837,f5791,f5792,f5794,f5838,f5969,f5970,f5888,f5889,f5891,f5971,f6107,f6103,f6302,f6331,f6372,f6384,f6391,f6408,f6417,f6432,f6695,f6694,f6693,f6692,f6774,f6791,f6794,f7064,f7174,f7192,f7194,f7206,f7346,f7703,f7702,f7700,f7725,f7724,f7722,f7721,f8051,f8045,f8044,f8043,f8042,f8041,f8040,f8038,f8037,f8070,f8103,f8999,f9020,f9060,f9081,f9135,f9156,f9205,f9227,f9228,f9229,f9322,f9325,f9313,f9314,f9315,f9328,f9330,f12035,f12038,f12026,f12027,f12028,f12040,f12042,f12120,f12159,f12194,f12203,f12218,f12236,f12269,f12284,f12529,f12530,f12531,f12509,f13197])).
fof(f12535,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12534,f469])).
fof(f12534,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12533,f6107])).
fof(f12533,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl82),
  inference(subsumption_resolution,[],[f12328,f470])).
fof(f12328,plain,(
  ( ! [X36] : (s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X36),s('type.integer.int',X36)))) ) | $spl82),
  inference(superposition,[],[f6103,f491])).
fof(f12525,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12524,f470])).
fof(f12524,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl82 | $spl86)),
  inference(condensation,[],[f12523])).
fof(f12523,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X10))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12510,f6107])).
fof(f12510,plain,(
  ( ! [X10,X9] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X10))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl82),
  inference(duplicate_literal_removal,[],[f12315])).
fof(f12315,plain,(
  ( ! [X10,X9] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X10))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl82),
  inference(superposition,[],[f6103,f1784])).
fof(f12522,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12521,f469])).
fof(f12521,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl82 | $spl86)),
  inference(condensation,[],[f12520])).
fof(f12520,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12515,f6107])).
fof(f12515,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl82),
  inference(duplicate_literal_removal,[],[f12310])).
fof(f12310,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl82),
  inference(superposition,[],[f6103,f236])).
fof(f12519,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12518,f469])).
fof(f12518,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12308,f6107])).
fof(f12308,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl82),
  inference(unit_resulting_resolution,[],[f469,f6103])).
fof(f12517,plain,(
  $false | ($spl82 | $spl86)),
  inference(subsumption_resolution,[],[f12516,f470])).
fof(f12516,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | ($spl82 | $spl86)),
  inference(forward_demodulation,[],[f12309,f6107])).
fof(f12309,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl82),
  inference(unit_resulting_resolution,[],[f470,f6103])).
fof(f12041,plain,(
  ( ! [X85,X84,X82] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82)),X84) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X85)) ) | $spl196),
  inference(cnf_transformation,[],[f12041_D])).
fof(f12041_D,plain,(
  ( ! [X85,X84,X82] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82)),X84) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X85)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f9327,plain,(
  ( ! [X31] : (p(s(bool,X31))) ) | $spl190),
  inference(cnf_transformation,[],[f9327_D])).
fof(f9327_D,plain,(
  ( ! [X31] : (p(s(bool,X31))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f12040,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP1('const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82)),X84) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f12032,f245])).
fof(f12032,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP1('const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82)),X84) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f2345,f1784])).
fof(f12039,plain,(
  ( ! [X33,X32] : (sP1('F_0',X32) | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X33)) ) | $spl194),
  inference(cnf_transformation,[],[f12039_D])).
fof(f12039_D,plain,(
  ( ! [X33,X32] : (sP1('F_0',X32) | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X33)) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f12038,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X31)) | sP1('F_0',X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f12016,f245])).
fof(f12016,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X31)) | sP1('F_0',X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f2345,f236])).
fof(f11993,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9334,f9347])).
fof(f9347,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f9327,f279])).
fof(f9334,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f249])).
fof(f11992,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9338,f227])).
fof(f9338,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f469,f9327,f279])).
fof(f11991,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9340,f227])).
fof(f9340,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f470,f9327,f279])).
fof(f11990,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9344,f9327])).
fof(f9344,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f470,f9327,f279])).
fof(f11989,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9348,f227])).
fof(f9348,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f469,f9327,f279])).
fof(f11988,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9350,f227])).
fof(f9350,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f470,f9327,f279])).
fof(f11987,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9354,f9327])).
fof(f9354,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f470,f9327,f279])).
fof(f11986,plain,(
  $false | ($spl4 | $spl190)),
  inference(subsumption_resolution,[],[f9361,f9327])).
fof(f9361,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl4 | $spl190)),
  inference(unit_resulting_resolution,[],[f3340,f9327,f300])).
fof(f3340,plain,(
  ( ! [X91] : (sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int',X91)))) ) | $spl4),
  inference(subsumption_resolution,[],[f3332,f413])).
fof(f3332,plain,(
  ( ! [X91] : (p(s(bool,'F_0')) | sP1('T_0','const.integer.int_lt_2'(s('type.integer.int',X91),s('type.integer.int',X91)))) ) | $spl4),
  inference(superposition,[],[f2277,f491])).
fof(f11985,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9362,f227])).
fof(f9362,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f508,f9327,f300])).
fof(f11984,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9363,f9327])).
fof(f9363,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7646,f9327,f300])).
fof(f7646,plain,(
  sP1('F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5280])).
fof(f5280,plain,(
  ( ! [X6] : (sP1(X6,f(s(bool,'T_0'))) | p(s(bool,X6))) ) | $spl69),
  inference(subsumption_resolution,[],[f5225,f227])).
fof(f5225,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f304,f4786])).
fof(f11983,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9364,f9327])).
fof(f9364,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f3885,f9327,f300])).
fof(f11982,plain,(
  $false | ($spl120 | $spl190)),
  inference(subsumption_resolution,[],[f9365,f9327])).
fof(f9365,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl120 | $spl190)),
  inference(unit_resulting_resolution,[],[f6907,f9327,f300])).
fof(f6907,plain,(
  sP1('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl120),
  inference(unit_resulting_resolution,[],[f413,f6133])).
fof(f11981,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9366,f9327])).
fof(f9366,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6388,f9327,f300])).
fof(f6388,plain,(
  sP1('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6266])).
fof(f6266,plain,(
  ( ! [X32] : (sP1(X32,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | p(s(bool,X32))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6201,f227])).
fof(f6201,plain,(
  ( ! [X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | sP1(X32,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f304,f6170])).
fof(f11980,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9367,f9327])).
fof(f9367,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))))) ) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f9176,f9327,f300])).
fof(f9176,plain,(
  ( ! [X0] : (sP1('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12)))))) ) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6251])).
fof(f6251,plain,(
  ( ! [X6,X7] : (sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',sK12))))) | p(s(bool,X6))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6183,f227])).
fof(f6183,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',sK12)))))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1482,f6170])).
fof(f11979,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9368,f9327])).
fof(f9368,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f528,f9327,f300])).
fof(f11978,plain,(
  $false | ($spl8 | $spl190)),
  inference(subsumption_resolution,[],[f9375,f227])).
fof(f9375,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl190)),
  inference(unit_resulting_resolution,[],[f3341,f9327,f300])).
fof(f3341,plain,(
  ( ! [X92] : (sP1('const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int',X92)),'T_0')) ) | $spl8),
  inference(subsumption_resolution,[],[f3333,f413])).
fof(f3333,plain,(
  ( ! [X92] : (p(s(bool,'F_0')) | sP1('const.integer.int_lt_2'(s('type.integer.int',X92),s('type.integer.int',X92)),'T_0')) ) | $spl8),
  inference(superposition,[],[f2281,f491])).
fof(f11977,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9380,f227])).
fof(f9380,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f500,f9327,f300])).
fof(f11976,plain,(
  $false | ($spl4 | $spl190)),
  inference(subsumption_resolution,[],[f9381,f227])).
fof(f9381,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl190)),
  inference(unit_resulting_resolution,[],[f3340,f9327,f300])).
fof(f11975,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9389,f9327])).
fof(f9389,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7606,f9327,f300])).
fof(f7606,plain,(
  sP1(f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5279])).
fof(f5279,plain,(
  ( ! [X5] : (sP1(f(s(bool,'T_0')),X5) | p(s(bool,X5))) ) | $spl69),
  inference(subsumption_resolution,[],[f5224,f227])).
fof(f5224,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1(f(s(bool,'T_0')),X5)) ) | $spl69),
  inference(superposition,[],[f301,f4786])).
fof(f11974,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9390,f9327])).
fof(f9390,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1174,f9327,f300])).
fof(f11973,plain,(
  $false | ($spl118 | $spl190)),
  inference(subsumption_resolution,[],[f9391,f9327])).
fof(f9391,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl118 | $spl190)),
  inference(unit_resulting_resolution,[],[f6883,f9327,f300])).
fof(f6883,plain,(
  sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0') | $spl118),
  inference(unit_resulting_resolution,[],[f413,f6132])).
fof(f11972,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9392,f9327])).
fof(f9392,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6381,f9327,f300])).
fof(f6381,plain,(
  sP1('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6265])).
fof(f6265,plain,(
  ( ! [X31] : (sP1('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X31) | p(s(bool,X31))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6200,f227])).
fof(f6200,plain,(
  ( ! [X31] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP1('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X31)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f301,f6170])).
fof(f11971,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9393,f9327])).
fof(f9393,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))))) ) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f9101,f9327,f300])).
fof(f9101,plain,(
  ( ! [X0] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK12)))),'F_0')) ) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6250])).
fof(f6250,plain,(
  ( ! [X4,X5] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',sK12)))),X4) | p(s(bool,X4))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6182,f227])).
fof(f6182,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',sK12))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',sK12)))),X4)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1481,f6170])).
fof(f11970,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9394,f9327])).
fof(f9394,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f505,f9327,f300])).
fof(f11969,plain,(
  $false | ($spl8 | $spl190)),
  inference(subsumption_resolution,[],[f9395,f9327])).
fof(f9395,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl8 | $spl190)),
  inference(unit_resulting_resolution,[],[f3341,f9327,f300])).
fof(f11968,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9409,f9327])).
fof(f9409,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1568,f413,f9327,f329])).
fof(f11967,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9410,f227])).
fof(f9410,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f762,f413,f9327,f329])).
fof(f11966,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9411,f9327])).
fof(f9411,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f4783,f413,f9327,f329])).
fof(f4783,plain,(
  sP5('F_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f413,f4773,f345])).
fof(f11965,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9412,f9327])).
fof(f9412,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1370,f413,f9327,f329])).
fof(f11964,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9413,f9327])).
fof(f9413,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1371,f413,f9327,f329])).
fof(f11963,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9560,f227])).
fof(f9560,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1310,f413,f9327,f329])).
fof(f11962,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9561,f227])).
fof(f9561,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1568,f413,f9327,f329])).
fof(f11961,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9566,f9327])).
fof(f9566,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1312,f413,f9327,f329])).
fof(f11960,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9567,f9327])).
fof(f9567,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1311,f413,f9327,f329])).
fof(f11959,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9587,f10023])).
fof(f10023,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f469,f9327,f347])).
fof(f9587,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f427,f421,f9327,f330])).
fof(f11958,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9591,f10025])).
fof(f10025,plain,(
  ( ! [X0,X1] : (~sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f470,f9327,f347])).
fof(f9591,plain,(
  ( ! [X0,X1] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f421,f9327,f330])).
fof(f11957,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9645,f10023])).
fof(f9645,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f427,f423,f9327,f330])).
fof(f11956,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9649,f782])).
fof(f9649,plain,(
  sP5('T_0','T_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f431,f425,f423,f9327,f330])).
fof(f11955,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9653,f10023])).
fof(f9653,plain,(
  sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f431,f426,f423,f9327,f330])).
fof(f11954,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9657,f10023])).
fof(f9657,plain,(
  sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f431,f451,f423,f9327,f330])).
fof(f11953,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9669,f10025])).
fof(f9669,plain,(
  ( ! [X0,X1] : (sP5(X0,'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f459,f9327,f330])).
fof(f11952,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9673,f1541])).
fof(f9673,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f425,f459,f9327,f330])).
fof(f11951,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9677,f10025])).
fof(f9677,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f426,f459,f9327,f330])).
fof(f11950,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9681,f10025])).
fof(f9681,plain,(
  ( ! [X0] : (sP5('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))),'T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f451,f459,f9327,f330])).
fof(f11949,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9709,f10023])).
fof(f9709,plain,(
  ( ! [X0] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f427,f460,f9327,f330])).
fof(f11948,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9712,f10025])).
fof(f9712,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f460,f9327,f330])).
fof(f11947,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9721,f9840])).
fof(f9840,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f334])).
fof(f9721,plain,(
  ~sP4('T_0','F_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f431,f427,f782,f9327,f330])).
fof(f11946,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9722,f9882])).
fof(f9882,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f338])).
fof(f9722,plain,(
  ~sP3('T_0','F_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f431,f423,f782,f9327,f330])).
fof(f11945,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9723,f9888])).
fof(f9888,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f344])).
fof(f9723,plain,(
  ~sP2('F_0','T_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f427,f423,f782,f9327,f330])).
fof(f11944,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9725,f9840])).
fof(f9725,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f1541,f9327,f330])).
fof(f11943,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9726,f9840])).
fof(f9726,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f429,f461,f1541,f9327,f330])).
fof(f11942,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9727,f9840])).
fof(f9727,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f425,f1541,f9327,f330])).
fof(f11941,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9728,f9840])).
fof(f9728,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f429,f425,f1541,f9327,f330])).
fof(f11940,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9729,f9882])).
fof(f9729,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f459,f1541,f9327,f330])).
fof(f11939,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9730,f9882])).
fof(f9730,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f429,f459,f1541,f9327,f330])).
fof(f11938,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9731,f9888])).
fof(f9731,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f461,f459,f1541,f9327,f330])).
fof(f11937,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9733,f9888])).
fof(f9733,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f425,f459,f1541,f9327,f330])).
fof(f11936,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9735,f9882])).
fof(f9735,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f431,f421,f1541,f9327,f330])).
fof(f11935,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9736,f9882])).
fof(f9736,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f429,f421,f1541,f9327,f330])).
fof(f11934,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9737,f9888])).
fof(f9737,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f461,f421,f1541,f9327,f330])).
fof(f11933,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9739,f9888])).
fof(f9739,plain,(
  ( ! [X0] : (~sP2('const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)),'T_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f425,f421,f1541,f9327,f330])).
fof(f11932,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9747,f9840])).
fof(f9747,plain,(
  ~sP4('T_0','F_0',f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f429,f427,f4782,f9327,f330])).
fof(f4782,plain,(
  ~sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f227,f4773,f347])).
fof(f11931,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9748,f9882])).
fof(f9748,plain,(
  ~sP3(f(s(bool,'T_0')),'F_0','T_0') | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f429,f423,f4782,f9327,f330])).
fof(f11930,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9749,f9888])).
fof(f9749,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),'T_0') | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f427,f423,f4782,f9327,f330])).
fof(f11929,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9783,f9327])).
fof(f9783,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f459,f413,f9327,f333])).
fof(f11928,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9784,f9327])).
fof(f9784,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f424,f413,f9327,f333])).
fof(f11927,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9785,f9327])).
fof(f9785,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f460,f413,f9327,f333])).
fof(f11926,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9808,f9840])).
fof(f9808,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f333])).
fof(f11925,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9810,f9327])).
fof(f9810,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f423,f413,f9327,f333])).
fof(f11924,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9811,f9327])).
fof(f9811,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f459,f413,f9327,f333])).
fof(f11923,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9813,f9327])).
fof(f9813,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f460,f413,f9327,f333])).
fof(f11922,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9824,f9840])).
fof(f9824,plain,(
  ( ! [X0] : (~sP4('T_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f227,f9327,f333])).
fof(f11921,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9838,f9840])).
fof(f9838,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f333])).
fof(f11920,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9843,f9327])).
fof(f9843,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f461,f413,f9327,f337])).
fof(f11919,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9844,f9327])).
fof(f9844,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f428,f413,f9327,f337])).
fof(f11918,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9845,f9327])).
fof(f9845,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f462,f413,f9327,f337])).
fof(f11917,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9860,f9882])).
fof(f9860,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f337])).
fof(f11916,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9862,f9327])).
fof(f9862,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f427,f413,f9327,f337])).
fof(f11915,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9863,f9327])).
fof(f9863,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f461,f413,f9327,f337])).
fof(f11914,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9865,f9327])).
fof(f9865,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f462,f413,f9327,f337])).
fof(f11913,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9871,f9882])).
fof(f9871,plain,(
  ( ! [X0] : (~sP3('T_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f227,f9327,f337])).
fof(f11912,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9880,f9882])).
fof(f9880,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f337])).
fof(f11905,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9901,f4786])).
fof(f9901,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f5203,f9327,f346])).
fof(f5203,plain,(
  ~sP5('F_0','T_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f4786,f348])).
fof(f11904,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9902,f474])).
fof(f9902,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl190),
  inference(unit_resulting_resolution,[],[f814,f9327,f346])).
fof(f11903,plain,(
  $false | ($spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9903,f6107])).
fof(f9903,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6694,f9327,f346])).
fof(f11902,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9904,f6170])).
fof(f9904,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6175,f9327,f346])).
fof(f6175,plain,(
  ~sP5('F_0','T_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6170,f348])).
fof(f11901,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9905,f473])).
fof(f9905,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl190),
  inference(unit_resulting_resolution,[],[f791,f9327,f346])).
fof(f11900,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9907,f491])).
fof(f9907,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1569,f9327,f346])).
fof(f11899,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f9908,f4786])).
fof(f9908,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f5201,f9327,f346])).
fof(f5201,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),'T_0') | $spl69),
  inference(unit_resulting_resolution,[],[f413,f4786,f348])).
fof(f11898,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f11897,f4786])).
fof(f11897,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(forward_demodulation,[],[f9909,f473])).
fof(f9909,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f6012,f9327,f346])).
fof(f6012,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl69),
  inference(unit_resulting_resolution,[],[f5981,f327])).
fof(f5981,plain,(
  ~sP3(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5300])).
fof(f5300,plain,(
  ( ! [X44] : (~sP3(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X44) | p(s(bool,X44))) ) | $spl69),
  inference(subsumption_resolution,[],[f5248,f227])).
fof(f5248,plain,(
  ( ! [X44] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | ~sP3(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X44)) ) | $spl69),
  inference(superposition,[],[f915,f4786])).
fof(f11896,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f9910,f1458])).
fof(f9910,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1633,f9327,f346])).
fof(f1633,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1458,f348])).
fof(f11895,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9911,f318])).
fof(f9911,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1452,f9327,f346])).
fof(f11894,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f9912,f1468])).
fof(f9912,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1697,f9327,f346])).
fof(f1697,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1468,f348])).
fof(f11893,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f11892,f6170])).
fof(f11892,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86 | $spl190)),
  inference(forward_demodulation,[],[f9913,f6107])).
fof(f9913,plain,(
  s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f6034,f9327,f346])).
fof(f6034,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1639,f348])).
fof(f11891,plain,(
  $false | ($spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9914,f6107])).
fof(f9914,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6692,f9327,f346])).
fof(f11890,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9915,f474])).
fof(f9915,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl190),
  inference(unit_resulting_resolution,[],[f812,f9327,f346])).
fof(f11889,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9916,f318])).
fof(f9916,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1450,f9327,f346])).
fof(f11888,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f9917,f1458])).
fof(f9917,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1631,f9327,f346])).
fof(f1631,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0)))),'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1458,f348])).
fof(f11887,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f9918,f6170])).
fof(f9918,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6173,f9327,f346])).
fof(f6173,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'T_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6170,f348])).
fof(f11886,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f9919,f1468])).
fof(f9919,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1699,f9327,f346])).
fof(f1699,plain,(
  ( ! [X0] : (~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1468,f348])).
fof(f11885,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f11884,f6170])).
fof(f11884,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86 | $spl190)),
  inference(forward_demodulation,[],[f9920,f6107])).
fof(f9920,plain,(
  s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f6036,f9327,f346])).
fof(f6036,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl0),
  inference(unit_resulting_resolution,[],[f413,f1639,f348])).
fof(f11883,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f11882,f6170])).
fof(f11882,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86 | $spl190)),
  inference(forward_demodulation,[],[f9921,f473])).
fof(f9921,plain,(
  s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8280,f9327,f346])).
fof(f8280,plain,(
  ~sP5('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f8271,f327])).
fof(f8271,plain,(
  ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6286])).
fof(f6286,plain,(
  ( ! [X70] : (~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70) | p(s(bool,X70))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6224,f227])).
fof(f6224,plain,(
  ( ! [X70] : (~p(s(bool,'T_0')) | p(s(bool,X70)) | ~sP3('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X70)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f915,f6170])).
fof(f11881,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9922,f473])).
fof(f9922,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl190),
  inference(unit_resulting_resolution,[],[f789,f9327,f346])).
fof(f11880,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9923,f491])).
fof(f9923,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1567,f9327,f346])).
fof(f11875,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9993,f469])).
fof(f9993,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f762,f9327,f347])).
fof(f11874,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9994,f470])).
fof(f9994,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1373,f9327,f347])).
fof(f11873,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f9995,f469])).
fof(f9995,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f761,f9327,f347])).
fof(f11872,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f11871,f469])).
fof(f11871,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl69 | $spl190)),
  inference(forward_demodulation,[],[f9996,f4786])).
fof(f9996,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f4788,f9327,f347])).
fof(f4788,plain,(
  sP5('F_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f4773,f345])).
fof(f11870,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11869,f469])).
fof(f11869,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f9997,f474])).
fof(f9997,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1324,f9327,f347])).
fof(f11868,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11867,f469])).
fof(f11867,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f9998,f473])).
fof(f9998,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1325,f9327,f347])).
fof(f11866,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f11865,f469])).
fof(f11865,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl69 | $spl190)),
  inference(forward_demodulation,[],[f9999,f4786])).
fof(f9999,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f4783,f9327,f347])).
fof(f11864,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11863,f469])).
fof(f11863,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f10000,f474])).
fof(f10000,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1370,f9327,f347])).
fof(f11862,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11861,f470])).
fof(f11861,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(forward_demodulation,[],[f10001,f474])).
fof(f10001,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1374,f9327,f347])).
fof(f11860,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10002,f470])).
fof(f10002,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1277,f9327,f347])).
fof(f11859,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11858,f469])).
fof(f11858,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f10003,f473])).
fof(f10003,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1371,f9327,f347])).
fof(f11857,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11856,f470])).
fof(f11856,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(forward_demodulation,[],[f10004,f474])).
fof(f10004,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1350,f9327,f347])).
fof(f11855,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11854,f470])).
fof(f11854,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(forward_demodulation,[],[f10005,f473])).
fof(f10005,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1351,f9327,f347])).
fof(f11853,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11852,f470])).
fof(f11852,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(forward_demodulation,[],[f10006,f473])).
fof(f10006,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1375,f9327,f347])).
fof(f11851,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11850,f469])).
fof(f11850,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f10018,f473])).
fof(f10018,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1329,f9327,f347])).
fof(f11849,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10019,f469])).
fof(f10019,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f1278,f9327,f347])).
fof(f11848,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11847,f469])).
fof(f11847,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl190),
  inference(forward_demodulation,[],[f10020,f474])).
fof(f10020,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1328,f9327,f347])).
fof(f11846,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10021,f470])).
fof(f10021,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1279,f9327,f347])).
fof(f11845,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11844,f470])).
fof(f11844,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) ) | $spl190),
  inference(forward_demodulation,[],[f10022,f473])).
fof(f10022,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f8051,f9327,f347])).
fof(f11843,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10038,f10253])).
fof(f10253,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f9327,f9327,f362])).
fof(f10038,plain,(
  ( ! [X0,X1] : (~sP7(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f350])).
fof(f11842,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10047,f10253])).
fof(f10047,plain,(
  ( ! [X0,X1] : (~sP7(X0,'F_0',X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f351])).
fof(f11841,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10050,f9327])).
fof(f10050,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f438,f532,f9327,f352])).
fof(f11840,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10051,f9327])).
fof(f10051,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f435,f532,f9327,f352])).
fof(f11839,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10053,f9327])).
fof(f10053,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f463,f532,f9327,f352])).
fof(f11838,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10059,f10155])).
fof(f10155,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f357])).
fof(f10059,plain,(
  ~sP6('F_0','T_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f532,f227,f9327,f352])).
fof(f11837,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10069,f10155])).
fof(f10069,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f352])).
fof(f11836,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10071,f10155])).
fof(f10071,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f352])).
fof(f11835,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10080,f9327])).
fof(f10080,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f437,f529,f9327,f352])).
fof(f11834,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10081,f9327])).
fof(f10081,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f435,f529,f9327,f352])).
fof(f11833,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10083,f9327])).
fof(f10083,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f464,f529,f9327,f352])).
fof(f11832,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10090,f10155])).
fof(f10090,plain,(
  ~sP6('T_0','F_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f9327,f352])).
fof(f11831,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10104,f10155])).
fof(f10104,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f352])).
fof(f11830,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10106,f10155])).
fof(f10106,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f352])).
fof(f11829,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10116,f9327])).
fof(f10116,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f463,f413,f9327,f356])).
fof(f11828,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10117,f9327])).
fof(f10117,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f438,f413,f9327,f356])).
fof(f11827,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10118,f9327])).
fof(f10118,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f464,f413,f9327,f356])).
fof(f11826,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10133,f10155])).
fof(f10133,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f356])).
fof(f11825,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10135,f9327])).
fof(f10135,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f437,f413,f9327,f356])).
fof(f11824,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10136,f9327])).
fof(f10136,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f463,f413,f9327,f356])).
fof(f11823,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10138,f9327])).
fof(f10138,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f464,f413,f9327,f356])).
fof(f11822,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10144,f10155])).
fof(f10144,plain,(
  ( ! [X0] : (~sP6('T_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f227,f9327,f356])).
fof(f11821,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10153,f10155])).
fof(f10153,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f9327,f356])).
fof(f11820,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10158,f9327])).
fof(f10158,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f227,f9327,f362])).
fof(f11819,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10160,f9327])).
fof(f10160,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f362])).
fof(f11818,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10161,f227])).
fof(f10161,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f9327,f9327,f362])).
fof(f11817,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10162,f9327])).
fof(f10162,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1068,f9327,f9327,f362])).
fof(f11816,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10163,f9327])).
fof(f10163,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6522,f9327,f9327,f362])).
fof(f6522,plain,(
  ~sP7('F_0','T_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f6510,f349])).
fof(f6510,plain,(
  ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f227,f413,f6270])).
fof(f6270,plain,(
  ( ! [X39,X40] : (~sP6(X39,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X40) | p(s(bool,X40)) | ~p(s(bool,X39))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6205,f227])).
fof(f6205,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | p(s(bool,X40)) | ~sP6(X39,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X40)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f356,f6170])).
fof(f11815,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10164,f9327])).
fof(f10164,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6384,f9327,f9327,f362])).
fof(f11814,plain,(
  $false | ($spl128 | $spl190)),
  inference(subsumption_resolution,[],[f10165,f9327])).
fof(f10165,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f8517,f9327,f9327,f362])).
fof(f8517,plain,(
  ~sP7('F_0','T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl128),
  inference(unit_resulting_resolution,[],[f8484,f349])).
fof(f8484,plain,(
  ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0') | $spl128),
  inference(unit_resulting_resolution,[],[f413,f227,f6137])).
fof(f11813,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10166,f9327])).
fof(f10166,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7504,f9327,f9327,f362])).
fof(f7504,plain,(
  ~sP7('F_0',f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl69),
  inference(unit_resulting_resolution,[],[f7466,f349])).
fof(f7466,plain,(
  ~sP6(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5301])).
fof(f5301,plain,(
  ( ! [X45] : (~sP6(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X45) | p(s(bool,X45))) ) | $spl69),
  inference(subsumption_resolution,[],[f5249,f227])).
fof(f5249,plain,(
  ( ! [X45] : (~p(s(bool,'T_0')) | p(s(bool,X45)) | ~sP6(f(s(bool,'T_0')),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X45)) ) | $spl69),
  inference(superposition,[],[f968,f4786])).
fof(f11812,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10167,f9327])).
fof(f10167,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8338,f9327,f9327,f362])).
fof(f8338,plain,(
  ~sP7('F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f8308,f349])).
fof(f8308,plain,(
  ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6287])).
fof(f6287,plain,(
  ( ! [X71] : (~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71) | p(s(bool,X71))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6225,f227])).
fof(f6225,plain,(
  ( ! [X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP6('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f968,f6170])).
fof(f11811,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10168,f227])).
fof(f10168,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f227,f9327,f362])).
fof(f11810,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10174,f227])).
fof(f10174,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f362])).
fof(f11809,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10175,f227])).
fof(f10175,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f362])).
fof(f11808,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10187,f9327])).
fof(f10187,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f9327,f362])).
fof(f11807,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10189,f9327])).
fof(f10189,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f362])).
fof(f11806,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10191,f227])).
fof(f10191,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f9327,f9327,f362])).
fof(f11805,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10192,f227])).
fof(f10192,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1068,f9327,f9327,f362])).
fof(f11804,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10193,f227])).
fof(f10193,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6522,f9327,f9327,f362])).
fof(f11803,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10194,f227])).
fof(f10194,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f6384,f9327,f9327,f362])).
fof(f11802,plain,(
  $false | ($spl128 | $spl190)),
  inference(subsumption_resolution,[],[f10195,f227])).
fof(f10195,plain,(
  ~p(s(bool,'T_0')) | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f8517,f9327,f9327,f362])).
fof(f11801,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10196,f9327])).
fof(f10196,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7504,f9327,f9327,f362])).
fof(f11800,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10197,f9327])).
fof(f10197,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8338,f9327,f9327,f362])).
fof(f11799,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10198,f227])).
fof(f10198,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f9327,f362])).
fof(f11798,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10208,f227])).
fof(f10208,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f362])).
fof(f11797,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10209,f227])).
fof(f10209,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f362])).
fof(f11796,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10222,f227])).
fof(f10222,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f227,f9327,f362])).
fof(f11795,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10223,f9327])).
fof(f10223,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f362])).
fof(f11794,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10225,f227])).
fof(f10225,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f9327,f9327,f362])).
fof(f11793,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10226,f227])).
fof(f10226,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1068,f9327,f9327,f362])).
fof(f11792,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10227,f227])).
fof(f10227,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6522,f9327,f9327,f362])).
fof(f11791,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10228,f227])).
fof(f10228,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f6384,f9327,f9327,f362])).
fof(f11790,plain,(
  $false | ($spl128 | $spl190)),
  inference(subsumption_resolution,[],[f10229,f227])).
fof(f10229,plain,(
  ~p(s(bool,'T_0')) | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f8517,f9327,f9327,f362])).
fof(f11789,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10230,f9327])).
fof(f10230,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7504,f9327,f9327,f362])).
fof(f11788,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10231,f9327])).
fof(f10231,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8338,f9327,f9327,f362])).
fof(f11787,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10233,f227])).
fof(f10233,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f227,f9327,f362])).
fof(f11786,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10234,f9327])).
fof(f10234,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1068,f227,f9327,f362])).
fof(f11785,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10235,f9327])).
fof(f10235,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6522,f227,f9327,f362])).
fof(f11784,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10236,f9327])).
fof(f10236,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6384,f227,f9327,f362])).
fof(f11783,plain,(
  $false | ($spl128 | $spl190)),
  inference(subsumption_resolution,[],[f10237,f9327])).
fof(f10237,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f8517,f227,f9327,f362])).
fof(f11782,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10243,f9327])).
fof(f10243,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f9327,f362])).
fof(f11781,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10244,f227])).
fof(f10244,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f972,f9327,f9327,f362])).
fof(f11780,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10245,f9327])).
fof(f10245,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1068,f9327,f9327,f362])).
fof(f11779,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10246,f9327])).
fof(f10246,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6522,f9327,f9327,f362])).
fof(f11778,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10247,f9327])).
fof(f10247,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6384,f9327,f9327,f362])).
fof(f11777,plain,(
  $false | ($spl128 | $spl190)),
  inference(subsumption_resolution,[],[f10248,f9327])).
fof(f10248,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f8517,f9327,f9327,f362])).
fof(f11776,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10249,f9327])).
fof(f10249,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7504,f9327,f9327,f362])).
fof(f11775,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10250,f9327])).
fof(f10250,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8338,f9327,f9327,f362])).
fof(f11774,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10256,f9327])).
fof(f10256,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f650,f413,f9327,f365])).
fof(f11773,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10257,f9327])).
fof(f10257,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f543,f413,f9327,f365])).
fof(f11772,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10258,f9327])).
fof(f10258,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f652,f413,f9327,f365])).
fof(f11771,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10275,f9327])).
fof(f10275,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f536,f413,f9327,f365])).
fof(f11770,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10276,f9327])).
fof(f10276,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f650,f413,f9327,f365])).
fof(f11769,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10278,f9327])).
fof(f10278,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f652,f413,f9327,f365])).
fof(f11768,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10323,f10925])).
fof(f10925,plain,(
  ( ! [X0,X1] : (sP9('F_0',X0,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f443,f9327,f401])).
fof(f10323,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f366])).
fof(f11767,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10353,f10925])).
fof(f10353,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f367])).
fof(f11766,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10369,f10417])).
fof(f10417,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f375])).
fof(f10369,plain,(
  ~sP8('F_0','T_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f550,f413,f9327,f370])).
fof(f11765,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10385,f10417])).
fof(f10385,plain,(
  ~sP8('F_0','F_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f548,f413,f9327,f371])).
fof(f11764,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10413,f10417])).
fof(f10413,plain,(
  ( ! [X0] : (~sP8(X0,'F_0','F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f413,f9327,f373])).
fof(f11763,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10419,f227])).
fof(f10419,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f378])).
fof(f11762,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10422,f9327])).
fof(f10422,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6575,f9327,f378])).
fof(f6575,plain,(
  ~sP9('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0','F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f6561,f368])).
fof(f6561,plain,(
  ~sP8('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0','F_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f413,f6272])).
fof(f6272,plain,(
  ( ! [X43,X44] : (~sP8('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X43,X44) | p(s(bool,X44)) | p(s(bool,X43))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6207,f227])).
fof(f6207,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | p(s(bool,X44)) | ~sP8('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X43,X44)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f373,f6170])).
fof(f11761,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10423,f9327])).
fof(f10423,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6408,f9327,f378])).
fof(f11760,plain,(
  $false | ($spl132 | $spl190)),
  inference(subsumption_resolution,[],[f10424,f9327])).
fof(f10424,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl132 | $spl190)),
  inference(unit_resulting_resolution,[],[f8583,f9327,f378])).
fof(f8583,plain,(
  ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0','F_0') | $spl132),
  inference(unit_resulting_resolution,[],[f8548,f368])).
fof(f8548,plain,(
  ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0','F_0') | $spl132),
  inference(unit_resulting_resolution,[],[f413,f413,f6139])).
fof(f11759,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10425,f9327])).
fof(f10425,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1157,f9327,f378])).
fof(f11758,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10431,f227])).
fof(f10431,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f548,f9327,f378])).
fof(f11757,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10432,f9327])).
fof(f10432,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f550,f9327,f378])).
fof(f11756,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10441,f227])).
fof(f10441,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f379])).
fof(f11755,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10444,f9327])).
fof(f10444,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6575,f9327,f379])).
fof(f11754,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10445,f9327])).
fof(f10445,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6408,f9327,f379])).
fof(f11753,plain,(
  $false | ($spl132 | $spl190)),
  inference(subsumption_resolution,[],[f10446,f9327])).
fof(f10446,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl132 | $spl190)),
  inference(unit_resulting_resolution,[],[f8583,f9327,f379])).
fof(f11752,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10447,f9327])).
fof(f10447,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1157,f9327,f379])).
fof(f11751,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10453,f9327])).
fof(f10453,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f548,f9327,f379])).
fof(f11750,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10454,f227])).
fof(f10454,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f550,f9327,f379])).
fof(f11749,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10520,f10901])).
fof(f10901,plain,(
  ( ! [X0,X1] : (sP11('F_0',X0,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f447,f9327,f400])).
fof(f10520,plain,(
  ( ! [X0,X1] : (~sP11('F_0',X0,X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f384])).
fof(f11748,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10523,f9327])).
fof(f10523,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f447,f580,f9327,f387])).
fof(f11747,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10524,f9327])).
fof(f10524,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f445,f580,f9327,f387])).
fof(f11746,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10526,f9327])).
fof(f10526,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f466,f580,f9327,f387])).
fof(f11745,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10535,f10709])).
fof(f10709,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1,X2)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f392])).
fof(f10535,plain,(
  ~sP10('F_0','T_0','T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f580,f227,f9327,f387])).
fof(f11744,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10555,f10709])).
fof(f10555,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f576,f9327,f9327,f387])).
fof(f11743,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10557,f10709])).
fof(f10557,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f580,f9327,f9327,f387])).
fof(f11742,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10588,f10709])).
fof(f10588,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f576,f9327,f9327,f387])).
fof(f11741,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10589,f10709])).
fof(f10589,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f580,f9327,f9327,f387])).
fof(f11740,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10624,f10709])).
fof(f10624,plain,(
  ~sP10('F_0','F_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f576,f413,f9327,f388])).
fof(f11739,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10650,f10709])).
fof(f10650,plain,(
  ~sP10('F_0','F_0','F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f576,f413,f9327,f389])).
fof(f11738,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10680,f9327])).
fof(f10680,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f466,f413,f9327,f390])).
fof(f11737,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10681,f9327])).
fof(f10681,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f447,f413,f9327,f390])).
fof(f11736,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10682,f9327])).
fof(f10682,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f467,f413,f9327,f390])).
fof(f11735,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10685,f10709])).
fof(f10685,plain,(
  ( ! [X0,X1] : (~sP10(X0,'F_0',X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f413,f9327,f390])).
fof(f11734,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10701,f9327])).
fof(f10701,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f444,f413,f9327,f390])).
fof(f11733,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10702,f9327])).
fof(f10702,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f466,f413,f9327,f390])).
fof(f11732,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10704,f9327])).
fof(f10704,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f467,f413,f9327,f390])).
fof(f11731,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10705,f10709])).
fof(f10705,plain,(
  ( ! [X0] : (~sP10('T_0','F_0',X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f227,f413,f9327,f390])).
fof(f11730,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10707,f10709])).
fof(f10707,plain,(
  ( ! [X0,X1] : (~sP10(X0,'F_0',X1)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f413,f9327,f390])).
fof(f11729,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10742,f227])).
fof(f10742,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1209,f9327,f396])).
fof(f11728,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10743,f227])).
fof(f10743,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1238,f9327,f396])).
fof(f11727,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10744,f227])).
fof(f10744,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6626,f9327,f396])).
fof(f6626,plain,(
  ~sP11('T_0','F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f6614,f385])).
fof(f6614,plain,(
  ~sP10('T_0','F_0','const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f227,f6276])).
fof(f6276,plain,(
  ( ! [X52,X51] : (~sP10(X52,X51,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | ~p(s(bool,X52)) | p(s(bool,X51))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6211,f227])).
fof(f6211,plain,(
  ( ! [X52,X51] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | ~p(s(bool,X52)) | ~sP10(X52,X51,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f390,f6170])).
fof(f11726,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10745,f227])).
fof(f10745,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f7192,f9327,f396])).
fof(f11725,plain,(
  $false | ($spl140 | $spl190)),
  inference(subsumption_resolution,[],[f10746,f227])).
fof(f10746,plain,(
  ~p(s(bool,'T_0')) | ($spl140 | $spl190)),
  inference(unit_resulting_resolution,[],[f8657,f9327,f396])).
fof(f8657,plain,(
  ~sP11('T_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl140),
  inference(unit_resulting_resolution,[],[f8614,f385])).
fof(f8614,plain,(
  ~sP10('T_0','F_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl140),
  inference(unit_resulting_resolution,[],[f413,f227,f6143])).
fof(f11724,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10749,f9327])).
fof(f10749,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7566,f9327,f396])).
fof(f7566,plain,(
  ~sP11(f(s(bool,'T_0')),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl69),
  inference(unit_resulting_resolution,[],[f7549,f385])).
fof(f7549,plain,(
  ~sP10(f(s(bool,'T_0')),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5302])).
fof(f5302,plain,(
  ( ! [X46] : (~sP10(f(s(bool,'T_0')),X46,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X46))) ) | $spl69),
  inference(subsumption_resolution,[],[f5250,f227])).
fof(f5250,plain,(
  ( ! [X46] : (~p(s(bool,'T_0')) | p(s(bool,X46)) | ~sP10(f(s(bool,'T_0')),X46,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl69),
  inference(superposition,[],[f1205,f4786])).
fof(f11723,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10750,f9327])).
fof(f10750,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6650,f9327,f396])).
fof(f6650,plain,(
  ~sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0','T_0') | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f227,f413,f6279])).
fof(f6279,plain,(
  ( ! [X57,X58] : (~sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X58,X57) | p(s(bool,X58)) | ~p(s(bool,X57))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6214,f227])).
fof(f6214,plain,(
  ( ! [X57,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X57)) | p(s(bool,X58)) | ~sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X58,X57)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f397,f6170])).
fof(f11722,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10751,f9327])).
fof(f10751,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6432,f9327,f396])).
fof(f11721,plain,(
  $false | ($spl146 | $spl190)),
  inference(subsumption_resolution,[],[f10752,f9327])).
fof(f10752,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl146 | $spl190)),
  inference(unit_resulting_resolution,[],[f8689,f9327,f396])).
fof(f8689,plain,(
  ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'F_0','T_0') | $spl146),
  inference(unit_resulting_resolution,[],[f227,f413,f6146])).
fof(f11720,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10753,f9327])).
fof(f10753,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f8386,f9327,f396])).
fof(f8386,plain,(
  ~sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f8377,f385])).
fof(f8377,plain,(
  ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),'F_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6288])).
fof(f6288,plain,(
  ( ! [X72] : (~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X72,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X72))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6226,f227])).
fof(f6226,plain,(
  ( ! [X72] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X72,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f1205,f6170])).
fof(f11719,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10754,f9327])).
fof(f10754,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f1263,f9327,f396])).
fof(f11718,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10764,f9327])).
fof(f10764,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f576,f9327,f396])).
fof(f11717,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10765,f227])).
fof(f10765,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f580,f9327,f396])).
fof(f11716,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10776,f227])).
fof(f10776,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f588,f413,f9327,f397])).
fof(f11715,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10777,f227])).
fof(f10777,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f722,f413,f9327,f397])).
fof(f11714,plain,(
  $false | ($spl69 | $spl190)),
  inference(subsumption_resolution,[],[f10779,f9327])).
fof(f10779,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f8126,f413,f9327,f397])).
fof(f8126,plain,(
  ( ! [X0] : (sP11(f(s(bool,'T_0')),X0,'F_0')) ) | $spl69),
  inference(unit_resulting_resolution,[],[f413,f5291])).
fof(f5291,plain,(
  ( ! [X28,X27] : (sP11(f(s(bool,'T_0')),X28,X27) | p(s(bool,X27))) ) | $spl69),
  inference(subsumption_resolution,[],[f5236,f227])).
fof(f5236,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP11(f(s(bool,'T_0')),X28,X27)) ) | $spl69),
  inference(superposition,[],[f395,f4786])).
fof(f11713,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10780,f9327])).
fof(f10780,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f4208,f413,f9327,f397])).
fof(f11712,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10781,f9327])).
fof(f10781,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK14),s('type.integer.int',sK13)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f7700,f413,f9327,f397])).
fof(f11711,plain,(
  $false | ($spl142 | $spl190)),
  inference(subsumption_resolution,[],[f10782,f9327])).
fof(f10782,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl142 | $spl190)),
  inference(unit_resulting_resolution,[],[f7318,f413,f9327,f397])).
fof(f7318,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X0,'F_0')) ) | $spl142),
  inference(unit_resulting_resolution,[],[f413,f6144])).
fof(f11710,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10783,f9327])).
fof(f10783,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6426,f413,f9327,f397])).
fof(f6426,plain,(
  ( ! [X0] : (sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X0,'F_0')) ) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f413,f6277])).
fof(f6277,plain,(
  ( ! [X54,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X54,X53) | p(s(bool,X53))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6212,f227])).
fof(f6212,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X54,X53)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f395,f6170])).
fof(f11709,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10784,f9327])).
fof(f10784,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f7362,f413,f9327,f397])).
fof(f7362,plain,(
  ( ! [X0,X1] : (sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X0,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X1)))) ) | ($spl0 | $spl86)),
  inference(unit_resulting_resolution,[],[f466,f6280])).
fof(f6280,plain,(
  ( ! [X59,X60] : (sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X59,X60) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X59,X60)) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6215,f227])).
fof(f6215,plain,(
  ( ! [X59,X60] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X59,X60)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f400,f6170])).
fof(f11708,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10785,f9327])).
fof(f10785,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f594,f413,f9327,f397])).
fof(f11707,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10786,f9327])).
fof(f10786,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) | $spl190),
  inference(unit_resulting_resolution,[],[f6302,f413,f9327,f397])).
fof(f11706,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10787,f9327])).
fof(f10787,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f1180,f413,f9327,f397])).
fof(f11705,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10823,f9327])).
fof(f10823,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f722,f413,f9327,f397])).
fof(f11704,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10824,f227])).
fof(f10824,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1179,f413,f9327,f397])).
fof(f11703,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10827,f9327])).
fof(f10827,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f7700,f413,f9327,f397])).
fof(f11702,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(subsumption_resolution,[],[f10830,f9327])).
fof(f10830,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f7362,f413,f9327,f397])).
fof(f11701,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10832,f9327])).
fof(f10832,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f6302,f413,f9327,f397])).
fof(f11700,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10833,f227])).
fof(f10833,plain,(
  ~p(s(bool,'T_0')) | $spl190),
  inference(unit_resulting_resolution,[],[f1180,f413,f9327,f397])).
fof(f11699,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10883,f444])).
fof(f10883,plain,(
  ( ! [X0] : (~sP10('F_0',X0,'F_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f576,f9327,f400])).
fof(f11698,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10884,f445])).
fof(f10884,plain,(
  ( ! [X0] : (~sP10('F_0','T_0',X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f580,f9327,f400])).
fof(f11697,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10907,f439])).
fof(f10907,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'T_0')) ) | $spl190),
  inference(unit_resulting_resolution,[],[f548,f9327,f401])).
fof(f11696,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f10908,f441])).
fof(f10908,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',X0)) ) | $spl190),
  inference(unit_resulting_resolution,[],[f550,f9327,f401])).
fof(f11695,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11042,f9327])).
fof(f11042,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f1484])).
fof(f11694,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11045,f9327])).
fof(f11045,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1484])).
fof(f11693,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11052,f9327])).
fof(f11052,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f1485])).
fof(f11692,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11055,f9327])).
fof(f11055,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1485])).
fof(f11691,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11062,f9327])).
fof(f11062,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f1486])).
fof(f11690,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11065,f9327])).
fof(f11065,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1486])).
fof(f11689,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11069,f9327])).
fof(f11069,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f1487])).
fof(f11688,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11072,f9327])).
fof(f11072,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1487])).
fof(f11687,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11081,f9327])).
fof(f11081,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f1492])).
fof(f11686,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11084,f9327])).
fof(f11084,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1492])).
fof(f11685,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11095,f9327])).
fof(f11095,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f1655])).
fof(f11684,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11098,f9327])).
fof(f11098,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1655])).
fof(f11683,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11105,f9327])).
fof(f11105,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f1656])).
fof(f11682,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11108,f9327])).
fof(f11108,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1656])).
fof(f11681,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11115,f9327])).
fof(f11115,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f1657])).
fof(f11680,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11118,f9327])).
fof(f11118,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1657])).
fof(f11679,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11122,f9327])).
fof(f11122,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f1658])).
fof(f11678,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11125,f9327])).
fof(f11125,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1658])).
fof(f11677,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11134,f9327])).
fof(f11134,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f1663])).
fof(f11676,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11137,f9327])).
fof(f11137,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1663])).
fof(f11675,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11148,f9327])).
fof(f11148,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f1721])).
fof(f11674,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11151,f9327])).
fof(f11151,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1721])).
fof(f11673,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11158,f9327])).
fof(f11158,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f1722])).
fof(f11672,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11161,f9327])).
fof(f11161,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1722])).
fof(f11671,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11168,f9327])).
fof(f11168,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f1723])).
fof(f11670,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11171,f9327])).
fof(f11171,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1723])).
fof(f11669,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11175,f9327])).
fof(f11175,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f1724])).
fof(f11668,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11178,f9327])).
fof(f11178,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1724])).
fof(f11667,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11187,f9327])).
fof(f11187,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f1729])).
fof(f11666,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11190,f9327])).
fof(f11190,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',sK12))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1729])).
fof(f11665,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11391,f9327])).
fof(f11391,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1484])).
fof(f11664,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11402,f9327])).
fof(f11402,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1485])).
fof(f11663,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11413,f9327])).
fof(f11413,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1486])).
fof(f11662,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11421,f9327])).
fof(f11421,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1487])).
fof(f11661,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f11444,f9327])).
fof(f11444,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | $spl190),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1492])).
fof(f11660,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11481,f9327])).
fof(f11481,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1721])).
fof(f11659,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11492,f9327])).
fof(f11492,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1722])).
fof(f11658,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11503,f9327])).
fof(f11503,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1723])).
fof(f11657,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11511,f9327])).
fof(f11511,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1724])).
fof(f11656,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11534,f9327])).
fof(f11534,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1729])).
fof(f11655,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11556,f9327])).
fof(f11556,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f1655])).
fof(f11654,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11567,f9327])).
fof(f11567,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f1656])).
fof(f11653,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11578,f9327])).
fof(f11578,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f1657])).
fof(f11652,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11586,f9327])).
fof(f11586,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1658])).
fof(f11651,plain,(
  $false | ($spl0 | $spl190)),
  inference(subsumption_resolution,[],[f11609,f9327])).
fof(f11609,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) ) | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1663])).
fof(f11611,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1663])).
fof(f11608,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1663])).
fof(f11588,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1658])).
fof(f11585,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f9327,f413,f543,f9327,f1658])).
fof(f11580,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1657])).
fof(f11577,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1657])).
fof(f11569,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1656])).
fof(f11566,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1656])).
fof(f11558,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1655])).
fof(f11555,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1655])).
fof(f11536,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1729])).
fof(f11533,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1729])).
fof(f11513,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1724])).
fof(f11510,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f9327,f413,f543,f9327,f1724])).
fof(f11505,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1723])).
fof(f11502,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1723])).
fof(f11494,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1722])).
fof(f11491,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1722])).
fof(f11483,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1721])).
fof(f11480,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1721])).
fof(f11446,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1492])).
fof(f11443,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1492])).
fof(f11423,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1487])).
fof(f11420,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f413,f543,f9327,f1487])).
fof(f11415,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1486])).
fof(f11412,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1486])).
fof(f11404,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1485])).
fof(f11401,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1485])).
fof(f11393,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1484])).
fof(f11390,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1484])).
fof(f11354,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f7362,f9327,f6279])).
fof(f11352,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f6426,f9327,f6279])).
fof(f11349,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6650,f9327,f6278])).
fof(f6278,plain,(
  ( ! [X56,X55] : (sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X55,X56) | ~p(s(bool,X55))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6213,f227])).
fof(f6213,plain,(
  ( ! [X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X55)) | sP11('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X55,X56)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f396,f6170])).
fof(f11345,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f6276])).
fof(f11343,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f6276])).
fof(f11337,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6575,f9327,f6274])).
fof(f6274,plain,(
  ( ! [X47,X48] : (sP9('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X47,X48) | ~p(s(bool,X47))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6209,f227])).
fof(f6209,plain,(
  ( ! [X47,X48] : (~p(s(bool,'T_0')) | ~p(s(bool,X47)) | sP9('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X47,X48)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f379,f6170])).
fof(f11335,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6575,f9327,f6273])).
fof(f6273,plain,(
  ( ! [X45,X46] : (sP9('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X46,X45) | ~p(s(bool,X45))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6208,f227])).
fof(f6208,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | sP9('const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X46,X45)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f378,f6170])).
fof(f11333,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f6271])).
fof(f6271,plain,(
  ( ! [X41,X42] : (~sP7(X42,X41,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | p(s(bool,X42)) | ~p(s(bool,X41))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6206,f227])).
fof(f6206,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | ~p(s(bool,X41)) | p(s(bool,X42)) | ~sP7(X42,X41,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f365,f6170])).
fof(f11331,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f6271])).
fof(f11328,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f6270])).
fof(f11326,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f6270])).
fof(f11320,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f6269])).
fof(f6269,plain,(
  ( ! [X37,X38] : (~sP3(X37,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X38) | p(s(bool,X38)) | ~p(s(bool,X37))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6204,f227])).
fof(f6204,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | p(s(bool,X38)) | ~sP3(X37,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X38)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f337,f6170])).
fof(f11318,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f6269])).
fof(f11312,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f6268])).
fof(f6268,plain,(
  ( ! [X35,X36] : (~sP4(X35,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X36) | p(s(bool,X36)) | ~p(s(bool,X35))) ) | ($spl0 | $spl86)),
  inference(subsumption_resolution,[],[f6203,f227])).
fof(f6203,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | p(s(bool,X36)) | ~sP4(X35,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)),X36)) ) | ($spl0 | $spl86)),
  inference(superposition,[],[f333,f6170])).
fof(f11310,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f6268])).
fof(f11302,plain,(
  $false | ($spl142 | $spl146 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f7318,f9327,f6146])).
fof(f11299,plain,(
  $false | ($spl144 | $spl146 | $spl190)),
  inference(unit_resulting_resolution,[],[f8689,f9327,f6145])).
fof(f11295,plain,(
  $false | ($spl140 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f6143])).
fof(f11293,plain,(
  $false | ($spl140 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f6143])).
fof(f11287,plain,(
  $false | ($spl132 | $spl136 | $spl190)),
  inference(unit_resulting_resolution,[],[f8583,f9327,f6141])).
fof(f11285,plain,(
  $false | ($spl132 | $spl134 | $spl190)),
  inference(unit_resulting_resolution,[],[f8583,f9327,f6140])).
fof(f11283,plain,(
  $false | ($spl130 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f6138])).
fof(f11281,plain,(
  $false | ($spl130 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f6138])).
fof(f11278,plain,(
  $false | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f6137])).
fof(f11276,plain,(
  $false | ($spl128 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f6137])).
fof(f11270,plain,(
  $false | ($spl126 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f6136])).
fof(f11268,plain,(
  $false | ($spl126 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f6136])).
fof(f11262,plain,(
  $false | ($spl124 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f6135])).
fof(f11260,plain,(
  $false | ($spl124 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f6135])).
fof(f11253,plain,(
  $false | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f7566,f9327,f5292])).
fof(f5292,plain,(
  ( ! [X30,X29] : (sP11(f(s(bool,'T_0')),X29,X30) | ~p(s(bool,X29))) ) | $spl69),
  inference(subsumption_resolution,[],[f5237,f227])).
fof(f5237,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | sP11(f(s(bool,'T_0')),X29,X30)) ) | $spl69),
  inference(superposition,[],[f396,f4786])).
fof(f11249,plain,(
  $false | ($spl34 | $spl190)),
  inference(unit_resulting_resolution,[],[f588,f413,f9327,f2321])).
fof(f11242,plain,(
  $false | ($spl32 | $spl190)),
  inference(unit_resulting_resolution,[],[f1209,f9327,f2318])).
fof(f11240,plain,(
  $false | ($spl28 | $spl190)),
  inference(unit_resulting_resolution,[],[f447,f413,f9327,f2312])).
fof(f11231,plain,(
  $false | ($spl24 | $spl190)),
  inference(unit_resulting_resolution,[],[f1104,f9327,f2306])).
fof(f11229,plain,(
  $false | ($spl22 | $spl190)),
  inference(unit_resulting_resolution,[],[f1104,f9327,f2303])).
fof(f11227,plain,(
  $false | ($spl18 | $spl190)),
  inference(unit_resulting_resolution,[],[f543,f413,f9327,f2297])).
fof(f11220,plain,(
  $false | ($spl16 | $spl190)),
  inference(unit_resulting_resolution,[],[f438,f413,f9327,f2294])).
fof(f11213,plain,(
  $false | ($spl14 | $spl190)),
  inference(unit_resulting_resolution,[],[f428,f413,f9327,f2291])).
fof(f11206,plain,(
  $false | ($spl12 | $spl190)),
  inference(unit_resulting_resolution,[],[f424,f413,f9327,f2288])).
fof(f11192,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1729])).
fof(f11189,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1729])).
fof(f11180,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1724])).
fof(f11177,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f543,f9327,f1724])).
fof(f11173,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1723])).
fof(f11170,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1723])).
fof(f11163,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1722])).
fof(f11160,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1722])).
fof(f11153,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1721])).
fof(f11150,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1721])).
fof(f11139,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1663])).
fof(f11136,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1663])).
fof(f11127,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1658])).
fof(f11124,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f543,f9327,f1658])).
fof(f11120,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1657])).
fof(f11117,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1657])).
fof(f11110,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1656])).
fof(f11107,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1656])).
fof(f11100,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1655])).
fof(f11097,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1655])).
fof(f11086,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f467,f9327,f1492])).
fof(f11083,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f447,f9327,f1492])).
fof(f11074,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f652,f9327,f1487])).
fof(f11071,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f543,f9327,f1487])).
fof(f11067,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f464,f9327,f1486])).
fof(f11064,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f438,f9327,f1486])).
fof(f11057,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f462,f9327,f1485])).
fof(f11054,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f428,f9327,f1485])).
fof(f11047,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f460,f9327,f1484])).
fof(f11044,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327,f424,f9327,f1484])).
fof(f11032,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f6302,f9327,f1257])).
fof(f11030,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f594,f9327,f1257])).
fof(f11026,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f7700,f9327,f1256])).
fof(f11024,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f4208,f9327,f1256])).
fof(f11019,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1205])).
fof(f11017,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f1205])).
fof(f11009,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f467,f9327,f1204])).
fof(f11007,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f447,f9327,f1204])).
fof(f11001,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1014])).
fof(f10999,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f1014])).
fof(f10996,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f652,f9327,f1013])).
fof(f10994,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f543,f9327,f1013])).
fof(f10991,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f968])).
fof(f10989,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f968])).
fof(f10983,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f464,f9327,f967])).
fof(f10981,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f438,f9327,f967])).
fof(f10975,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f915])).
fof(f10973,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f915])).
fof(f10967,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f462,f9327,f914])).
fof(f10965,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f428,f9327,f914])).
fof(f10959,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f886])).
fof(f10957,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f886])).
fof(f10951,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f460,f9327,f885])).
fof(f10949,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f424,f9327,f885])).
fof(f10943,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f6432,f9327,f850])).
fof(f10941,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f6408,f9327,f848])).
fof(f10939,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f6408,f9327,f847])).
fof(f10937,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1263,f9327,f599])).
fof(f10935,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1157,f9327,f567])).
fof(f10933,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1157,f9327,f556])).
fof(f10926,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f443,f9327,f401])).
fof(f10924,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f442,f9327,f401])).
fof(f10922,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f457,f9327,f401])).
fof(f10920,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f550,f441,f9327,f401])).
fof(f10918,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f550,f456,f9327,f401])).
fof(f10916,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f550,f440,f9327,f401])).
fof(f10914,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f439,f9327,f401])).
fof(f10902,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f447,f9327,f400])).
fof(f10900,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f446,f9327,f400])).
fof(f10898,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f458,f9327,f400])).
fof(f10896,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f580,f445,f9327,f400])).
fof(f10894,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f580,f466,f9327,f400])).
fof(f10892,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f444,f9327,f400])).
fof(f10877,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f588,f413,f9327,f9327,f397])).
fof(f10850,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1179,f413,f227,f9327,f397])).
fof(f10821,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f588,f413,f9327,f9327,f397])).
fof(f10794,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f588,f413,f227,f9327,f397])).
fof(f10775,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1209,f9327,f9327,f396])).
fof(f10773,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f580,f227,f9327,f396])).
fof(f10758,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1209,f9327,f9327,f396])).
fof(f10756,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1209,f227,f9327,f396])).
fof(f10741,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f413,f9327,f395])).
fof(f10726,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f413,f413,f9327,f394])).
fof(f10710,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1195,f9327,f392])).
fof(f10708,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f444,f9327,f413,f9327,f390])).
fof(f10706,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f444,f227,f413,f9327,f390])).
fof(f10686,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f444,f9327,f413,f9327,f390])).
fof(f10684,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f447,f227,f413,f9327,f390])).
fof(f10661,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f447,f413,f9327,f389])).
fof(f10658,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f444,f413,f9327,f389])).
fof(f10635,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f447,f413,f9327,f388])).
fof(f10632,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f444,f413,f9327,f388])).
fof(f10607,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f447,f9327,f9327,f387])).
fof(f10605,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f446,f9327,f9327,f387])).
fof(f10603,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f458,f9327,f9327,f387])).
fof(f10601,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f580,f445,f9327,f9327,f387])).
fof(f10599,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f580,f466,f9327,f9327,f387])).
fof(f10597,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f576,f444,f9327,f9327,f387])).
fof(f10558,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f447,f580,f9327,f9327,f387])).
fof(f10556,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f447,f576,f9327,f9327,f387])).
fof(f10536,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f447,f580,f227,f9327,f387])).
fof(f10521,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1179,f413,f9327,f384])).
fof(f10494,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1072,f413,f413,f9327,f380])).
fof(f10462,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f9327,f379])).
fof(f10460,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f550,f227,f9327,f379])).
fof(f10451,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f9327,f379])).
fof(f10449,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f227,f9327,f379])).
fof(f10440,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f9327,f378])).
fof(f10438,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f227,f9327,f378])).
fof(f10429,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f9327,f9327,f378])).
fof(f10427,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1104,f227,f9327,f378])).
fof(f10418,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1089,f9327,f375])).
fof(f10416,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1089,f9327,f374])).
fof(f10414,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f443,f413,f413,f9327,f373])).
fof(f10395,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f443,f413,f9327,f371])).
fof(f10391,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f548,f439,f413,f9327,f371])).
fof(f10370,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f443,f550,f413,f9327,f370])).
fof(f10354,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1072,f413,f9327,f367])).
fof(f10324,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1072,f413,f9327,f366])).
fof(f10294,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f536,f413,f9327,f9327,f365])).
fof(f10285,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f536,f413,f227,f9327,f365])).
fof(f10274,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f536,f413,f9327,f9327,f365])).
fof(f10265,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f543,f413,f227,f9327,f365])).
fof(f10254,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f9327,f362])).
fof(f10252,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f532,f227,f9327,f9327,f362])).
fof(f10241,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f227,f9327,f362])).
fof(f10239,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f972,f227,f227,f9327,f362])).
fof(f10220,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f9327,f362])).
fof(f10218,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f9327,f9327,f362])).
fof(f10207,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f227,f9327,f362])).
fof(f10205,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f227,f9327,f362])).
fof(f10186,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f9327,f9327,f9327,f362])).
fof(f10184,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f529,f227,f9327,f9327,f362])).
fof(f10173,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f532,f9327,f227,f9327,f362])).
fof(f10171,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f532,f227,f227,f9327,f362])).
fof(f10156,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f958,f9327,f357])).
fof(f10154,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f413,f9327,f9327,f356])).
fof(f10145,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f413,f227,f9327,f356])).
fof(f10134,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f413,f9327,f9327,f356])).
fof(f10125,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f438,f413,f227,f9327,f356])).
fof(f10107,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f438,f532,f9327,f9327,f352])).
fof(f10105,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f529,f9327,f9327,f352])).
fof(f10091,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f529,f227,f9327,f352])).
fof(f10072,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f438,f532,f9327,f9327,f352])).
fof(f10070,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f437,f529,f9327,f9327,f352])).
fof(f10060,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f438,f532,f227,f9327,f352])).
fof(f10048,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f543,f413,f9327,f351])).
fof(f10039,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f536,f413,f9327,f350])).
fof(f10030,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1277,f470,f9327,f347])).
fof(f10028,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f761,f469,f9327,f347])).
fof(f10026,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1373,f470,f9327,f347])).
fof(f10024,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f762,f469,f9327,f347])).
fof(f9969,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1569,f491,f9327,f346])).
fof(f9964,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1699,f1468,f9327,f346])).
fof(f9961,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1633,f1458,f9327,f346])).
fof(f9959,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1452,f318,f9327,f346])).
fof(f9957,plain,(
  $false | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f5203,f4786,f9327,f346])).
fof(f9955,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6175,f6170,f9327,f346])).
fof(f9953,plain,(
  $false | ($spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6694,f6107,f9327,f346])).
fof(f9951,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f814,f474,f9327,f346])).
fof(f9949,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f791,f473,f9327,f346])).
fof(f9947,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1567,f491,f9327,f346])).
fof(f9942,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1697,f1468,f9327,f346])).
fof(f9939,plain,(
  $false | ($spl0 | $spl190)),
  inference(unit_resulting_resolution,[],[f1631,f1458,f9327,f346])).
fof(f9937,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1450,f318,f9327,f346])).
fof(f9935,plain,(
  $false | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f5201,f4786,f9327,f346])).
fof(f9933,plain,(
  $false | ($spl0 | $spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6173,f6170,f9327,f346])).
fof(f9931,plain,(
  $false | ($spl86 | $spl190)),
  inference(unit_resulting_resolution,[],[f6692,f6107,f9327,f346])).
fof(f9929,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f812,f474,f9327,f346])).
fof(f9927,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f789,f473,f9327,f346])).
fof(f11650,plain,(
  $false | $spl190),
  inference(trivial_inequality_removal,[],[f9906])).
fof(f9906,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl190),
  inference(unit_resulting_resolution,[],[f940,f9327,f346])).
fof(f11649,plain,(
  $false | $spl190),
  inference(trivial_inequality_removal,[],[f9900])).
fof(f9900,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl190),
  inference(unit_resulting_resolution,[],[f919,f9327,f346])).
fof(f9889,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f927,f9327,f344])).
fof(f9887,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f927,f9327,f343])).
fof(f9885,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f927,f9327,f342])).
fof(f9883,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f905,f9327,f338])).
fof(f9881,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f427,f413,f9327,f9327,f337])).
fof(f9872,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f427,f413,f227,f9327,f337])).
fof(f9861,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f427,f413,f9327,f9327,f337])).
fof(f9852,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f428,f413,f227,f9327,f337])).
fof(f9841,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f876,f9327,f334])).
fof(f9839,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f423,f413,f9327,f9327,f333])).
fof(f9825,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f423,f413,f227,f9327,f333])).
fof(f9809,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f423,f413,f9327,f9327,f333])).
fof(f9795,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f424,f413,f227,f9327,f333])).
fof(f9750,plain,(
  $false | ($spl69 | $spl190)),
  inference(unit_resulting_resolution,[],[f429,f427,f423,f4782,f9327,f330])).
fof(f9740,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f431,f425,f421,f1541,f9327,f330])).
fof(f9738,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f421,f1541,f9327,f330])).
fof(f9734,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f431,f425,f459,f1541,f9327,f330])).
fof(f9732,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f431,f461,f459,f1541,f9327,f330])).
fof(f9724,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f431,f427,f423,f782,f9327,f330])).
fof(f9571,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1310,f9327,f413,f9327,f329])).
fof(f9569,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1310,f227,f413,f9327,f329])).
fof(f9483,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f1310,f413,f9327,f9327,f329])).
fof(f9428,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f762,f413,f227,f9327,f329])).
fof(f9407,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f495,f413,f9327,f304])).
fof(f9403,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f495,f413,f9327,f301])).
fof(f9399,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f500,f9327,f9327,f300])).
fof(f9397,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f500,f227,f9327,f300])).
fof(f9379,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f500,f9327,f9327,f300])).
fof(f9377,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f508,f227,f9327,f300])).
fof(f9359,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f521,f9327,f286])).
fof(f9357,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f521,f9327,f285])).
fof(f9355,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f470,f9327,f279])).
fof(f9353,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f469,f9327,f279])).
fof(f9351,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f227,f470,f9327,f279])).
fof(f9349,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f227,f469,f9327,f279])).
fof(f9345,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f470,f9327,f279])).
fof(f9343,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f9327,f469,f9327,f279])).
fof(f9341,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f227,f470,f9327,f279])).
fof(f9339,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f227,f469,f9327,f279])).
fof(f9335,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f491,f9327,f249])).
fof(f9333,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f469,f9327,f246])).
fof(f9331,plain,(
  $false | $spl190),
  inference(unit_resulting_resolution,[],[f413,f9327])).
fof(f9329,plain,(
  ( ! [X85,X84,X82] : (sP1(X84,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X85)) ) | $spl192),
  inference(cnf_transformation,[],[f9329_D])).
fof(f9329_D,plain,(
  ( ! [X85,X84,X82] : (sP1(X84,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82))) | s(bool,'T_0') = s(bool,X85) | s(bool,X84) = s(bool,X85)) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f9328,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP1(X84,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82))) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f9319,f245])).
fof(f9319,plain,(
  ( ! [X85,X83,X84,X82] : (p(s(bool,X83)) | sP1(X84,'const.integer.int_lt_2'(s('type.integer.int',X82),s('type.integer.int',X82))) | s(bool,X84) = s(bool,X85) | s(bool,'T_0') = s(bool,X85) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f2344,f1784])).
fof(f9326,plain,(
  ( ! [X33,X32] : (sP1(X32,'F_0') | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X33)) ) | $spl188),
  inference(cnf_transformation,[],[f9326_D])).
fof(f9326_D,plain,(
  ( ! [X33,X32] : (sP1(X32,'F_0') | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X33)) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f9325,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X31)) | sP1(X32,'F_0') | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f9303,f245])).
fof(f9303,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X31)) | sP1(X32,'F_0') | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f2344,f236])).
fof(f6169,plain,(
  sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') | $spl186),
  inference(cnf_transformation,[],[f6169_D])).
fof(f6169_D,plain,(
  sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f6112,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | $spl94),
  inference(cnf_transformation,[],[f6112_D])).
fof(f6112_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f6102,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'T_0') | ($spl0 | $spl8)),
  inference(superposition,[],[f2281,f1639])).
fof(f6167,plain,(
  sP1('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl184),
  inference(cnf_transformation,[],[f6167_D])).
fof(f6167_D,plain,(
  sP1('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f6101,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP1('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f2277,f1639])).
fof(f6165,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X107),s('type.integer.int',X108)))) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X107))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X108)))),X109,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X109))) ) | $spl182),
  inference(cnf_transformation,[],[f6165_D])).
fof(f6165_D,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X107),s('type.integer.int',X108)))) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X107))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X108)))),X109,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X109))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f6113,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | $spl95),
  inference(cnf_transformation,[],[f6113_D])).
fof(f6113_D,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) <=> ~$spl95),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl95])])).
fof(f6100,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X107),s('type.integer.int',X108)))) | p(s(bool,X109)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X107))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X110),s('type.integer.int',X108)))),X109,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1495,f1639])).
fof(f6164,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X103),s('type.integer.int',X104)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X104)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X106)) ) | $spl180),
  inference(cnf_transformation,[],[f6164_D])).
fof(f6164_D,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X103),s('type.integer.int',X104)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X104)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X106)) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f6099,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X103),s('type.integer.int',X104)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X103))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X105),s('type.integer.int',X104)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X106)) ) | $spl0),
  inference(superposition,[],[f1494,f1639])).
fof(f6163,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,X99)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X99,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X101))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X100),s('type.integer.int',X101))))) ) | $spl178),
  inference(cnf_transformation,[],[f6163_D])).
fof(f6163_D,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,X99)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X99,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X101))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X100),s('type.integer.int',X101))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f6098,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X99)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X100),s('type.integer.int',X101)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X99,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X100))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X102),s('type.integer.int',X101)))))) ) | $spl0),
  inference(superposition,[],[f1492,f1639])).
fof(f6162,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X95),s('type.integer.int',X96)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X96)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98)) ) | $spl176),
  inference(cnf_transformation,[],[f6162_D])).
fof(f6162_D,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X95),s('type.integer.int',X96)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X96)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98)) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f6097,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X95),s('type.integer.int',X96)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X95))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X97),s('type.integer.int',X96)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X98)) ) | $spl0),
  inference(superposition,[],[f1490,f1639])).
fof(f6161,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X91),s('type.integer.int',X92)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X91))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X92)))),X94,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl174),
  inference(cnf_transformation,[],[f6161_D])).
fof(f6161_D,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X91),s('type.integer.int',X92)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X91))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X92)))),X94,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f6096,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X91),s('type.integer.int',X92)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X91))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X92)))),X94,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1489,f1639])).
fof(f6160,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X87),s('type.integer.int',X88)))) | ~sP7(X89,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X88))))) | p(s(bool,X89))) ) | $spl172),
  inference(cnf_transformation,[],[f6160_D])).
fof(f6160_D,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X87),s('type.integer.int',X88)))) | ~sP7(X89,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X88))))) | p(s(bool,X89))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f6095,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X87),s('type.integer.int',X88)))) | p(s(bool,X89)) | ~sP7(X89,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X90),s('type.integer.int',X88)))))) ) | $spl0),
  inference(superposition,[],[f1487,f1639])).
fof(f6159,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X83),s('type.integer.int',X84)))) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X84)))),X85) | p(s(bool,X85))) ) | $spl170),
  inference(cnf_transformation,[],[f6159_D])).
fof(f6159_D,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X83),s('type.integer.int',X84)))) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X84)))),X85) | p(s(bool,X85))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f6094,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X83),s('type.integer.int',X84)))) | p(s(bool,X85)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X83))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X86),s('type.integer.int',X84)))),X85)) ) | $spl0),
  inference(superposition,[],[f1486,f1639])).
fof(f6158,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X79),s('type.integer.int',X80)))) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X80)))),X81) | p(s(bool,X81))) ) | $spl168),
  inference(cnf_transformation,[],[f6158_D])).
fof(f6158_D,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X79),s('type.integer.int',X80)))) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X80)))),X81) | p(s(bool,X81))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f6093,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X79),s('type.integer.int',X80)))) | p(s(bool,X81)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X82),s('type.integer.int',X80)))),X81)) ) | $spl0),
  inference(superposition,[],[f1485,f1639])).
fof(f6157,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X75),s('type.integer.int',X76)))) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X76)))),X77) | p(s(bool,X77))) ) | $spl166),
  inference(cnf_transformation,[],[f6157_D])).
fof(f6157_D,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X75),s('type.integer.int',X76)))) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X76)))),X77) | p(s(bool,X77))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f6092,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X75),s('type.integer.int',X76)))) | p(s(bool,X77)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X75))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X76)))),X77)) ) | $spl0),
  inference(superposition,[],[f1484,f1639])).
fof(f6156,plain,(
  ( ! [X74] : (p(s(bool,X74)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X74,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl164),
  inference(cnf_transformation,[],[f6156_D])).
fof(f6156_D,plain,(
  ( ! [X74] : (p(s(bool,X74)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X74,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f6091,plain,(
  ( ! [X74] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X74)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X74,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl0),
  inference(superposition,[],[f1205,f1639])).
fof(f6155,plain,(
  ( ! [X73] : (p(s(bool,X73)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | $spl162),
  inference(cnf_transformation,[],[f6155_D])).
fof(f6155_D,plain,(
  ( ! [X73] : (p(s(bool,X73)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f6090,plain,(
  ( ! [X73] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X73)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | $spl0),
  inference(superposition,[],[f968,f1639])).
fof(f6154,plain,(
  ( ! [X72] : (p(s(bool,X72)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X72)) ) | $spl160),
  inference(cnf_transformation,[],[f6154_D])).
fof(f6154_D,plain,(
  ( ! [X72] : (p(s(bool,X72)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X72)) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f6089,plain,(
  ( ! [X72] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X72)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X72)) ) | $spl0),
  inference(superposition,[],[f915,f1639])).
fof(f6153,plain,(
  ( ! [X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | $spl158),
  inference(cnf_transformation,[],[f6153_D])).
fof(f6153_D,plain,(
  ( ! [X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f6088,plain,(
  ( ! [X71] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | $spl0),
  inference(superposition,[],[f886,f1639])).
fof(f6103,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl82),
  inference(cnf_transformation,[],[f6103_D])).
fof(f6103_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f6105,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | $spl84),
  inference(cnf_transformation,[],[f6105_D])).
fof(f6105_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f6086,plain,(
  ( ! [X69] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,X69) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f674,f1639])).
fof(f6107,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl86),
  inference(cnf_transformation,[],[f6107_D])).
fof(f6107_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f6108,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,X2)) ) | $spl88),
  inference(cnf_transformation,[],[f6108_D])).
fof(f6108_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f6085,plain,(
  ( ! [X68] : (s(bool,X68) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X68)) ) | $spl0),
  inference(superposition,[],[f674,f1639])).
fof(f6084,plain,(
  ( ! [X67] : (s(bool,X67) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f674,f1639])).
fof(f6083,plain,(
  ( ! [X66] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,X66) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f674,f1639])).
fof(f6151,plain,(
  ( ! [X65] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X65)) ) | $spl156),
  inference(cnf_transformation,[],[f6151_D])).
fof(f6151_D,plain,(
  ( ! [X65] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X65)) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f6082,plain,(
  ( ! [X65] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X65)) ) | $spl0),
  inference(superposition,[],[f599,f1639])).
fof(f6150,plain,(
  ( ! [X64] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X64)) ) | $spl154),
  inference(cnf_transformation,[],[f6150_D])).
fof(f6150_D,plain,(
  ( ! [X64] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X64)) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f6081,plain,(
  ( ! [X64] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X64)) ) | $spl0),
  inference(superposition,[],[f567,f1639])).
fof(f6149,plain,(
  ( ! [X63] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X63,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl152),
  inference(cnf_transformation,[],[f6149_D])).
fof(f6149_D,plain,(
  ( ! [X63] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X63,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f6080,plain,(
  ( ! [X63] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X63,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f556,f1639])).
fof(f6148,plain,(
  ( ! [X61,X62] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62)) ) | $spl150),
  inference(cnf_transformation,[],[f6148_D])).
fof(f6148_D,plain,(
  ( ! [X61,X62] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62)) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f6079,plain,(
  ( ! [X61,X62] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X61,X62)) ) | $spl0),
  inference(superposition,[],[f401,f1639])).
fof(f6147,plain,(
  ( ! [X59,X60] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | $spl148),
  inference(cnf_transformation,[],[f6147_D])).
fof(f6147_D,plain,(
  ( ! [X59,X60] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f6078,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | $spl0),
  inference(superposition,[],[f400,f1639])).
fof(f6146,plain,(
  ( ! [X57,X58] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X58,X57) | p(s(bool,X58)) | ~p(s(bool,X57))) ) | $spl146),
  inference(cnf_transformation,[],[f6146_D])).
fof(f6146_D,plain,(
  ( ! [X57,X58] : (~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X58,X57) | p(s(bool,X58)) | ~p(s(bool,X57))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f6077,plain,(
  ( ! [X57,X58] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X57)) | p(s(bool,X58)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X58,X57)) ) | $spl0),
  inference(superposition,[],[f397,f1639])).
fof(f6145,plain,(
  ( ! [X56,X55] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X55,X56) | ~p(s(bool,X55))) ) | $spl144),
  inference(cnf_transformation,[],[f6145_D])).
fof(f6145_D,plain,(
  ( ! [X56,X55] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X55,X56) | ~p(s(bool,X55))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f6076,plain,(
  ( ! [X56,X55] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X55)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X55,X56)) ) | $spl0),
  inference(superposition,[],[f396,f1639])).
fof(f6144,plain,(
  ( ! [X54,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X54,X53) | p(s(bool,X53))) ) | $spl142),
  inference(cnf_transformation,[],[f6144_D])).
fof(f6144_D,plain,(
  ( ! [X54,X53] : (sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X54,X53) | p(s(bool,X53))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f6075,plain,(
  ( ! [X54,X53] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X54,X53)) ) | $spl0),
  inference(superposition,[],[f395,f1639])).
fof(f6143,plain,(
  ( ! [X52,X51] : (~sP10(X52,X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X52)) | p(s(bool,X51))) ) | $spl140),
  inference(cnf_transformation,[],[f6143_D])).
fof(f6143_D,plain,(
  ( ! [X52,X51] : (~sP10(X52,X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X52)) | p(s(bool,X51))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f6074,plain,(
  ( ! [X52,X51] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X51)) | ~p(s(bool,X52)) | ~sP10(X52,X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f390,f1639])).
fof(f6142,plain,(
  ( ! [X50,X49] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X50,X49) | p(s(bool,X50)) | p(s(bool,X49))) ) | $spl138),
  inference(cnf_transformation,[],[f6142_D])).
fof(f6142_D,plain,(
  ( ! [X50,X49] : (~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X50,X49) | p(s(bool,X50)) | p(s(bool,X49))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f6073,plain,(
  ( ! [X50,X49] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X49)) | p(s(bool,X50)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X50,X49)) ) | $spl0),
  inference(superposition,[],[f380,f1639])).
fof(f6141,plain,(
  ( ! [X47,X48] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X47,X48) | ~p(s(bool,X47))) ) | $spl136),
  inference(cnf_transformation,[],[f6141_D])).
fof(f6141_D,plain,(
  ( ! [X47,X48] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X47,X48) | ~p(s(bool,X47))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f6072,plain,(
  ( ! [X47,X48] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X47)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X47,X48)) ) | $spl0),
  inference(superposition,[],[f379,f1639])).
fof(f6140,plain,(
  ( ! [X45,X46] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X46,X45) | ~p(s(bool,X45))) ) | $spl134),
  inference(cnf_transformation,[],[f6140_D])).
fof(f6140_D,plain,(
  ( ! [X45,X46] : (sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X46,X45) | ~p(s(bool,X45))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f6071,plain,(
  ( ! [X45,X46] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X45)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X46,X45)) ) | $spl0),
  inference(superposition,[],[f378,f1639])).
fof(f6139,plain,(
  ( ! [X43,X44] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X43,X44) | p(s(bool,X43)) | p(s(bool,X44))) ) | $spl132),
  inference(cnf_transformation,[],[f6139_D])).
fof(f6139_D,plain,(
  ( ! [X43,X44] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X43,X44) | p(s(bool,X43)) | p(s(bool,X44))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f6070,plain,(
  ( ! [X43,X44] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X43)) | p(s(bool,X44)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X43,X44)) ) | $spl0),
  inference(superposition,[],[f373,f1639])).
fof(f6138,plain,(
  ( ! [X41,X42] : (~sP7(X42,X41,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X42)) | ~p(s(bool,X41))) ) | $spl130),
  inference(cnf_transformation,[],[f6138_D])).
fof(f6138_D,plain,(
  ( ! [X41,X42] : (~sP7(X42,X41,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X42)) | ~p(s(bool,X41))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f6069,plain,(
  ( ! [X41,X42] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X41)) | p(s(bool,X42)) | ~sP7(X42,X41,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f365,f1639])).
fof(f6137,plain,(
  ( ! [X39,X40] : (~sP6(X39,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X40) | ~p(s(bool,X39)) | p(s(bool,X40))) ) | $spl128),
  inference(cnf_transformation,[],[f6137_D])).
fof(f6137_D,plain,(
  ( ! [X39,X40] : (~sP6(X39,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X40) | ~p(s(bool,X39)) | p(s(bool,X40))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f6068,plain,(
  ( ! [X39,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X39)) | p(s(bool,X40)) | ~sP6(X39,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X40)) ) | $spl0),
  inference(superposition,[],[f356,f1639])).
fof(f6136,plain,(
  ( ! [X37,X38] : (~sP3(X37,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X38) | ~p(s(bool,X37)) | p(s(bool,X38))) ) | $spl126),
  inference(cnf_transformation,[],[f6136_D])).
fof(f6136_D,plain,(
  ( ! [X37,X38] : (~sP3(X37,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X38) | ~p(s(bool,X37)) | p(s(bool,X38))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f6067,plain,(
  ( ! [X37,X38] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X37)) | p(s(bool,X38)) | ~sP3(X37,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X38)) ) | $spl0),
  inference(superposition,[],[f337,f1639])).
fof(f6135,plain,(
  ( ! [X35,X36] : (~sP4(X35,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X36) | ~p(s(bool,X35)) | p(s(bool,X36))) ) | $spl124),
  inference(cnf_transformation,[],[f6135_D])).
fof(f6135_D,plain,(
  ( ! [X35,X36] : (~sP4(X35,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X36) | ~p(s(bool,X35)) | p(s(bool,X36))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f6066,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~p(s(bool,X35)) | p(s(bool,X36)) | ~sP4(X35,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X36)) ) | $spl0),
  inference(superposition,[],[f333,f1639])).
fof(f6134,plain,(
  ( ! [X33,X34] : (sP5(X33,X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34,X33) | ~sP3(X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X33) | ~sP4(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34)) ) | $spl122),
  inference(cnf_transformation,[],[f6134_D])).
fof(f6134_D,plain,(
  ( ! [X33,X34] : (sP5(X33,X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34,X33) | ~sP3(X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X33) | ~sP4(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f6065,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP5(X33,X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X33,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34) | ~sP3(X34,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X33) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X34,X33)) ) | $spl0),
  inference(superposition,[],[f330,f1639])).
fof(f6133,plain,(
  ( ! [X32] : (sP1(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X32))) ) | $spl120),
  inference(cnf_transformation,[],[f6133_D])).
fof(f6133_D,plain,(
  ( ! [X32] : (sP1(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X32))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f6064,plain,(
  ( ! [X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X32)) | sP1(X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f304,f1639])).
fof(f6132,plain,(
  ( ! [X31] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X31) | p(s(bool,X31))) ) | $spl118),
  inference(cnf_transformation,[],[f6132_D])).
fof(f6132_D,plain,(
  ( ! [X31] : (sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X31) | p(s(bool,X31))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f6063,plain,(
  ( ! [X31] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X31)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X31)) ) | $spl0),
  inference(superposition,[],[f301,f1639])).
fof(f6131,plain,(
  ( ! [X30] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30)) ) | $spl116),
  inference(cnf_transformation,[],[f6131_D])).
fof(f6131_D,plain,(
  ( ! [X30] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30)) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f6062,plain,(
  ( ! [X30] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30)) ) | $spl0),
  inference(superposition,[],[f286,f1639])).
fof(f6130,plain,(
  ( ! [X29] : (sP0(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl114),
  inference(cnf_transformation,[],[f6130_D])).
fof(f6130_D,plain,(
  ( ! [X29] : (sP0(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f6061,plain,(
  ( ! [X29] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP0(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f285,f1639])).
fof(f6110,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | $spl90),
  inference(cnf_transformation,[],[f6110_D])).
fof(f6110_D,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f6053,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl0),
  inference(superposition,[],[f236,f1639])).
fof(f6122,plain,(
  ( ! [X24,X23,X25] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25)) ) | $spl112),
  inference(cnf_transformation,[],[f6122_D])).
fof(f6122_D,plain,(
  ( ! [X24,X23,X25] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f6052,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X24,X25)) ) | $spl0),
  inference(superposition,[],[f1497,f1639])).
fof(f6121,plain,(
  ( ! [X21,X22,X20] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22)) ) | $spl110),
  inference(cnf_transformation,[],[f6121_D])).
fof(f6121_D,plain,(
  ( ! [X21,X22,X20] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22)) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f6051,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X21,X22)) ) | $spl0),
  inference(superposition,[],[f1496,f1639])).
fof(f6120,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X19,X17)) ) | $spl108),
  inference(cnf_transformation,[],[f6120_D])).
fof(f6120_D,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X19,X17)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f6050,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X17)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X19,X17)) ) | $spl0),
  inference(superposition,[],[f1493,f1639])).
fof(f6119,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,X14)) | p(s(bool,X15)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X15,X14)) ) | $spl106),
  inference(cnf_transformation,[],[f6119_D])).
fof(f6119_D,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,X14)) | p(s(bool,X15)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X15,X14)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f6049,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X14)) | p(s(bool,X15)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X15,X14)) ) | $spl0),
  inference(superposition,[],[f1491,f1639])).
fof(f6118,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11,X12) | p(s(bool,X12))) ) | $spl104),
  inference(cnf_transformation,[],[f6118_D])).
fof(f6118_D,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11,X12) | p(s(bool,X12))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f6048,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X11)) | p(s(bool,X12)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X11,X12)) ) | $spl0),
  inference(superposition,[],[f1488,f1639])).
fof(f6117,plain,(
  ( ! [X10,X8,X9] : (sP5(X8,X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9,X8) | ~sP3(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X8) | ~sP4(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9)) ) | $spl102),
  inference(cnf_transformation,[],[f6117_D])).
fof(f6117_D,plain,(
  ( ! [X10,X8,X9] : (sP5(X8,X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9,X8) | ~sP3(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X8) | ~sP4(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f6047,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP5(X8,X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) | ~sP4(X8,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9) | ~sP3(X9,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X8) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X9,X8)) ) | $spl0),
  inference(superposition,[],[f1483,f1639])).
fof(f6116,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl100),
  inference(cnf_transformation,[],[f6116_D])).
fof(f6116_D,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f6046,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X6)) | sP1(X6,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl0),
  inference(superposition,[],[f1482,f1639])).
fof(f6115,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X4)) ) | $spl98),
  inference(cnf_transformation,[],[f6115_D])).
fof(f6115_D,plain,(
  ( ! [X4,X5] : (p(s(bool,X4)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X4)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f6045,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | p(s(bool,X4)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X4)) ) | $spl0),
  inference(superposition,[],[f1481,f1639])).
fof(f6114,plain,(
  ( ! [X2,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X3)) ) | $spl96),
  inference(cnf_transformation,[],[f6114_D])).
fof(f6114_D,plain,(
  ( ! [X2,X3] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X3)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f6044,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),X3)) ) | $spl0),
  inference(superposition,[],[f1480,f1639])).
fof(f6111,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl92),
  inference(cnf_transformation,[],[f6111_D])).
fof(f6111_D,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f6043,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12)))) | sP0(X0,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl0),
  inference(superposition,[],[f1479,f1639])).
fof(f6042,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl0),
  inference(superposition,[],[f1639,f236])).
fof(f6041,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl0),
  inference(superposition,[],[f1639,f674])).
fof(f6040,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f1639,f674])).
fof(f6039,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,X1) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f1639,f674])).
fof(f6038,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',sK12),s('type.integer.int',sK12))) | s(bool,X0) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1639,f674])).
fof(f5653,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0') | p(s(bool,X3))) ) | $spl80),
  inference(cnf_transformation,[],[f5653_D])).
fof(f5653_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0') | p(s(bool,X3))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f2278,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f2278_D])).
fof(f2278_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f5655,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0')) )),
  inference(condensation,[],[f5654])).
fof(f5654,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38,'T_0') | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5638,f736])).
fof(f5638,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38,'T_0') | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1495,f674])).
fof(f5652,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3,'T_0')) )),
  inference(condensation,[],[f5651])).
fof(f5651,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32,'T_0') | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5637,f736])).
fof(f5637,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32,'T_0') | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1495,f674])).
fof(f5599,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) ) | $spl78),
  inference(cnf_transformation,[],[f5599_D])).
fof(f5599_D,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f5601,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f5600])).
fof(f5600,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (p(s(bool,X36)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X37),s('type.integer.int',X38)))) | ~sP10('T_0',X36,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X38))))) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5584,f736])).
fof(f5584,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | p(s(bool,X36)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X37),s('type.integer.int',X38)))) | ~sP10('T_0',X36,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X38))))) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1492,f674])).
fof(f5598,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X3)))) | ~sP10('T_0',X1,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X3)))))) )),
  inference(condensation,[],[f5597])).
fof(f5597,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (p(s(bool,X30)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X31),s('type.integer.int',X32)))) | ~sP10('T_0',X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X32))))) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5583,f736])).
fof(f5583,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | p(s(bool,X30)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X31),s('type.integer.int',X32)))) | ~sP10('T_0',X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X32))))) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1492,f674])).
fof(f5390,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | p(s(bool,X3))) ) | $spl76),
  inference(cnf_transformation,[],[f5390_D])).
fof(f5390_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2))))) | p(s(bool,X3))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f5392,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f5391])).
fof(f5391,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP7(X38,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37))))) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5375,f736])).
fof(f5375,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP7(X38,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37))))) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1487,f674])).
fof(f5389,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP7(X3,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))))) )),
  inference(condensation,[],[f5388])).
fof(f5388,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP7(X32,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31))))) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5374,f736])).
fof(f5374,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP7(X32,'T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31))))) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1487,f674])).
fof(f5339,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | $spl74),
  inference(cnf_transformation,[],[f5339_D])).
fof(f5339_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f5341,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5340])).
fof(f5340,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5324,f736])).
fof(f5324,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1486,f674])).
fof(f5338,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5337])).
fof(f5337,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5323,f736])).
fof(f5323,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP6('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1486,f674])).
fof(f5194,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | $spl72),
  inference(cnf_transformation,[],[f5194_D])).
fof(f5194_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f5196,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5195])).
fof(f5195,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5180,f736])).
fof(f5180,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1485,f674])).
fof(f5193,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5192])).
fof(f5192,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5179,f736])).
fof(f5179,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP3('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1485,f674])).
fof(f5143,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) | $spl70),
  inference(cnf_transformation,[],[f5143_D])).
fof(f5143_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3) | p(s(bool,X3))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5145,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5144])).
fof(f5144,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f5129,f736])).
fof(f5129,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | p(s(bool,X38)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X37)))),X38) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1484,f674])).
fof(f5142,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,X3)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X4),s('type.integer.int',X2)))),X3)) )),
  inference(condensation,[],[f5141])).
fof(f5141,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f5128,f736])).
fof(f5128,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | p(s(bool,X32)) | ~sP4('T_0','const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X33),s('type.integer.int',X31)))),X32) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1484,f674])).
fof(f4771,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK15(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X0,X1,bool,bool))))) ) | $spl66),
  inference(cnf_transformation,[],[f4771_D])).
fof(f4771_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK15(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X0,X1,bool,bool))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f4773,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl69),
  inference(cnf_transformation,[],[f4773_D])).
fof(f4773_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f4761,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X3,X4,bool,bool)))) | s(bool,X5) = s(bool,sK15(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1523,f674])).
fof(f4760,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK15(X0,X1,bool,bool)))) | s(bool,X2) = s(bool,sK15(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1523,f674])).
fof(f4556,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | $spl64),
  inference(cnf_transformation,[],[f4556_D])).
fof(f4556_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f4558,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) )),
  inference(condensation,[],[f4557])).
fof(f4557,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),'T_0',X39) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f4545,f736])).
fof(f4545,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),'T_0',X39) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1494,f674])).
fof(f4555,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) )),
  inference(condensation,[],[f4554])).
fof(f4554,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),'T_0',X33) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f4544,f736])).
fof(f4544,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),'T_0',X33) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1494,f674])).
fof(f4447,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) | $spl62),
  inference(cnf_transformation,[],[f4447_D])).
fof(f4447_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f4449,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) )),
  inference(condensation,[],[f4448])).
fof(f4448,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),'T_0',X39) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f4436,f736])).
fof(f4436,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),'T_0',X39) | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1490,f674])).
fof(f4446,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),'T_0',X4)) )),
  inference(condensation,[],[f4445])).
fof(f4445,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),'T_0',X33) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f4435,f736])).
fof(f4435,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),'T_0',X33) | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1490,f674])).
fof(f4407,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) ) | $spl60),
  inference(cnf_transformation,[],[f4407_D])).
fof(f4407_D,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f4409,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) )),
  inference(condensation,[],[f4408])).
fof(f4408,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),X39,'T_0') | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f4396,f736])).
fof(f4396,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,X35)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X36),s('type.integer.int',X37)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X38),s('type.integer.int',X37)))),X39,'T_0') | s(bool,X35) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1489,f674])).
fof(f4406,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))),X4,'T_0')) )),
  inference(condensation,[],[f4405])).
fof(f4405,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),X33,'T_0') | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f4395,f736])).
fof(f4395,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,X29)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X30),s('type.integer.int',X31)))) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X30))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X32),s('type.integer.int',X31)))),X33,'T_0') | s(bool,X29) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1489,f674])).
fof(f4354,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl54),
  inference(cnf_transformation,[],[f4354_D])).
fof(f4354_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4350,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool))) ) | $spl50),
  inference(cnf_transformation,[],[f4350_D])).
fof(f4350_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4357,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl59),
  inference(cnf_transformation,[],[f4357_D])).
fof(f4357_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f4348,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK15(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1522,f236])).
fof(f4355,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl56),
  inference(cnf_transformation,[],[f4355_D])).
fof(f4355_D,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f4347,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK15(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1522,f674])).
fof(f4346,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK15(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1522,f674])).
fof(f4349,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl48),
  inference(cnf_transformation,[],[f4349_D])).
fof(f4349_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4352,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(cnf_transformation,[],[f4352_D])).
fof(f4352_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f4345,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,sK15(X3,X4,bool,bool)) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f1522,f674])).
fof(f4344,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool,bool)) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1522,f674])).
fof(f2688,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2687,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2635,plain,(
  ( ! [X144,X142,X145,X143] : (p(s(bool,X145)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2482,f227])).
fof(f2482,plain,(
  ( ! [X144,X142,X145,X143] : (~p(s(bool,'T_0')) | p(s(bool,X145)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X143))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X142),s('type.integer.int',X144)))),X145,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1504])).
fof(f2633,plain,(
  ( ! [X140,X138,X141,X139] : (p(s(bool,X141)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X139))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X140)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X141)) ) | $spl6),
  inference(subsumption_resolution,[],[f2481,f227])).
fof(f2481,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'T_0')) | p(s(bool,X141)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X139))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X138),s('type.integer.int',X140)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X141)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1503])).
fof(f2631,plain,(
  ( ! [X134,X136,X135,X137] : (p(s(bool,X137)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X137)) ) | $spl6),
  inference(subsumption_resolution,[],[f2480,f227])).
fof(f2480,plain,(
  ( ! [X134,X136,X135,X137] : (~p(s(bool,'T_0')) | p(s(bool,X137)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X135))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X134),s('type.integer.int',X136)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X137)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1502])).
fof(f2629,plain,(
  ( ! [X132,X130,X133,X131] : (p(s(bool,X133)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X131))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X132)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X133)) ) | $spl6),
  inference(subsumption_resolution,[],[f2479,f227])).
fof(f2479,plain,(
  ( ! [X132,X130,X133,X131] : (~p(s(bool,'T_0')) | p(s(bool,X133)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X131))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X130),s('type.integer.int',X132)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X133)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1501])).
fof(f2627,plain,(
  ( ! [X127,X128,X126,X129] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X127))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X128)))),X129)) ) | $spl6),
  inference(subsumption_resolution,[],[f2478,f227])).
fof(f2478,plain,(
  ( ! [X127,X128,X126,X129] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X127))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X126),s('type.integer.int',X128)))),X129)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1500])).
fof(f2625,plain,(
  ( ! [X125,X123,X124,X122] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X125)) ) | $spl6),
  inference(subsumption_resolution,[],[f2477,f227])).
fof(f2477,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X123))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X122),s('type.integer.int',X124)))),X125)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1499])).
fof(f2623,plain,(
  ( ! [X121,X118,X120,X119] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X119))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X120)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2476,f227])).
fof(f2476,plain,(
  ( ! [X121,X118,X120,X119] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X121,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X119))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X118),s('type.integer.int',X120)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1498])).
fof(f2621,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117)) ) | $spl6),
  inference(subsumption_resolution,[],[f2475,f227])).
fof(f2475,plain,(
  ( ! [X116,X114,X117,X115,X113] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X114))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X113),s('type.integer.int',X115)))),X116,X117)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1497])).
fof(f2619,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112)) ) | $spl6),
  inference(subsumption_resolution,[],[f2474,f227])).
fof(f2474,plain,(
  ( ! [X111,X109,X112,X110,X108] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X108),s('type.integer.int',X110)))),X111,X112)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1496])).
fof(f2617,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,X106)) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X104))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X105)))),X107,X106)) ) | $spl6),
  inference(subsumption_resolution,[],[f2473,f227])).
fof(f2473,plain,(
  ( ! [X103,X107,X105,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,X106)) | p(s(bool,X107)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X104))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X103),s('type.integer.int',X105)))),X107,X106)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1495])).
fof(f2615,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,X101)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X99))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X100)))),X101,X102)) ) | $spl6),
  inference(subsumption_resolution,[],[f2472,f227])).
fof(f2472,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,'T_0')) | ~p(s(bool,X101)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X99))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X98),s('type.integer.int',X100)))),X101,X102)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1494])).
fof(f2613,plain,(
  ( ! [X94,X97,X95,X93,X96] : (p(s(bool,X96)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X95)))),X97,X96)) ) | $spl6),
  inference(subsumption_resolution,[],[f2471,f227])).
fof(f2471,plain,(
  ( ! [X94,X97,X95,X93,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X93),s('type.integer.int',X95)))),X97,X96)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1493])).
fof(f2611,plain,(
  ( ! [X92,X90,X88,X91,X89] : (p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP10(X92,X91,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X90)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2470,f227])).
fof(f2470,plain,(
  ( ! [X92,X90,X88,X91,X89] : (~p(s(bool,'T_0')) | p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP10(X92,X91,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X89))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X88),s('type.integer.int',X90)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1492])).
fof(f2609,plain,(
  ( ! [X87,X85,X83,X86,X84] : (p(s(bool,X86)) | p(s(bool,X87)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X85)))),X87,X86)) ) | $spl6),
  inference(subsumption_resolution,[],[f2469,f227])).
fof(f2469,plain,(
  ( ! [X87,X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,X86)) | p(s(bool,X87)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X84))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X83),s('type.integer.int',X85)))),X87,X86)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1491])).
fof(f2607,plain,(
  ( ! [X80,X78,X81,X79,X82] : (~p(s(bool,X81)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X80)))),X81,X82)) ) | $spl6),
  inference(subsumption_resolution,[],[f2468,f227])).
fof(f2468,plain,(
  ( ! [X80,X78,X81,X79,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X81)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X78),s('type.integer.int',X80)))),X81,X82)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1490])).
fof(f2605,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,X76)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X75)))),X77,X76)) ) | $spl6),
  inference(subsumption_resolution,[],[f2467,f227])).
fof(f2467,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X76)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X73),s('type.integer.int',X75)))),X77,X76)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1489])).
fof(f2603,plain,(
  ( ! [X70,X68,X72,X71,X69] : (p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70)))),X71,X72)) ) | $spl6),
  inference(subsumption_resolution,[],[f2466,f227])).
fof(f2466,plain,(
  ( ! [X70,X68,X72,X71,X69] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | p(s(bool,X72)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X69))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X68),s('type.integer.int',X70)))),X71,X72)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1488])).
fof(f2601,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,X66)) | p(s(bool,X67)) | ~sP7(X67,X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X65)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2465,f227])).
fof(f2465,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,'T_0')) | ~p(s(bool,X66)) | p(s(bool,X67)) | ~sP7(X67,X66,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X63),s('type.integer.int',X65)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1487])).
fof(f2599,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,X61)) | p(s(bool,X62)) | ~sP6(X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X60)))),X62)) ) | $spl6),
  inference(subsumption_resolution,[],[f2464,f227])).
fof(f2464,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X61)) | p(s(bool,X62)) | ~sP6(X61,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X59))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X58),s('type.integer.int',X60)))),X62)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1486])).
fof(f2597,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP3(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))),X57)) ) | $spl6),
  inference(subsumption_resolution,[],[f2463,f227])).
fof(f2463,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP3(X56,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X54))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X53),s('type.integer.int',X55)))),X57)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1485])).
fof(f2595,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,X51)) | p(s(bool,X52)) | ~sP4(X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X50)))),X52)) ) | $spl6),
  inference(subsumption_resolution,[],[f2462,f227])).
fof(f2462,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X51)) | p(s(bool,X52)) | ~sP4(X51,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X48),s('type.integer.int',X50)))),X52)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1484])).
fof(f2593,plain,(
  ( ! [X47,X45,X43,X46,X44] : (sP5(X46,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45))))) | ~sP4(X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47) | ~sP3(X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X46) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47,X46)) ) | $spl6),
  inference(subsumption_resolution,[],[f2461,f227])).
fof(f2461,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'T_0')) | sP5(X46,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45))))) | ~sP4(X46,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47) | ~sP3(X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X46) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X44))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X43),s('type.integer.int',X45)))),X47,X46)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1483])).
fof(f2591,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X42)) | sP1(X42,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X41)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2460,f227])).
fof(f2460,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X42)) | sP1(X42,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X39),s('type.integer.int',X41)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1482])).
fof(f2589,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,X38)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X37)))),X38)) ) | $spl6),
  inference(subsumption_resolution,[],[f2459,f227])).
fof(f2459,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X38)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X36))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X35),s('type.integer.int',X37)))),X38)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1481])).
fof(f2587,plain,(
  ( ! [X33,X31,X34,X32] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X33)))),X34)) ) | $spl6),
  inference(subsumption_resolution,[],[f2458,f227])).
fof(f2458,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X32))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X31),s('type.integer.int',X33)))),X34)) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1480])).
fof(f2585,plain,(
  ( ! [X30,X28,X29,X27] : (sP0(X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X29)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2457,f227])).
fof(f2457,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'T_0')) | sP0(X30,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X27),s('type.integer.int',X29)))))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f1479])).
fof(f2526,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f2416,f2278])).
fof(f2416,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f2278,f249])).
fof(f2687,plain,(
  ( ! [X76,X77] : (p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2516,f227])).
fof(f2516,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1741])).
fof(f2686,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2685,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2685,plain,(
  ( ! [X74,X75] : (p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2515,f227])).
fof(f2515,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1740])).
fof(f2684,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2683,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2683,plain,(
  ( ! [X72,X73] : (p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2514,f227])).
fof(f2514,plain,(
  ( ! [X72,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1739])).
fof(f2682,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2681,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2681,plain,(
  ( ! [X70,X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2513,f227])).
fof(f2513,plain,(
  ( ! [X70,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1738])).
fof(f2680,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2679,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2679,plain,(
  ( ! [X68,X69] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X69)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2512,f227])).
fof(f2512,plain,(
  ( ! [X68,X69] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X69)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1737])).
fof(f2678,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2677,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2677,plain,(
  ( ! [X66,X67] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X67)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2511,f227])).
fof(f2511,plain,(
  ( ! [X66,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X67)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1736])).
fof(f2676,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2675,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2675,plain,(
  ( ! [X64,X65] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2510,f227])).
fof(f2510,plain,(
  ( ! [X64,X65] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1735])).
fof(f2674,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2673,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2673,plain,(
  ( ! [X61,X62,X63] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2509,f227])).
fof(f2509,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X62,X63)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1734])).
fof(f2672,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2671,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2671,plain,(
  ( ! [X59,X60,X58] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2508,f227])).
fof(f2508,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X59,X60)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1733])).
fof(f2670,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2669,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2669,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2507,f227])).
fof(f2507,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X57,X56)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1732])).
fof(f2668,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2667,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2667,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X53,X54)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2506,f227])).
fof(f2506,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X53,X54)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1731])).
fof(f2666,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2665,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2665,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,X50)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X51,X50)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2505,f227])).
fof(f2505,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X51,X50)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1730])).
fof(f2664,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2663,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2663,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2504,f227])).
fof(f2504,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1729])).
fof(f2662,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2661,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2661,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,X44)) | p(s(bool,X45)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X45,X44)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2503,f227])).
fof(f2503,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | p(s(bool,X45)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X45,X44)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1728])).
fof(f2660,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2659,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2659,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X41)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X41,X42)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2502,f227])).
fof(f2502,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X41)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X41,X42)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1727])).
fof(f2658,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2657,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2657,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X38)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X39,X38)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2501,f227])).
fof(f2501,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X39,X38)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1726])).
fof(f2656,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2655,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2655,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | p(s(bool,X36)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X35,X36)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2500,f227])).
fof(f2500,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | p(s(bool,X35)) | p(s(bool,X36)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X35,X36)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1725])).
fof(f2654,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2653,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2653,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2499,f227])).
fof(f2499,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1724])).
fof(f2652,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2651,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2651,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X29)) | p(s(bool,X30)) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2498,f227])).
fof(f2498,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | p(s(bool,X30)) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X30)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1723])).
fof(f2650,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2649,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2649,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X26)) | p(s(bool,X27)) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X27)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2497,f227])).
fof(f2497,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X26)) | p(s(bool,X27)) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X27)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1722])).
fof(f2648,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2647,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2647,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X23)) | p(s(bool,X24)) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X24)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2496,f227])).
fof(f2496,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | p(s(bool,X24)) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X24)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1721])).
fof(f2646,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2645,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2645,plain,(
  ( ! [X21,X19,X20] : (sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21,X20)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2495,f227])).
fof(f2495,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X21,X20)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1720])).
fof(f2644,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2643,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2643,plain,(
  ( ! [X17,X18] : (p(s(bool,X18)) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2494,f227])).
fof(f2494,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1719])).
fof(f2642,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2641,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2641,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X16)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2493,f227])).
fof(f2493,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X16)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X16)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1718])).
fof(f2640,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2639,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2639,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X14)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2492,f227])).
fof(f2492,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),X14)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1717])).
fof(f2638,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2637,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2637,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2491,f227])).
fof(f2491,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1716])).
fof(f2636,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633,f2635])).
fof(f2634,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631,f2633])).
fof(f2632,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629,f2631])).
fof(f2630,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627,f2629])).
fof(f2628,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625,f2627])).
fof(f2626,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623,f2625])).
fof(f2624,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621,f2623])).
fof(f2622,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619,f2621])).
fof(f2620,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617,f2619])).
fof(f2618,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615,f2617])).
fof(f2616,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613,f2615])).
fof(f2614,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611,f2613])).
fof(f2612,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609,f2611])).
fof(f2610,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607,f2609])).
fof(f2608,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605,f2607])).
fof(f2606,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603,f2605])).
fof(f2604,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601,f2603])).
fof(f2602,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599,f2601])).
fof(f2600,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597,f2599])).
fof(f2598,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595,f2597])).
fof(f2596,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593,f2595])).
fof(f2594,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591,f2593])).
fof(f2592,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589,f2591])).
fof(f2590,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587,f2589])).
fof(f2588,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585,f2587])).
fof(f2586,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526,f2585])).
fof(f2580,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2579,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2579,plain,(
  ( ! [X76,X77] : (p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76)))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2453,f227])).
fof(f2453,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | p(s(bool,X77)) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X76)))),X77,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1675])).
fof(f2578,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2577,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2577,plain,(
  ( ! [X74,X75] : (p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2452,f227])).
fof(f2452,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~sP6('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X74)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X75)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1674])).
fof(f2576,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2575,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2575,plain,(
  ( ! [X72,X73] : (p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2451,f227])).
fof(f2451,plain,(
  ( ! [X72,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | ~sP3('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X72)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X73)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1673])).
fof(f2574,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2573,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2573,plain,(
  ( ! [X70,X71] : (p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2450,f227])).
fof(f2450,plain,(
  ( ! [X70,X71] : (~p(s(bool,'T_0')) | p(s(bool,X71)) | ~sP4('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X70)))),'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X71)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1672])).
fof(f2572,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2571,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2571,plain,(
  ( ! [X68,X69] : (sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68)))),X69)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2449,f227])).
fof(f2449,plain,(
  ( ! [X68,X69] : (~p(s(bool,'T_0')) | sP11('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X68)))),X69)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1671])).
fof(f2570,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2569,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2569,plain,(
  ( ! [X66,X67] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66)))),X67)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2448,f227])).
fof(f2448,plain,(
  ( ! [X66,X67] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X66)))),X67)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1670])).
fof(f2568,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2567,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2567,plain,(
  ( ! [X64,X65] : (sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2447,f227])).
fof(f2447,plain,(
  ( ! [X64,X65] : (~p(s(bool,'T_0')) | sP9('const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X65,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X64)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1669])).
fof(f2566,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2565,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2565,plain,(
  ( ! [X61,X62,X63] : (~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2446,f227])).
fof(f2446,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X61)))),X62,X63)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1668])).
fof(f2564,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2563,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2563,plain,(
  ( ! [X59,X60,X58] : (~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2445,f227])).
fof(f2445,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~sP10('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X58)))),X59,X60)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1667])).
fof(f2562,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2561,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2561,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,X56)) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55)))),X57,X56)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2444,f227])).
fof(f2444,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | p(s(bool,X57)) | ~sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X55)))),X57,X56)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1666])).
fof(f2560,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2559,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2559,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52)))),X53,X54)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2443,f227])).
fof(f2443,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X53)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X52)))),X53,X54)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1665])).
fof(f2558,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2557,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2557,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,X50)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49)))),X51,X50)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2442,f227])).
fof(f2442,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | sP11('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X49)))),X51,X50)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1664])).
fof(f2556,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2555,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2555,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2441,f227])).
fof(f2441,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | ~p(s(bool,X48)) | ~sP10(X48,X47,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X46)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1663])).
fof(f2554,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2553,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2553,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,X44)) | p(s(bool,X45)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43)))),X45,X44)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2440,f227])).
fof(f2440,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | p(s(bool,X44)) | p(s(bool,X45)) | ~sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X43)))),X45,X44)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1662])).
fof(f2552,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2551,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2551,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X41)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40)))),X41,X42)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2439,f227])).
fof(f2439,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X41)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X40)))),X41,X42)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1661])).
fof(f2550,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2549,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2549,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X38)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37)))),X39,X38)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2438,f227])).
fof(f2438,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | sP9('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X37)))),X39,X38)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1660])).
fof(f2548,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2547,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2547,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | p(s(bool,X36)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34)))),X35,X36)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2437,f227])).
fof(f2437,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | p(s(bool,X35)) | p(s(bool,X36)) | ~sP8('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X34)))),X35,X36)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1659])).
fof(f2546,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2545,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2545,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2436,f227])).
fof(f2436,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP7(X33,X32,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X31)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1658])).
fof(f2544,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2543,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2543,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X29)) | p(s(bool,X30)) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28)))),X30)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2435,f227])).
fof(f2435,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | p(s(bool,X30)) | ~sP6(X29,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X28)))),X30)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1657])).
fof(f2542,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2541,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2541,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X26)) | p(s(bool,X27)) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25)))),X27)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2434,f227])).
fof(f2434,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X26)) | p(s(bool,X27)) | ~sP3(X26,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X25)))),X27)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1656])).
fof(f2540,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2539,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2539,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X23)) | p(s(bool,X24)) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22)))),X24)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2433,f227])).
fof(f2433,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | p(s(bool,X24)) | ~sP4(X23,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X22)))),X24)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1655])).
fof(f2538,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2537,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2537,plain,(
  ( ! [X21,X19,X20] : (sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21,X20)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2432,f227])).
fof(f2432,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP5(X20,X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19))))) | ~sP4(X20,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21) | ~sP3(X21,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X20) | ~sP2('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X19)))),X21,X20)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1654])).
fof(f2536,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2535,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2535,plain,(
  ( ! [X17,X18] : (p(s(bool,X18)) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2431,f227])).
fof(f2431,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | sP1(X18,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X17)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1653])).
fof(f2534,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2533,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2533,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15)))),X16)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2430,f227])).
fof(f2430,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X16)) | sP1('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X15)))),X16)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1652])).
fof(f2532,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2531,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2531,plain,(
  ( ! [X14,X13] : (sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13)))),X14)) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2429,f227])).
fof(f2429,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X13)))),X14)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1651])).
fof(f2530,plain,(
  $false | ($spl0 | $spl6)),
  inference(global_subsumption,[],[f2529,f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2529,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11)))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f2428,f227])).
fof(f2428,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',X11)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f2278,f1650])).
fof(f2528,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f2418,f227])).
fof(f2418,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f2278,f413])).
fof(f2527,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f418,f417,f420,f419,f422,f421,f423,f424,f426,f425,f427,f428,f430,f429,f432,f431,f434,f433,f436,f435,f437,f438,f440,f439,f442,f441,f443,f444,f446,f445,f447,f458,f457,f456,f455,f454,f453,f452,f451,f450,f449,f448,f467,f466,f465,f464,f463,f462,f461,f460,f459,f470,f469,f474,f473,f491,f495,f496,f500,f502,f505,f508,f510,f521,f528,f529,f532,f536,f543,f548,f550,f554,f556,f560,f562,f565,f567,f576,f577,f579,f580,f588,f590,f594,f597,f599,f618,f617,f620,f623,f625,f640,f639,f637,f636,f642,f652,f650,f674,f722,f736,f762,f761,f770,f769,f782,f780,f791,f789,f815,f814,f813,f812,f845,f846,f847,f848,f849,f850,f851,f852,f853,f854,f855,f876,f885,f886,f905,f914,f915,f919,f927,f940,f946,f945,f944,f958,f967,f968,f972,f982,f995,f996,f1013,f1014,f1018,f1026,f1039,f1040,f1050,f1063,f1064,f1068,f1073,f1072,f1089,f1099,f1100,f1104,f1141,f1142,f1143,f1157,f1174,f1180,f1179,f1195,f1204,f1205,f1209,f1220,f1233,f1234,f1238,f1256,f1257,f1263,f1283,f1282,f1279,f1278,f1277,f1275,f1274,f1272,f1271,f1269,f1268,f1267,f1289,f1291,f1329,f1328,f1325,f1324,f1322,f1321,f1320,f1312,f1311,f1310,f1375,f1374,f1373,f1371,f1370,f1361,f1351,f1350,f1390,f1391,f1396,f1397,f1415,f1441,f1453,f1452,f1451,f1450,f1459,f1469,f1470,f1479,f1480,f1481,f1482,f1483,f1484,f1485,f1486,f1487,f1488,f1489,f1490,f1491,f1492,f1493,f1494,f1495,f1496,f1497,f1498,f1499,f1500,f1501,f1502,f1503,f1504,f1522,f1523,f1541,f1538,f1569,f1568,f1567,f1784,f1797,f1822,f1840,f1851,f1916,f1917,f1968,f2276,f2280,f2284,f2287,f2290,f2293,f2296,f2299,f2302,f2305,f2308,f2311,f2314,f2317,f2320,f2323,f2326,f2329,f2332,f2335,f2338,f2340,f2341,f2342,f2343,f2344,f2345,f2346,f2347,f2348,f2349,f2350,f2351,f2352,f2353,f2354,f2355,f2356,f2357,f2358,f2359,f2360,f2361,f2362,f2363,f2364,f2365,f2366,f2367,f2368,f2050,f2051,f2374,f2376,f2379,f2381,f2383,f2385,f2387,f2389,f2391,f2393,f2395,f2397,f2399,f2401,f2403,f2405,f2407,f2409,f2411,f2413,f2415,f2278,f2526])).
fof(f2339,plain,(
  ( ! [X1] : (~sP10('T_0',X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X1))) ) | $spl46),
  inference(cnf_transformation,[],[f2339_D])).
fof(f2339_D,plain,(
  ( ! [X1] : (~sP10('T_0',X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | p(s(bool,X1))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2415,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(condensation,[],[f2414])).
fof(f2414,plain,(
  ( ! [X118,X120,X119] : (p(s(bool,X119)) | ~sP10('T_0',X119,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(subsumption_resolution,[],[f2087,f736])).
fof(f2087,plain,(
  ( ! [X118,X120,X119] : (~p(s(bool,X118)) | p(s(bool,X119)) | ~sP10('T_0',X119,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f1205,f674])).
fof(f2336,plain,(
  ( ! [X1] : (~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) | $spl44),
  inference(cnf_transformation,[],[f2336_D])).
fof(f2336_D,plain,(
  ( ! [X1] : (~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2413,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2412])).
fof(f2412,plain,(
  ( ! [X116,X117,X115] : (p(s(bool,X116)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X116) | s(bool,X115) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(subsumption_resolution,[],[f2086,f736])).
fof(f2086,plain,(
  ( ! [X116,X117,X115] : (~p(s(bool,X115)) | p(s(bool,X116)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X116) | s(bool,X115) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f968,f674])).
fof(f2333,plain,(
  ( ! [X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) | $spl42),
  inference(cnf_transformation,[],[f2333_D])).
fof(f2333_D,plain,(
  ( ! [X1] : (~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2411,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2410])).
fof(f2410,plain,(
  ( ! [X114,X112,X113] : (p(s(bool,X113)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f2085,f736])).
fof(f2085,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,X112)) | p(s(bool,X113)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f915,f674])).
fof(f2330,plain,(
  ( ! [X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) | $spl40),
  inference(cnf_transformation,[],[f2330_D])).
fof(f2330_D,plain,(
  ( ! [X1] : (~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1) | p(s(bool,X1))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2409,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2408])).
fof(f2408,plain,(
  ( ! [X111,X109,X110] : (p(s(bool,X110)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(subsumption_resolution,[],[f2084,f736])).
fof(f2084,plain,(
  ( ! [X111,X109,X110] : (~p(s(bool,X109)) | p(s(bool,X110)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f886,f674])).
fof(f2327,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) | $spl38),
  inference(cnf_transformation,[],[f2327_D])).
fof(f2327_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2407,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2406])).
fof(f2406,plain,(
  ( ! [X94,X95,X93,X96] : (~sP8('T_0',X94,X95) | sP9('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f2079,f736])).
fof(f2079,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,X93)) | ~sP8('T_0',X94,X95) | sP9('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f401,f674])).
fof(f2324,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~sP10('T_0',X1,X2)) ) | $spl36),
  inference(cnf_transformation,[],[f2324_D])).
fof(f2324_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~sP10('T_0',X1,X2)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2405,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP10('T_0',X1,X2) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2404])).
fof(f2404,plain,(
  ( ! [X92,X90,X91,X89] : (~sP10('T_0',X90,X91) | sP11('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f2078,f736])).
fof(f2078,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,X89)) | ~sP10('T_0',X90,X91) | sP11('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f400,f674])).
fof(f2321,plain,(
  ( ! [X2,X1] : (~sP11('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f2321_D])).
fof(f2321_D,plain,(
  ( ! [X2,X1] : (~sP11('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2403,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2402])).
fof(f2402,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP11('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f2077,f736])).
fof(f2077,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X85)) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP11('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f397,f674])).
fof(f2318,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f2318_D])).
fof(f2318_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2401,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2400])).
fof(f2400,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X82)) | sP11('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f2076,f736])).
fof(f2076,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X81)) | ~p(s(bool,X82)) | sP11('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f396,f674])).
fof(f2315,plain,(
  ( ! [X2,X1] : (sP11('T_0',X2,X1) | p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f2315_D])).
fof(f2315_D,plain,(
  ( ! [X2,X1] : (sP11('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2399,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2398])).
fof(f2398,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X78)) | sP11('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f2075,f736])).
fof(f2075,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,X77)) | p(s(bool,X78)) | sP11('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f395,f674])).
fof(f2312,plain,(
  ( ! [X2,X1] : (~sP10(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f2312_D])).
fof(f2312_D,plain,(
  ( ! [X2,X1] : (~sP10(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2397,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP10(X2,X1,'T_0')) )),
  inference(condensation,[],[f2396])).
fof(f2396,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,X74)) | ~p(s(bool,X75)) | ~sP10(X75,X74,'T_0') | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f2074,f736])).
fof(f2074,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | ~p(s(bool,X75)) | ~sP10(X75,X74,'T_0') | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f390,f674])).
fof(f2309,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl26),
  inference(cnf_transformation,[],[f2309_D])).
fof(f2309_D,plain,(
  ( ! [X2,X1] : (~sP9('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2395,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2394])).
fof(f2394,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X70)) | p(s(bool,X71)) | ~sP9('T_0',X71,X70) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f2073,f736])).
fof(f2073,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,X69)) | p(s(bool,X70)) | p(s(bool,X71)) | ~sP9('T_0',X71,X70) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f380,f674])).
fof(f2306,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f2306_D])).
fof(f2306_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2393,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2392])).
fof(f2392,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X66)) | sP9('T_0',X66,X67) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f2072,f736])).
fof(f2072,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X65)) | ~p(s(bool,X66)) | sP9('T_0',X66,X67) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f379,f674])).
fof(f2303,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl22),
  inference(cnf_transformation,[],[f2303_D])).
fof(f2303_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2391,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2390])).
fof(f2390,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X62)) | sP9('T_0',X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f2071,f736])).
fof(f2071,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X61)) | ~p(s(bool,X62)) | sP9('T_0',X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f378,f674])).
fof(f2300,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl20),
  inference(cnf_transformation,[],[f2300_D])).
fof(f2300_D,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2389,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2388])).
fof(f2388,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X58)) | p(s(bool,X59)) | ~sP8('T_0',X58,X59) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f2070,f736])).
fof(f2070,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X57)) | p(s(bool,X58)) | p(s(bool,X59)) | ~sP8('T_0',X58,X59) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f373,f674])).
fof(f2297,plain,(
  ( ! [X2,X1] : (~sP7(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl18),
  inference(cnf_transformation,[],[f2297_D])).
fof(f2297_D,plain,(
  ( ! [X2,X1] : (~sP7(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2387,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X2,X1,'T_0')) )),
  inference(condensation,[],[f2386])).
fof(f2386,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X54)) | p(s(bool,X55)) | ~sP7(X55,X54,'T_0') | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f2069,f736])).
fof(f2069,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | ~p(s(bool,X54)) | p(s(bool,X55)) | ~sP7(X55,X54,'T_0') | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f365,f674])).
fof(f2294,plain,(
  ( ! [X2,X1] : (~sP6(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl16),
  inference(cnf_transformation,[],[f2294_D])).
fof(f2294_D,plain,(
  ( ! [X2,X1] : (~sP6(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2385,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X1,'T_0',X2)) )),
  inference(condensation,[],[f2384])).
fof(f2384,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X50)) | p(s(bool,X51)) | ~sP6(X50,'T_0',X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f2068,f736])).
fof(f2068,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | ~p(s(bool,X50)) | p(s(bool,X51)) | ~sP6(X50,'T_0',X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f356,f674])).
fof(f2291,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl14),
  inference(cnf_transformation,[],[f2291_D])).
fof(f2291_D,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2383,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f2382])).
fof(f2382,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | p(s(bool,X47)) | ~sP3(X46,'T_0',X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f2067,f736])).
fof(f2067,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | p(s(bool,X47)) | ~sP3(X46,'T_0',X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f337,f674])).
fof(f2288,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl12),
  inference(cnf_transformation,[],[f2288_D])).
fof(f2288_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2381,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2380])).
fof(f2380,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | p(s(bool,X43)) | ~sP4(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f2066,f736])).
fof(f2066,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | p(s(bool,X43)) | ~sP4(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f333,f674])).
fof(f2285,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | sP5(X1,X2,'T_0')) ) | $spl10),
  inference(cnf_transformation,[],[f2285_D])).
fof(f2285_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | sP5(X1,X2,'T_0')) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2379,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2378,f433])).
fof(f2378,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | ~sP2('T_0',X2,X1)) )),
  inference(condensation,[],[f2377])).
fof(f2377,plain,(
  ( ! [X39,X37,X38,X40] : (sP5(X38,X39,'T_0') | ~sP4(X38,'T_0',X39) | ~sP3(X39,'T_0',X38) | ~sP2('T_0',X39,X38) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f2065,f736])).
fof(f2065,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X37)) | sP5(X38,X39,'T_0') | ~sP4(X38,'T_0',X39) | ~sP3(X39,'T_0',X38) | ~sP2('T_0',X39,X38) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f330,f674])).
fof(f2281,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl8),
  inference(cnf_transformation,[],[f2281_D])).
fof(f2281_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2376,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2375])).
fof(f2375,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f2064,f736])).
fof(f2064,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f304,f674])).
fof(f2277,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl4),
  inference(cnf_transformation,[],[f2277_D])).
fof(f2277_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f2374,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2373])).
fof(f2373,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f2063,f736])).
fof(f2063,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X31)) | p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f301,f674])).
fof(f2338,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP10('T_0',X1,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))))) )),
  inference(condensation,[],[f2337])).
fof(f2337,plain,(
  ( ! [X118,X120,X119] : (p(s(bool,X119)) | ~sP10('T_0',X119,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(subsumption_resolution,[],[f2003,f736])).
fof(f2003,plain,(
  ( ! [X118,X120,X119] : (~p(s(bool,X118)) | p(s(bool,X119)) | ~sP10('T_0',X119,'const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12))))) | s(bool,X118) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f1205,f674])).
fof(f2335,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2334])).
fof(f2334,plain,(
  ( ! [X116,X117,X115] : (p(s(bool,X116)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X116) | s(bool,X115) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(subsumption_resolution,[],[f2002,f736])).
fof(f2002,plain,(
  ( ! [X116,X117,X115] : (~p(s(bool,X115)) | p(s(bool,X116)) | ~sP6('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X116) | s(bool,X115) = s(bool,X117) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f968,f674])).
fof(f2332,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2331])).
fof(f2331,plain,(
  ( ! [X114,X112,X113] : (p(s(bool,X113)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f2001,f736])).
fof(f2001,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,X112)) | p(s(bool,X113)) | ~sP3('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X113) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) )),
  inference(superposition,[],[f915,f674])).
fof(f2329,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X1)) )),
  inference(condensation,[],[f2328])).
fof(f2328,plain,(
  ( ! [X111,X109,X110] : (p(s(bool,X110)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(subsumption_resolution,[],[f2000,f736])).
fof(f2000,plain,(
  ( ! [X111,X109,X110] : (~p(s(bool,X109)) | p(s(bool,X110)) | ~sP4('T_0','const.integer.int_lt_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK12)))),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f886,f674])).
fof(f2326,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2325])).
fof(f2325,plain,(
  ( ! [X94,X95,X93,X96] : (~sP8('T_0',X94,X95) | sP9('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f1995,f736])).
fof(f1995,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,X93)) | ~sP8('T_0',X94,X95) | sP9('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f401,f674])).
fof(f2323,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP10('T_0',X1,X2) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2322])).
fof(f2322,plain,(
  ( ! [X92,X90,X91,X89] : (~sP10('T_0',X90,X91) | sP11('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f1994,f736])).
fof(f1994,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,X89)) | ~sP10('T_0',X90,X91) | sP11('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f400,f674])).
fof(f2320,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2319])).
fof(f2319,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP11('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f1993,f736])).
fof(f1993,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X85)) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP11('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f397,f674])).
fof(f2317,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP11('T_0',X1,X2)) )),
  inference(condensation,[],[f2316])).
fof(f2316,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X82)) | sP11('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f1992,f736])).
fof(f1992,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X81)) | ~p(s(bool,X82)) | sP11('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f396,f674])).
fof(f2314,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP11('T_0',X2,X1)) )),
  inference(condensation,[],[f2313])).
fof(f2313,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X78)) | sP11('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f1991,f736])).
fof(f1991,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,X77)) | p(s(bool,X78)) | sP11('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f395,f674])).
fof(f2311,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP10(X2,X1,'T_0')) )),
  inference(condensation,[],[f2310])).
fof(f2310,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,X74)) | ~p(s(bool,X75)) | ~sP10(X75,X74,'T_0') | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f1990,f736])).
fof(f1990,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | ~p(s(bool,X75)) | ~sP10(X75,X74,'T_0') | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f390,f674])).
fof(f2308,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2307])).
fof(f2307,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X70)) | p(s(bool,X71)) | ~sP9('T_0',X71,X70) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f1989,f736])).
fof(f1989,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,X69)) | p(s(bool,X70)) | p(s(bool,X71)) | ~sP9('T_0',X71,X70) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f380,f674])).
fof(f2305,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2304])).
fof(f2304,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X66)) | sP9('T_0',X66,X67) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f1988,f736])).
fof(f1988,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X65)) | ~p(s(bool,X66)) | sP9('T_0',X66,X67) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f379,f674])).
fof(f2302,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2301])).
fof(f2301,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X62)) | sP9('T_0',X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f1987,f736])).
fof(f1987,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X61)) | ~p(s(bool,X62)) | sP9('T_0',X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f378,f674])).
fof(f2299,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP8('T_0',X1,X2)) )),
  inference(condensation,[],[f2298])).
fof(f2298,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,X58)) | p(s(bool,X59)) | ~sP8('T_0',X58,X59) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f1986,f736])).
fof(f1986,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X57)) | p(s(bool,X58)) | p(s(bool,X59)) | ~sP8('T_0',X58,X59) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f373,f674])).
fof(f2296,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP7(X2,X1,'T_0')) )),
  inference(condensation,[],[f2295])).
fof(f2295,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X54)) | p(s(bool,X55)) | ~sP7(X55,X54,'T_0') | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f1985,f736])).
fof(f1985,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | ~p(s(bool,X54)) | p(s(bool,X55)) | ~sP7(X55,X54,'T_0') | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f365,f674])).
fof(f2293,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X1,'T_0',X2)) )),
  inference(condensation,[],[f2292])).
fof(f2292,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X50)) | p(s(bool,X51)) | ~sP6(X50,'T_0',X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f1984,f736])).
fof(f1984,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | ~p(s(bool,X50)) | p(s(bool,X51)) | ~sP6(X50,'T_0',X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f356,f674])).
fof(f2290,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f2289])).
fof(f2289,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | p(s(bool,X47)) | ~sP3(X46,'T_0',X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f1983,f736])).
fof(f1983,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | p(s(bool,X47)) | ~sP3(X46,'T_0',X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f337,f674])).
fof(f2287,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f2286])).
fof(f2286,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | p(s(bool,X43)) | ~sP4(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f1982,f736])).
fof(f1982,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | p(s(bool,X43)) | ~sP4(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f333,f674])).
fof(f2284,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1)) )),
  inference(subsumption_resolution,[],[f2283,f433])).
fof(f2283,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP5(X1,X2,'T_0') | ~sP4(X1,'T_0',X2) | ~sP3(X2,'T_0',X1) | ~sP2('T_0',X2,X1)) )),
  inference(condensation,[],[f2282])).
fof(f2282,plain,(
  ( ! [X39,X37,X38,X40] : (sP5(X38,X39,'T_0') | ~sP4(X38,'T_0',X39) | ~sP3(X39,'T_0',X38) | ~sP2('T_0',X39,X38) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f1981,f736])).
fof(f1981,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X37)) | sP5(X38,X39,'T_0') | ~sP4(X38,'T_0',X39) | ~sP3(X39,'T_0',X38) | ~sP2('T_0',X39,X38) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f330,f674])).
fof(f2280,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f2279])).
fof(f2279,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f1980,f736])).
fof(f1980,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f304,f674])).
fof(f2276,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f2275])).
fof(f2275,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f1979,f736])).
fof(f1979,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X31)) | p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f301,f674])).
fof(f416,plain,(
  $false | $spl1),
  inference(global_subsumption,[],[f226,f225,f224,f223,f227,f229,f413,f235,f236,f246,f245,f250,f249,f272,f275,f279,f276,f286,f285,f414,f304,f301,f300,f299,f317,f318,f319,f332,f331,f330,f329,f328,f327,f326,f336,f335,f334,f333,f340,f339,f338,f337,f344,f343,f342,f341,f348,f347,f346,f345,f402,f352,f351,f350,f349,f359,f358,f357,f356,f365,f362,f361,f360,f372,f371,f370,f401,f368,f367,f366,f376,f375,f374,f373,f380,f379,f378,f377,f389,f388,f387,f400,f385,f384,f383,f393,f392,f391,f390,f397,f396,f395,f394,f410])).
fof(f415,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f411,f413])).
fof(f409,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) | $spl0),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f411,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f225,plain,(
  p(s(bool,'F_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12)))),
  inference(cnf_transformation,[],[f149])).
fof(f410,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) | $spl1),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f412,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f226,plain,(
  ~p(s(bool,'F_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK12)))),
  inference(cnf_transformation,[],[f149])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 693
% Passive clauses: 2530
% Generated clauses: 17306
% Final active clauses: 601
% Final passive clauses: 951
% Input formulas: 42
% Initial clauses: 177
% 
% Duplicate literals: 230
% Trivial inequalities: 31
% Fw subsumption resolutions: 1386
% Fw demodulations: 2213
% Bw demodulations: 744
% Condensations: 201
% Global subsumptions: 482
% 
% Simple tautologies: 75
% Equational tautologies: 105
% Forward subsumptions: 8809
% Fw demodulations to eq. taut.: 26
% Bw demodulations to eq. taut.: 18
% 
% Unit resulting resolution: 5734
% Factoring: 1
% Forward superposition: 3094
% Backward superposition: 2104
% Self superposition: 39
% Equality factoring: 30
% Equality resolution: 2
% 
% Split clauses: 130
% Split components: 265
% SAT solver clauses: 4362
% SAT solver unit clauses: 731
% SAT solver binary clauses: 1013
% 
% Sat splits: 130
% Sat splitting refutations: 1088
% 
% Memory used [KB]: 16247
% Time elapsed: 1.079 s
% ------------------------------
% ------------------------------
% Success in time 2.398 s
