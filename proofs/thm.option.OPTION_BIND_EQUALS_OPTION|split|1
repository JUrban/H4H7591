Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% (66612)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 137
% Passive clauses: 3775
% Generated clauses: 14893
% Final active clauses: 91
% Final passive clauses: 3092
% Input formulas: 34
% Initial clauses: 72
% 
% Duplicate literals: 809
% Trivial inequalities: 309
% Fw subsumption resolutions: 2375
% Fw demodulations: 526
% Bw demodulations: 22
% 
% Simple tautologies: 392
% Equational tautologies: 103
% Forward subsumptions: 5166
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 427
% Factoring: 2
% Forward superposition: 4337
% Backward superposition: 5530
% Self superposition: 329
% Equality factoring: 261
% Equality resolution: 31
% 
% Split clauses: 744
% Split components: 1568
% SAT solver clauses: 1649
% SAT solver unit clauses: 62
% SAT solver binary clauses: 480
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 2
% 
% Sat splits: 744
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 1576
% TWLsolver calls for satisfiability: 167
% 
% Memory used [KB]: 6012
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% (66636)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 154
% Passive clauses: 1209
% Generated clauses: 10837
% Final active clauses: 118
% Final passive clauses: 996
% Input formulas: 34
% Initial clauses: 72
% 
% Duplicate literals: 477
% Trivial inequalities: 181
% Fw subsumption resolutions: 772
% Fw demodulations: 963
% Bw demodulations: 62
% Condensations: 626
% Global subsumptions: 13
% 
% Simple tautologies: 160
% Equational tautologies: 32
% Forward subsumptions: 4351
% Fw demodulations to eq. taut.: 29
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 209
% Factoring: 2
% Forward superposition: 2935
% Backward superposition: 3045
% Self superposition: 114
% Equality factoring: 74
% Equality resolution: 48
% 
% Split clauses: 67
% Split components: 145
% SAT solver clauses: 1877
% SAT solver unit clauses: 86
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 28
% SAT solver learnt literals: 3
% 
% Sat splits: 67
% Sat splitting refutations: 22
% 
% TWLsolver clauses: 1823
% TWLsolver calls for satisfiability: 343
% 
% Memory used [KB]: 10490
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f34674,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f127,f202,f201,f126,f204,f125,f206,f200,f712,f715,f713,f812,f814,f848,f853,f854,f857,f860,f861,f866,f867,f1603,f1676,f1709,f1720,f1826,f1827,f1828,f1830,f1831,f1840,f1841,f1843,f1845,f1847,f1849,f1851,f1853,f1855,f1857,f4337,f4343,f4345,f4347,f4342,f4532,f4561,f4560,f5476,f5478,f5480,f5466,f5481,f5482,f5457,f5448,f5489,f5447,f5490,f5446,f5491,f5439,f5495,f5496,f5497,f5499,f5436,f5501,f5503,f5504,f5506,f5433,f5507,f5513,f5514,f5515,f5502,f5516,f5524,f5528,f5500,f5533,f5535,f5536,f5537,f5539,f5541,f5542,f5543,f5545,f5547,f5477,f5557,f5558,f5559,f5560,f5561,f5570,f5562,f5574,f5563,f5573,f5576,f5564,f5577,f5736,f5773,f5771,f5804,f5817,f5805,f5806,f5807,f5808,f5809,f5820,f5822,f5810,f5824,f5811,f5825,f5980,f5997,f6466,f6467,f6468,f6470,f6471,f6480,f6481,f6483,f6484,f6488,f6490,f6494,f6496,f6499,f6506,f6513,f6520,f6524,f6526,f6530,f6532,f6534,f6536,f6538,f6540,f6542,f6544,f6548,f6550,f6551,f6552,f6558,f6559,f5885,f6891,f6892,f6893,f6895,f6896,f6905,f6906,f6908,f6909,f6913,f6915,f6917,f6919,f6922,f6929,f6942,f6946,f6948,f6952,f6954,f6956,f6958,f6960,f6962,f6964,f6966,f6970,f6972,f6973,f6974,f6980,f6981,f7067,f7075,f7093,f7094,f7096,f7100,f7104,f7107,f7108,f7116,f7124,f7131,f7135,f7138,f7140,f7153,f7156,f7159,f7162,f7167,f7170,f7172,f7174,f7176,f7178,f7180,f7186,f7190,f7208,f7210,f7211,f7212,f7213,f7214,f7216,f7217,f7221,f7235,f7237,f7238,f7239,f7240,f7241,f7243,f7244,f7245,f7246,f7248,f7249,f7251,f7252,f7253,f7260,f7261,f7262,f7263,f7270,f7272,f7273,f7282,f7283,f7284,f7293,f7294,f7299,f7302,f7310,f7312,f7320,f7321,f7322,f7324,f7325,f7326,f7328,f7329,f7332,f7407,f7409,f7413,f7414,f7429,f7433,f7437,f7445,f7448,f7451,f7457,f7458,f7461,f7474,f7477,f7581,f7587,f7592,f7598,f7606,f7609,f7612,f7618,f7641,f7644,f7647,f7650,f7653,f7657,f7664,f7668,f7671,f7674,f7683,f7686,f8264,f8265,f8266,f8267,f8268,f8272,f5816,f8280,f8281,f8282,f8307,f8283,f5819,f5818,f8293,f5821,f8328,f8294,f8329,f5815,f8874,f8875,f8876,f8878,f8879,f8888,f8890,f8891,f8895,f8897,f8899,f8901,f8904,f8911,f8918,f8924,f8926,f8928,f8932,f8934,f8935,f8936,f8942,f8943,f8945,f8947,f8949,f8951,f8953,f8955,f8957,f8959,f8961,f8966,f8969,f9949,f10003,f14650,f14682,f14680,f17152,f17351,f18342,f18341,f18441,f18516,f18518,f18517,f18560,f18442,f19988,f19998,f19968,f20014,f19967,f20015,f19966,f20016,f19965,f20017,f19957,f20024,f20026,f20028,f19955,f20029,f20030,f20031,f19950,f20032,f19949,f19947,f20036,f19945,f20039,f19944,f19943,f19942,f19941,f19940,f20060,f19939,f20061,f19938,f20062,f20063,f20064,f20068,f20069,f20070,f20041,f20075,f20081,f20082,f20025,f20091,f20092,f20100,f20023,f20101,f20102,f20103,f20033,f20104,f20045,f20110,f20054,f20111,f20055,f20118,f20119,f20120,f20121,f20122,f20035,f20123,f20124,f20126,f20127,f20129,f20130,f20131,f20132,f20133,f20099,f20097,f20135,f20083,f19820,f20137,f20079,f20022,f19977,f20138,f20139,f20140,f19999,f19997,f20128,f20156,f14644,f20157,f20158,f14639,f14638,f14636,f20136,f12915,f5569,f5566,f20183,f14643,f20159,f20185,f12937,f20188,f5567,f20187,f20192,f12337,f20184,f20193,f5572,f20194,f20310,f20311,f20732,f20734,f20735,f20744,f20747,f20750,f20751,f20758,f20761,f20763,f20767,f20769,f20773,f20777,f20779,f20787,f20789,f20791,f20793,f20795,f20800,f20802,f20804,f20806,f20808,f20811,f20813,f20815,f20817,f20819,f20821,f20822,f20823,f20826,f20827,f20828,f20841,f20848,f20861,f20868,f20873,f20878,f20898,f20947,f21025,f21026,f21031,f21032,f21037,f21027,f21234,f21235,f21256,f21269,f21306,f21335,f21336,f21345,f21346,f21347,f21358,f21359,f21360,f21363,f21388,f21392,f21403,f21406,f21413,f21423,f21426,f21428,f21463,f21467,f21470,f21474,f21477,f21539,f21543,f21546,f21552,f21559,f21562,f21568,f21571,f21574,f21577,f21580,f21586,f21589,f21592,f21595,f21598,f21602,f21605,f21608,f21611,f21614,f21618,f21621,f21623,f21627,f21629,f21631,f21635,f21640,f21653,f21944,f21952,f21984,f21988,f21989,f21990,f21991,f21992,f21993,f21994,f21995,f21997,f21998,f21999,f22000,f22002,f22013,f22016,f22017,f22019,f22043,f22048,f22055,f22056,f22057,f22059,f22064,f22066,f22072,f22073,f22079,f22081,f22086,f22087,f22088,f22093,f22094,f22096,f22098,f22116,f22117,f22119,f22121,f22122,f22127,f22128,f22129,f22130,f22133,f22136,f22139,f22141,f22142,f22143,f22145,f22146,f22150,f22151,f22152,f22153,f22154,f22155,f22167,f22168,f22170,f22173,f22178,f22180,f22181,f22184,f22188,f22199,f22200,f22201,f22202,f22203,f22204,f22205,f22206,f22213,f22214,f22215,f22216,f22223,f22224,f22227,f22228,f22237,f22238,f22243,f22245,f22254,f22262,f22263,f22265,f22267,f22268,f22269,f22286,f22289,f22290,f22294,f22295,f22318,f22322,f22334,f22337,f22340,f22343,f22346,f22360,f22362,f22363,f22364,f22365,f22366,f22368,f22372,f22386,f22388,f22389,f22390,f22391,f22392,f22393,f22394,f22396,f22397,f22398,f22399,f22404,f22408,f22409,f22410,f22411,f22412,f22416,f22417,f22419,f22420,f22421,f22422,f22424,f22483,f22499,f22513,f22520,f22523,f22527,f22532,f22655,f22668,f22671,f22684,f22698,f22701,f22732,f22735,f22741,f22744,f22747,f22781,f22784,f22790,f22799,f22805,f22808,f22812,f22820,f22823,f22829,f22832,f22836,f22840,f22843,f22846,f22849,f22864,f22870,f22873,f22879,f22898,f22901,f22920,f22928,f22941,f22967,f20948,f20949,f23096,f21258,f21257,f23107,f23118,f1674,f21307,f23140,f23141,f23150,f23151,f23152,f23154,f23258,f24457,f25719,f25720,f25764,f26052,f26053,f26074,f26073,f27324,f27325,f27869,f27870,f25765,f27921,f28888,f24512,f29030,f29031,f29048,f29047,f29299,f29300,f30040,f30084,f30031,f30090,f30926,f30927,f31562,f31563,f31564,f714,f31565,f31566,f31567,f34310,f34326,f34324,f34480,f34481,f34482,f34483,f34484,f34492,f34493,f34494,f34495,f34503,f34504,f34507,f34508,f34509,f34510,f1719,f34672])).
fof(f34672,plain,(
  $false | ($spl2 | $spl225 | $spl226)),
  inference(subsumption_resolution,[],[f34669,f34326])).
fof(f34669,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) | ($spl2 | $spl225)),
  inference(unit_resulting_resolution,[],[f34511,f202])).
fof(f34511,plain,(
  s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK3,sK0)))) | $spl225),
  inference(unit_resulting_resolution,[],[f34323,f177])).
fof(f177,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X17] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X17) | ? [X11] : s('type.option.option'(X6),X17) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.option_nchotomy')).
fof(f34323,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK3) | $spl225),
  inference(cnf_transformation,[],[f34323_D])).
fof(f34323_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK3) <=> ~$spl225),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl225])])).
fof(f1719,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,X17)) ) | $spl16),
  inference(cnf_transformation,[],[f1719_D])).
fof(f1719_D,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,X17)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f34510,plain,(
  ( ! [X158,X157,X155] : (p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2)))) ) | $spl240),
  inference(cnf_transformation,[],[f34510_D])).
fof(f34510_D,plain,(
  ( ! [X158,X157,X155] : (p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2)))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f34509,plain,(
  ( ! [X158,X156,X157,X155] : (p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | s(bool,'T_0') = s(bool,X156)) ) | ($spl0 | $spl210)),
  inference(subsumption_resolution,[],[f5417,f29398])).
fof(f29398,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl210),
  inference(superposition,[],[f29300,f135])).
fof(f135,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1',aHL_BOOL_CASES)).
fof(f5417,plain,(
  ( ! [X158,X156,X157,X155] : (~p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X156)))) | p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | s(bool,'T_0') = s(bool,X156)) ) | $spl0),
  inference(superposition,[],[f187,f5126])).
fof(f5126,plain,(
  ( ! [X2,X1] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f5116,f128])).
fof(f128,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1',aHL_TRUTH)).
fof(f5116,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f5048,f220])).
fof(f220,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f135,f135])).
fof(f5048,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(sK1,bool),X6),s(sK1,sK2)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | $spl0),
  inference(forward_demodulation,[],[f5040,f5027])).
fof(f5027,plain,(
  s(sK1,sK2) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1)) | $spl0),
  inference(equality_resolution,[],[f5016])).
fof(f5016,plain,(
  ( ! [X22] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X22))) | s(sK1,X22) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5015,f182])).
fof(f182,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X11] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.NOT_NONE_SOME')).
fof(f5015,plain,(
  ( ! [X22] : (s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X22))) | s(sK1,X22) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1))) ) | $spl0),
  inference(forward_demodulation,[],[f4965,f200])).
fof(f4965,plain,(
  ( ! [X22] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X22))) | s(sK1,X22) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)))) ) | $spl0),
  inference(superposition,[],[f648,f200])).
fof(f648,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK6(X1,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f185,f177])).
fof(f185,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X11,X8] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) <=> s(X6,X8) = s(X6,X11))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.SOME_|49||49|')).
fof(f5040,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(sK1,bool),X6),s(sK1,sK2)))) | s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | $spl0),
  inference(superposition,[],[f188,f5027])).
fof(f188,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK7(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X15,X16] : (? [X11] : (s(X6,X11) = s(X6,X16) & p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X11))))) <=> p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X16)))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.bool.UNWIND_THM2')).
fof(f187,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f123])).
fof(f34508,plain,(
  ( ! [X161,X159] : (s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1))) ) | $spl238),
  inference(cnf_transformation,[],[f34508_D])).
fof(f34508_D,plain,(
  ( ! [X161,X159] : (s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f34507,plain,(
  ( ! [X161,X159,X160] : (s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | s(bool,'T_0') = s(bool,X160)) ) | ($spl0 | $spl210)),
  inference(subsumption_resolution,[],[f5418,f29398])).
fof(f5418,plain,(
  ( ! [X161,X159,X160] : (~p(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))) | s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | s(bool,'T_0') = s(bool,X160)) ) | $spl0),
  inference(superposition,[],[f188,f5126])).
fof(f34504,plain,(
  ( ! [X242,X240] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1)))) ) | $spl236),
  inference(cnf_transformation,[],[f34504_D])).
fof(f34504_D,plain,(
  ( ! [X242,X240] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1)))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f34503,plain,(
  ( ! [X241,X242,X240] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X241)) ) | ($spl0 | $spl210)),
  inference(subsumption_resolution,[],[f19918,f29398])).
fof(f19918,plain,(
  ( ! [X241,X242,X240] : (~p(s(bool,happ(s(fun(bool,bool),X242),s(bool,X241)))) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X241)) ) | $spl0),
  inference(superposition,[],[f188,f1106])).
fof(f1106,plain,(
  ( ! [X0,X1] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X0,'type.option.option'(sK1))) | s(bool,X1) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(subsumption_resolution,[],[f1101,f128])).
fof(f1101,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X0,'type.option.option'(sK1))) | s(bool,X1) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f868,f220])).
fof(f868,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X6),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f828,f200])).
fof(f828,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X6),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | $spl0),
  inference(superposition,[],[f188,f200])).
fof(f34495,plain,(
  ( ! [X242,X240] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool))) ) | $spl234),
  inference(cnf_transformation,[],[f34495_D])).
fof(f34495_D,plain,(
  ( ! [X242,X240] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f34494,plain,(
  ( ! [X241,X242,X240] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s(bool,'T_0') = s(bool,X241)) ) | ($spl0 | $spl210 | $spl224)),
  inference(subsumption_resolution,[],[f34444,f29398])).
fof(f34444,plain,(
  ( ! [X241,X242,X240] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X240,'type.option.option'(sK1))) | ~p(s(bool,happ(s(fun(bool,bool),X242),s(bool,X241)))) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X240),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X242,bool)) | s(bool,'T_0') = s(bool,X241)) ) | ($spl0 | $spl224)),
  inference(backward_demodulation,[],[f34324,f19918])).
fof(f34493,plain,(
  ( ! [X239,X238,X236] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X236,'type.option.option'(sK1))) | p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X239)))) | s(bool,X239) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X236),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | $spl232),
  inference(cnf_transformation,[],[f34493_D])).
fof(f34493_D,plain,(
  ( ! [X239,X238,X236] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X236,'type.option.option'(sK1))) | p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X239)))) | s(bool,X239) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X236),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f34492,plain,(
  ( ! [X239,X237,X238,X236] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X236,'type.option.option'(sK1))) | p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X239)))) | s(bool,X239) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X236),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X237)) ) | ($spl0 | $spl210 | $spl224)),
  inference(subsumption_resolution,[],[f34443,f29398])).
fof(f34443,plain,(
  ( ! [X239,X237,X238,X236] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),X236,'type.option.option'(sK1))) | ~p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X237)))) | p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X239)))) | s(bool,X239) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X236),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X237)) ) | ($spl0 | $spl224)),
  inference(backward_demodulation,[],[f34324,f19917])).
fof(f19917,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X237)))) | p(s(bool,happ(s(fun(bool,bool),X238),s(bool,X239)))) | s(bool,X239) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X236),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X236,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X237)) ) | $spl0),
  inference(superposition,[],[f187,f1106])).
fof(f34484,plain,(
  ( ! [X161,X159] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool))) ) | $spl230),
  inference(cnf_transformation,[],[f34484_D])).
fof(f34484_D,plain,(
  ( ! [X161,X159] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f34483,plain,(
  ( ! [X161,X159,X160] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(bool,'T_0') = s(bool,X160)) ) | ($spl0 | $spl210 | $spl224)),
  inference(subsumption_resolution,[],[f34373,f29398])).
fof(f34373,plain,(
  ( ! [X161,X159,X160] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X159,sK1)) | ~p(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))) | s(bool,happ(s(fun(sK1,bool),X159),s(sK1,sK2))) = s(bool,sK7(happ(s(fun(sK1,bool),X159),s(sK1,sK2)),X161,bool)) | s(bool,'T_0') = s(bool,X160)) ) | ($spl0 | $spl224)),
  inference(backward_demodulation,[],[f34324,f5418])).
fof(f34482,plain,(
  ( ! [X158,X157,X155] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2)))) ) | $spl228),
  inference(cnf_transformation,[],[f34482_D])).
fof(f34482_D,plain,(
  ( ! [X158,X157,X155] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2)))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f34481,plain,(
  ( ! [X158,X156,X157,X155] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X156)) ) | ($spl0 | $spl210 | $spl224)),
  inference(subsumption_resolution,[],[f34372,f29398])).
fof(f34372,plain,(
  ( ! [X158,X156,X157,X155] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X155,sK1)) | ~p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X156)))) | p(s(bool,happ(s(fun(bool,bool),X157),s(bool,X158)))) | s(bool,X158) != s(bool,happ(s(fun(sK1,bool),X155),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X156)) ) | ($spl0 | $spl224)),
  inference(backward_demodulation,[],[f34324,f5417])).
fof(f34480,plain,(
  $false | ($spl0 | $spl224)),
  inference(subsumption_resolution,[],[f34479,f182])).
fof(f34479,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | ($spl0 | $spl224)),
  inference(forward_demodulation,[],[f34329,f194])).
fof(f194,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X6] : ! [X10] : s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.NONE_0'),s(fun(X7,'type.option.option'(X6)),X10)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.OPTION_BIND_def|split|0')).
fof(f34329,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))) | ($spl0 | $spl224)),
  inference(backward_demodulation,[],[f34324,f200])).
fof(f34324,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK3) | $spl224),
  inference(cnf_transformation,[],[f34324_D])).
fof(f34324_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK3) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f34326,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) | $spl226),
  inference(cnf_transformation,[],[f34326_D])).
fof(f34326_D,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f34310,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK3) | $spl0),
  inference(trivial_inequality_removal,[],[f34307])).
fof(f34307,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK3) | $spl0),
  inference(superposition,[],[f14418,f200])).
fof(f14418,plain,(
  ( ! [X2,X3,X1] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X3),s(fun(X1,'type.option.option'(sK1)),X2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(X1,'type.option.option'(sK1)),X2),s(X1,sK6(X3,X1)))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | $spl0),
  inference(forward_demodulation,[],[f14389,f200])).
fof(f14389,plain,(
  ( ! [X2,X3,X1] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X3),s(fun(X1,'type.option.option'(sK1)),X2))))) | s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) = s('type.option.option'(sK1),happ(s(fun(X1,'type.option.option'(sK1)),X2),s(X1,sK6(X3,X1)))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | $spl0),
  inference(superposition,[],[f823,f796])).
fof(f796,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X4),'const.option.OPTION_BIND_2'(s('type.option.option'(X2),X3),s(fun(X2,'type.option.option'(X4)),X5))) = s('type.option.option'(X4),happ(s(fun(X2,'type.option.option'(X4)),X5),s(X2,sK6(X3,X2)))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) )),
  inference(superposition,[],[f195,f177])).
fof(f195,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7] : ! [X11,X10] : s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X10),s(X7,X11))) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))),s(fun(X7,'type.option.option'(X6)),X10)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.OPTION_BIND_def|split|1')).
fof(f823,plain,(
  ( ! [X0] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X0))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),X0) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)))) ) | $spl0),
  inference(superposition,[],[f185,f200])).
fof(f31567,plain,(
  ( ! [X151,X150,X148] : (p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X151)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X148,'type.option.option'(sK1))) | s(bool,X151) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X148),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | $spl222),
  inference(cnf_transformation,[],[f31567_D])).
fof(f31567_D,plain,(
  ( ! [X151,X150,X148] : (p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X151)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X148,'type.option.option'(sK1))) | s(bool,X151) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X148),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f31566,plain,(
  ( ! [X151,X149,X150,X148] : (p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X151)))) | s(bool,X151) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X148),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X148,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X149)) ) | ($spl0 | $spl210)),
  inference(subsumption_resolution,[],[f31429,f29398])).
fof(f31429,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X149)))) | p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X151)))) | s(bool,X151) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X148),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X148,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X149)) ) | $spl0),
  inference(superposition,[],[f187,f1106])).
fof(f31565,plain,(
  ( ! [X127,X126,X124] : (s(bool,'F_0') = s(bool,sK7(sK7(happ(s(fun('type.option.option'(sK1),bool),X124),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X126,bool),X127,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X124,'type.option.option'(sK1)))) ) | $spl220),
  inference(cnf_transformation,[],[f31565_D])).
fof(f31565_D,plain,(
  ( ! [X127,X126,X124] : (s(bool,'F_0') = s(bool,sK7(sK7(happ(s(fun('type.option.option'(sK1),bool),X124),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X126,bool),X127,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X124,'type.option.option'(sK1)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f714,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) | $spl10),
  inference(cnf_transformation,[],[f714_D])).
fof(f714_D,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f31564,plain,(
  ( ! [X127,X125,X126,X124] : (p(s(bool,X125)) | s(bool,'F_0') = s(bool,sK7(sK7(happ(s(fun('type.option.option'(sK1),bool),X124),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X126,bool),X127,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X124,'type.option.option'(sK1)))) ) | ($spl0 | $spl198)),
  inference(subsumption_resolution,[],[f31420,f137])).
fof(f137,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f31420,plain,(
  ( ! [X127,X125,X126,X124] : (p(s(bool,X125)) | s(bool,'F_0') = s(bool,sK7(sK7(happ(s(fun('type.option.option'(sK1),bool),X124),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X126,bool),X127,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X124,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X125)) ) | ($spl0 | $spl198)),
  inference(superposition,[],[f27326,f1106])).
fof(f27326,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,X56)) | s(bool,'F_0') = s(bool,sK7(sK7(X56,X57,bool),X58,bool))) ) | $spl198),
  inference(subsumption_resolution,[],[f27312,f137])).
fof(f27312,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,X56)) | s(bool,'F_0') = s(bool,sK7(sK7(X56,X57,bool),X58,bool)) | s(bool,'T_0') = s(bool,X56)) ) | $spl198),
  inference(superposition,[],[f26206,f26073])).
fof(f26206,plain,(
  ( ! [X10,X11] : (p(s(bool,X10)) | s(bool,'F_0') = s(bool,sK7(X10,X11,bool))) ) | $spl198),
  inference(subsumption_resolution,[],[f26141,f137])).
fof(f26141,plain,(
  ( ! [X10,X11] : (p(s(bool,X10)) | s(bool,'F_0') = s(bool,sK7(X10,X11,bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl198),
  inference(superposition,[],[f142,f26073])).
fof(f142,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f31563,plain,(
  ( ! [X123,X121] : (s(bool,'F_0') = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X123,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1)))) ) | $spl218),
  inference(cnf_transformation,[],[f31563_D])).
fof(f31563_D,plain,(
  ( ! [X123,X121] : (s(bool,'F_0') = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X123,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1)))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f31562,plain,(
  ( ! [X123,X121,X122] : (p(s(bool,X122)) | s(bool,'F_0') = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X123,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1)))) ) | ($spl0 | $spl198)),
  inference(subsumption_resolution,[],[f31419,f137])).
fof(f31419,plain,(
  ( ! [X123,X121,X122] : (p(s(bool,X122)) | s(bool,'F_0') = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X123,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl0 | $spl198)),
  inference(superposition,[],[f26206,f1106])).
fof(f30927,plain,(
  ( ! [X87,X86,X84] : (s(bool,'F_0') = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X84)),bool),X86,bool),X87,bool)) | s(bool,'T_0') = s(bool,X84)) ) | $spl216),
  inference(cnf_transformation,[],[f30927_D])).
fof(f30927_D,plain,(
  ( ! [X87,X86,X84] : (s(bool,'F_0') = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X84)),bool),X86,bool),X87,bool)) | s(bool,'T_0') = s(bool,X84)) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f30926,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,X85)) | s(bool,'F_0') = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X84)),bool),X86,bool),X87,bool)) | s(bool,'T_0') = s(bool,X84)) ) | $spl198),
  inference(subsumption_resolution,[],[f30909,f137])).
fof(f30909,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,X85)) | s(bool,'F_0') = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X84)),bool),X86,bool),X87,bool)) | s(bool,'T_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X85)) ) | $spl198),
  inference(superposition,[],[f27326,f956])).
fof(f956,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f894,f220])).
fof(f894,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))) )),
  inference(unit_resulting_resolution,[],[f640,f185])).
fof(f640,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))))) )),
  inference(unit_resulting_resolution,[],[f182,f177])).
fof(f30090,plain,(
  ( ! [X92,X91] : (s(bool,X92) != s(bool,sK7('F_0',X91,bool)) | s(bool,'F_0') = s(bool,X92)) ) | $spl214),
  inference(cnf_transformation,[],[f30090_D])).
fof(f30090_D,plain,(
  ( ! [X92,X91] : (s(bool,X92) != s(bool,sK7('F_0',X91,bool)) | s(bool,'F_0') = s(bool,X92)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f30031,plain,(
  ( ! [X92,X90,X91] : (s(bool,X92) != s(bool,sK7('F_0',X91,bool)) | s(bool,'T_0') = s(bool,X90) | s(bool,'F_0') = s(bool,X92)) ) | $spl194),
  inference(duplicate_literal_removal,[],[f29890])).
fof(f29890,plain,(
  ( ! [X92,X90,X91] : (s(bool,X92) != s(bool,sK7('F_0',X91,bool)) | s(bool,'T_0') = s(bool,X90) | s(bool,'F_0') = s(bool,X92) | s(bool,'T_0') = s(bool,X90)) ) | $spl194),
  inference(superposition,[],[f4325,f25853])).
fof(f25853,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl194),
  inference(subsumption_resolution,[],[f25784,f208])).
fof(f208,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f207,f137])).
fof(f207,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f131,f128])).
fof(f131,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f23])).
fof(f23,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.bool.NOT_CLAUSES|split|2')).
fof(f25784,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl194),
  inference(superposition,[],[f25764,f220])).
fof(f4325,plain,(
  ( ! [X47,X46] : (s(bool,X46) != s(bool,X47) | s(bool,'T_0') = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f1062,f894])).
fof(f1062,plain,(
  ( ! [X17,X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f1039,f128])).
fof(f1039,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f222,f960])).
fof(f960,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f894,f135])).
fof(f222,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f141,f135])).
fof(f141,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f92])).
fof(f30084,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,sK7('F_0',X51,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl212),
  inference(cnf_transformation,[],[f30084_D])).
fof(f30084_D,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,sK7('F_0',X51,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f30040,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,sK7('F_0',X51,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50)) ) | $spl194),
  inference(duplicate_literal_removal,[],[f29876])).
fof(f29876,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,sK7('F_0',X51,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl194),
  inference(superposition,[],[f568,f25853])).
fof(f568,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f186,f135])).
fof(f186,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f120])).
fof(f29300,plain,(
  ( ! [X37] : (p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))))) ) | $spl210),
  inference(cnf_transformation,[],[f29300_D])).
fof(f29300_D,plain,(
  ( ! [X37] : (p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f29299,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') = s(bool,X36) | p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))))) ) | ($spl44 | $spl194 | $spl204)),
  inference(global_subsumption,[],[f29229,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5023,f5005,f1210,f1145,f14407,f14408,f14419,f14392,f14394,f14396,f14402,f14650,f14970,f14956,f14976,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15126,f15129,f15130,f15131,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15653,f15654,f15658,f16300,f16302,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f597,f1254,f1144,f1209,f1445,f4332,f4507,f4993,f4994,f4995,f4996,f4997,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f2989,f4679,f4681,f4688,f4689,f4692,f4707,f4709,f4774,f4804,f4805,f4817,f4968,f4971,f4972,f4977,f5022,f14387,f14405,f14958,f14962,f15124,f15128,f15600,f15647,f15648,f15652,f15977,f141,f142,f207,f525,f529,f534,f568,f573,f613,f647,f734,f878,f883,f960,f1044,f1061,f1062,f1063,f1064,f1066,f1067,f1098,f1132,f1138,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1249,f1280,f1437,f1504,f1554,f1594,f1669,f1673,f2620,f2810,f2857,f2898,f2988,f3022,f3023,f3026,f3027,f3028,f3476,f3901,f3929,f4200,f4253,f4255,f4330,f4473,f4475,f4534,f4536,f4702,f4772,f4783,f4818,f4819,f4828,f4969,f4970,f5000,f5003,f5011,f5012,f5076,f5077,f5106,f5195,f6001,f15691,f16292,f3347,f4693,f14372,f14373,f14377,f3350,f628,f5081,f5610,f5623,f5625,f16250,f16249,f16206,f16281,f16207,f16202,f15465,f5082,f819,f14399,f14403,f15448,f16254,f5067,f5053,f3909,f614,f16009,f15982,f15981,f15474,f15472,f15471,f15441,f14398,f5080,f731,f652,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f16016,f16015,f15993,f15992,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f14688,f14667,f3575,f3421,f3346,f881,f879,f16205,f13997,f5197,f5196,f5187,f5175,f5171,f5167,f5166,f5154,f5153,f5107,f5079,f5078,f5069,f5052,f4450,f2994,f2381,f739,f706,f618,f16255,f16248,f16244,f16243,f16222,f16011,f16005,f15659,f14385,f5174,f5084,f5075,f5074,f4777,f4776,f4712,f4711,f4691,f4684,f4683,f2650,f2649,f2630,f2629,f1451,f1359,f15610,f15676,f25764,f25771,f25773,f25853,f25854,f25855,f25834,f25878,f27921])).
fof(f25878,plain,(
  ( ! [X80,X79] : (s(bool,'F_0') = s(bool,sK7(sK7('F_0',X79,bool),X80,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'F_0'))))) ) | $spl194),
  inference(forward_demodulation,[],[f25839,f25764])).
fof(f25839,plain,(
  ( ! [X80,X79] : (~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'F_0')))) | s(bool,sK7('F_0',X79,bool)) = s(bool,sK7(sK7('F_0',X79,bool),X80,bool))) ) | $spl194),
  inference(superposition,[],[f188,f25764])).
fof(f25834,plain,(
  ( ! [X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK7('F_0',X68,bool))) ) | $spl194),
  inference(superposition,[],[f185,f25764])).
fof(f25855,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK7('F_0',X1,bool))) ) | $spl194),
  inference(subsumption_resolution,[],[f25792,f207])).
fof(f25792,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK7('F_0',X1,bool))) ) | $spl194),
  inference(superposition,[],[f137,f25764])).
fof(f25854,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,sK7('F_0',X12,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | $spl194),
  inference(subsumption_resolution,[],[f25789,f208])).
fof(f25789,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X13) = s(bool,sK7('F_0',X12,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X13)),bool))) ) | $spl194),
  inference(superposition,[],[f25764,f958])).
fof(f25773,plain,(
  ( ! [X39,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X39)))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X39)) ) | $spl194),
  inference(subsumption_resolution,[],[f25772,f208])).
fof(f25772,plain,(
  ( ! [X39,X40] : (s(bool,'T_0') = s(bool,'F_0') | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X39)))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X39)) ) | $spl194),
  inference(backward_demodulation,[],[f25764,f5166])).
fof(f25771,plain,(
  ( ! [X43,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X43),s(bool,'F_0'))) | ~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))) | s(bool,'T_0') = s(bool,X42)) ) | $spl194),
  inference(backward_demodulation,[],[f25764,f5066])).
fof(f15676,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.option.option'(X85),X86) = s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0'))) | s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),X86))) != s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,X84))))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(forward_demodulation,[],[f15627,f195])).
fof(f15627,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),X86))) != s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,X84))))) | s('type.option.option'(X85),X86) = s('type.option.option'(X85),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X85)),X87))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f799,f135])).
fof(f15610,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X7))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,'F_0'))))) | s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f799,f135])).
fof(f1359,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) != s(bool,f(s(X121,sK8(X122,X123,bool,X121)))) | s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK8(X122,X123,bool,X121))))) )),
  inference(superposition,[],[f196,f956])).
fof(f1451,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f1450])).
fof(f1450,plain,(
  ( ! [X2,X0,X1] : (s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f1293])).
fof(f1293,plain,(
  ( ! [X2,X0,X1] : (s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f956,f956])).
fof(f2629,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X25),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X25),s('type.option.option'(bool),X26)))) | s('type.option.option'(bool),X26) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f187,f1669])).
fof(f2630,plain,(
  ( ! [X28,X27] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X28),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f188,f1669])).
fof(f2649,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X25),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X25),s('type.option.option'(bool),X26)))) | s('type.option.option'(bool),X26) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f187,f1669])).
fof(f2650,plain,(
  ( ! [X28,X27] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X28),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X27)),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f188,f1669])).
fof(f4683,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),X37)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),X37) | s(bool,'T_0') = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f187,f647])).
fof(f4684,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X38) = s('type.option.option'(bool),sK7(X38,X39,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X38,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X38)) )),
  inference(superposition,[],[f188,f647])).
fof(f4691,plain,(
  ( ! [X54,X53] : (p(s(bool,happ(s(fun('type.option.option'(bool),bool),X54),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X54),s('type.option.option'(bool),X53)))) | s(bool,'T_0') = s(bool,sK6(sK7(X53,X54,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(X53,X54,'type.option.option'(bool)))) )),
  inference(superposition,[],[f189,f647])).
fof(f4711,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X33)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X33,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X33)) )),
  inference(superposition,[],[f187,f647])).
fof(f4712,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),X36)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X37,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X36,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(superposition,[],[f188,f647])).
fof(f4776,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X99),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X99),s(bool,X100)))) | s(bool,X100) != s(bool,sK6(X98,bool)) | s('type.option.option'(bool),X98) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X98)) )),
  inference(superposition,[],[f187,f647])).
fof(f4777,plain,(
  ( ! [X101,X102] : (~p(s(bool,happ(s(fun(bool,bool),X102),s(bool,'T_0')))) | s(bool,sK6(X101,bool)) = s(bool,sK7(sK6(X101,bool),X102,bool)) | s('type.option.option'(bool),X101) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X101)) )),
  inference(superposition,[],[f188,f647])).
fof(f5074,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X61),s(bool,sK7(sK6(X60,bool),X61,bool)))) | s('type.option.option'(bool),X60) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60)) )),
  inference(superposition,[],[f716,f647])).
fof(f5075,plain,(
  ( ! [X62,X63] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X63),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X63),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X62)),X63,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f716,f1669])).
fof(f5084,plain,(
  ( ! [X85,X86] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X86),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X86),s('type.option.option'(bool),sK7(X85,X86,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X85,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X85)) )),
  inference(superposition,[],[f716,f647])).
fof(f5174,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6(X57,bool),X58,bool)) | s('type.option.option'(bool),X57) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X57)) )),
  inference(superposition,[],[f706,f647])).
fof(f14385,plain,(
  ( ! [X76,X74,X75] : (s('type.option.option'(X75),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(bool)),X74),s(fun('type.option.option'(bool),'type.option.option'(X75)),X76))) = s('type.option.option'(X75),happ(s(fun('type.option.option'(bool),'type.option.option'(X75)),X76),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X74) | s(bool,'T_0') = s(bool,sK6(sK6(X74,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X74,'type.option.option'(bool)))) )),
  inference(superposition,[],[f796,f647])).
fof(f15659,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X8))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X8) = s('type.option.option'(bool),'const.option.OPTION_BIND_2'(s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X7))),s(fun(X5,'type.option.option'(bool)),X6))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(X5,'type.option.option'(bool)),X6),s(X5,X7)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X5,'type.option.option'(bool)),X6),s(X5,X7)))) )),
  inference(superposition,[],[f799,f647])).
fof(f16005,plain,(
  ( ! [X76,X74,X75] : (s('type.option.option'('type.option.option'(bool)),X75) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | p(s(bool,happ(s(fun('type.option.option'('type.option.option'(bool)),bool),X76),s('type.option.option'('type.option.option'(bool)),X75)))) | ~p(s(bool,happ(s(fun('type.option.option'('type.option.option'(bool)),bool),X76),s('type.option.option'('type.option.option'(bool)),X74)))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X74) | s(bool,'T_0') = s(bool,sK6(sK6(X74,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X74,'type.option.option'(bool)))) )),
  inference(superposition,[],[f731,f647])).
fof(f16011,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(bool),X22) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),X22)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),X21)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f15990])).
fof(f15990,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(bool),X22) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),X22)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),X21)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21)) )),
  inference(superposition,[],[f731,f647])).
fof(f16222,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,happ(s(fun('type.option.option'(X85),bool),X86),s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,X84)))))) | s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0'))) = s('type.option.option'(X85),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X85)),X87)),X86,'type.option.option'(X85))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f819,f135])).
fof(f16243,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,happ(s(fun('type.option.option'(X166),bool),X167),s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'T_0')))))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) )),
  inference(superposition,[],[f819,f647])).
fof(f16244,plain,(
  ( ! [X171,X169,X172,X170] : (~p(s(bool,happ(s(fun('type.option.option'(X170),bool),X171),s('type.option.option'(X170),happ(s(fun('type.option.option'(bool),'type.option.option'(X170)),X172),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))))) | s('type.option.option'(X170),happ(s(fun('type.option.option'(bool),'type.option.option'(X170)),X172),s('type.option.option'(bool),X169))) = s('type.option.option'(X170),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X169))),s(fun('type.option.option'(bool),'type.option.option'(X170)),X172)),X171,'type.option.option'(X170))) | s(bool,'T_0') = s(bool,sK6(X169,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X169)) )),
  inference(superposition,[],[f819,f647])).
fof(f16248,plain,(
  ( ! [X191,X189,X192,X190] : (~p(s(bool,happ(s(fun('type.option.option'(X190),bool),X191),s('type.option.option'(X190),happ(s(fun('type.option.option'(bool),'type.option.option'(X190)),X192),s('type.option.option'(bool),X189)))))) | s('type.option.option'(X190),happ(s(fun('type.option.option'(bool),'type.option.option'(X190)),X192),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) = s('type.option.option'(X190),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(fun('type.option.option'(bool),'type.option.option'(X190)),X192)),X191,'type.option.option'(X190))) | s(bool,'T_0') = s(bool,sK6(X189,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X189)) )),
  inference(superposition,[],[f819,f647])).
fof(f16255,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X8),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),happ(s(fun(X5,'type.option.option'(bool)),X6),s(X5,X7))) = s('type.option.option'(bool),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X7))),s(fun(X5,'type.option.option'(bool)),X6)),X8,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(X5,'type.option.option'(bool)),X6),s(X5,X7)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X5,'type.option.option'(bool)),X6),s(X5,X7)))) )),
  inference(superposition,[],[f819,f647])).
fof(f618,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,X20) = s(bool,sK7(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f188,f135])).
fof(f706,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,X12)))) | p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X12,X13,bool))) )),
  inference(superposition,[],[f189,f135])).
fof(f739,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X34)))) | s(bool,X32) != s(bool,X34) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f187,f135])).
fof(f2381,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X49)),bool),X50,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(forward_demodulation,[],[f2354,f894])).
fof(f2354,plain,(
  ( ! [X50,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X49)),bool),X50,bool)) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f188,f1445])).
fof(f2994,plain,(
  ( ! [X92,X90,X91] : (s(X92,f(s(bool,'F_0'))) != s(X92,g(s(bool,'F_0'))) | s(fun(bool,X92),X90) = s(fun(bool,X92),X91) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X90,X91,X92,bool))),bool))) )),
  inference(forward_demodulation,[],[f2821,f894])).
fof(f2821,plain,(
  ( ! [X92,X90,X91] : (s(X92,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X92,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X92),X90) = s(fun(bool,X92),X91) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X90,X91,X92,bool))),bool))) )),
  inference(superposition,[],[f196,f1504])).
fof(f4450,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,X1) = s(bool,sK7(X1,sK6('const.option.SOME_1'(s(fun(bool,bool),X0)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f618,f894])).
fof(f5052,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X4),s(bool,sK7(X3,X4,bool)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f716,f135])).
fof(f5069,plain,(
  ( ! [X50,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X50),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X49)),bool),X50,bool)))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f716,f1445])).
fof(f5078,plain,(
  ( ! [X68,X69] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X69),s('type.option.option'(bool),X68)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X69),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X69,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X68,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X68)) )),
  inference(superposition,[],[f716,f647])).
fof(f5079,plain,(
  ( ! [X70,X71] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X71),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X71),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X71,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f716,f1669])).
fof(f5107,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') = s(bool,X56) | ~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,X56)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X57),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X57,bool))))) )),
  inference(forward_demodulation,[],[f5072,f894])).
fof(f5072,plain,(
  ( ! [X57,X56] : (~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,X56)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X57),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X57,bool)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool))) )),
  inference(superposition,[],[f716,f1504])).
fof(f5153,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f706,f220])).
fof(f5154,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f706,f220])).
fof(f5166,plain,(
  ( ! [X39,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X39)))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X40,bool)) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f706,f135])).
fof(f5167,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X41)),bool),X42,bool)) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f706,f958])).
fof(f5171,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,X51)))) | p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X50)),bool),X52,bool)) | s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f706,f956])).
fof(f5175,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,X59)))) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X59)),bool),X60,bool))) )),
  inference(superposition,[],[f706,f894])).
fof(f5187,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'T_0') = s(bool,sK7(X1,sK6('const.option.SOME_1'(s(fun(bool,bool),X0)),fun(bool,bool)),bool))) )),
  inference(forward_demodulation,[],[f5151,f894])).
fof(f5151,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | p(s(bool,happ(s(fun(bool,bool),sK6('const.option.SOME_1'(s(fun(bool,bool),X0)),fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X1,sK6('const.option.SOME_1'(s(fun(bool,bool),X0)),fun(bool,bool)),bool))) )),
  inference(superposition,[],[f706,f894])).
fof(f5196,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') = s(bool,X53) | ~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,X53)))) | p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X54,bool))) )),
  inference(forward_demodulation,[],[f5172,f894])).
fof(f5172,plain,(
  ( ! [X54,X53] : (~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,X53)))) | p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X54,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool))) )),
  inference(superposition,[],[f706,f1504])).
fof(f5197,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5177,f128])).
fof(f5177,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f706,f220])).
fof(f13997,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f13981,f128])).
fof(f13981,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f739,f220])).
fof(f16205,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,happ(s(fun('type.option.option'(X6),bool),X7),s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,'F_0')))))) | s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,X5))) = s('type.option.option'(X6),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8)),X7,'type.option.option'(X6))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f819,f135])).
fof(f879,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f196,f220])).
fof(f881,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK8(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK8(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f196,f220])).
fof(f3346,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,f(s(X182,sK8(X183,X184,bool,X182)))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X182,sK8(X183,X184,bool,X182))))),bool)) | s(bool,'T_0') = s(bool,X185)) )),
  inference(superposition,[],[f196,f958])).
fof(f3421,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,f(s(X182,sK8(X183,X184,bool,X182)))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) )),
  inference(superposition,[],[f196,f958])).
fof(f3575,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') != s(bool,f(s(X169,sK8(X170,X171,bool,X169)))) | s(fun(X169,bool),X170) = s(fun(X169,bool),X171) | s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X172)),bool))) )),
  inference(superposition,[],[f196,f958])).
fof(f14667,plain,(
  ( ! [X6,X4,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK8(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK8(X5,X6,bool,X4))))) )),
  inference(trivial_inequality_removal,[],[f14653])).
fof(f14653,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK8(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK8(X5,X6,bool,X4))))) )),
  inference(superposition,[],[f883,f135])).
fof(f14688,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(X0,sK8(X1,X2,bool,X0))))),bool))) )),
  inference(condensation,[],[f14687])).
fof(f14687,plain,(
  ( ! [X33,X31,X34,X32] : (s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,'T_0') = s(bool,g(s(X31,sK8(X32,X33,bool,X31)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(X31,sK8(X32,X33,bool,X31))))),bool)) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f14660,f135])).
fof(f14660,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,X34) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,'T_0') = s(bool,g(s(X31,sK8(X32,X33,bool,X31)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(X31,sK8(X32,X33,bool,X31))))),bool)) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f883,f958])).
fof(f616,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X15)))) | s(bool,X14) = s(bool,sK7(X14,X16,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f188,f220])).
fof(f619,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,X22)))) | s(bool,'T_0') = s(bool,sK7('T_0',X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f188,f220])).
fof(f702,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK7(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f189,f220])).
fof(f704,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X8)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | s(bool,'T_0') = s(bool,sK7(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f189,f220])).
fof(f735,plain,(
  ( ! [X19,X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X18)))) | s(bool,X16) != s(bool,X18) | s(bool,X16) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f187,f220])).
fof(f737,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X25)))) | p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X27)))) | s(bool,X24) != s(bool,X27) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f187,f220])).
fof(f740,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,X35)))) | p(s(bool,happ(s(fun(bool,bool),X36),s(bool,X37)))) | s(bool,'T_0') != s(bool,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f187,f220])).
fof(f1493,plain,(
  ( ! [X83,X81,X82] : (s(bool,X81) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X81)),bool),X83,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X83),s(bool,X82)))) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,X82)) )),
  inference(forward_demodulation,[],[f1394,f894])).
fof(f1394,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,happ(s(fun(bool,bool),X83),s(bool,X82)))) | s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X81)),bool),X83,bool)) | s(bool,'T_0') = s(bool,X81) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f188,f956])).
fof(f5054,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,X9)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X10),s(bool,sK7(X8,X10,bool)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f716,f220])).
fof(f5066,plain,(
  ( ! [X43,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X43),s(bool,sK7('F_0',X43,bool)))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f716,f135])).
fof(f5071,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,X54)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X55),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X53)),bool),X55,bool)))) | s(bool,'T_0') = s(bool,X53) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f716,f956])).
fof(f5105,plain,(
  ( ! [X35,X33,X34] : (s(bool,'T_0') = s(bool,X35) | ~p(s(bool,happ(s(fun(bool,bool),X34),s(bool,X33)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,sK7('T_0',X34,bool)))) | s(bool,X33) = s(bool,X35)) )),
  inference(forward_demodulation,[],[f5063,f894])).
fof(f5063,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun(bool,bool),X34),s(bool,X33)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,sK7('T_0',X34,bool)))) | s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool))) )),
  inference(superposition,[],[f716,f958])).
fof(f15992,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.option.option'(bool),X28) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X29),s('type.option.option'(bool),X28)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X29),s('type.option.option'(bool),X27)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27) | s(bool,X30) = s(bool,sK6(X27,bool)) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f731,f220])).
fof(f15993,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.option.option'(bool),X33) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X33)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X31)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X31) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,sK6(X31,bool))) )),
  inference(superposition,[],[f731,f220])).
fof(f16015,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),X11) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X12),s('type.option.option'(bool),X11)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X12),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10)))))) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f15987,f182])).
fof(f15987,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),X11) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X12),s('type.option.option'(bool),X11)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X12),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10)))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f731,f958])).
fof(f16016,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X17),s('type.option.option'(bool),X16)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X17),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14)))))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f15988,f182])).
fof(f15988,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X17),s('type.option.option'(bool),X16)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X17),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14)))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f731,f956])).
fof(f189,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f123])).
fof(f716,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,'T_0') = s(bool,happ(s(fun(X16,bool),X17),s(X16,sK7(X18,X17,X16))))) )),
  inference(subsumption_resolution,[],[f711,f207])).
fof(f711,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,'T_0') = s(bool,happ(s(fun(X16,bool),X17),s(X16,sK7(X18,X17,X16))))) )),
  inference(superposition,[],[f189,f135])).
fof(f752,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f743,f128])).
fof(f743,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f187,f220])).
fof(f987,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66)))) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) )),
  inference(superposition,[],[f188,f894])).
fof(f1001,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) | ~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21))))) )),
  inference(forward_demodulation,[],[f967,f894])).
fof(f967,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) | s(X20,sK6('const.option.SOME_1'(s(X20,X21)),X20)) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) )),
  inference(superposition,[],[f188,f894])).
fof(f1012,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63)))) | p(s(bool,happ(s(fun(X61,bool),X62),s(X61,sK7(X63,sK6('const.option.SOME_1'(s(fun(X61,bool),X62)),fun(X61,bool)),X61)))))) )),
  inference(forward_demodulation,[],[f986,f894])).
fof(f986,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,happ(s(fun(X61,bool),X62),s(X61,sK7(X63,sK6('const.option.SOME_1'(s(fun(X61,bool),X62)),fun(X61,bool)),X61))))) | ~p(s(bool,happ(s(fun(X61,bool),sK6('const.option.SOME_1'(s(fun(X61,bool),X62)),fun(X61,bool))),s(X61,X63))))) )),
  inference(superposition,[],[f189,f894])).
fof(f5051,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(sK6('const.option.SOME_1'(s(X0,X1)),X0),X2,X0))))) )),
  inference(superposition,[],[f716,f894])).
fof(f5097,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,sK6('const.option.SOME_1'(s(fun(X0,bool),X1)),fun(X0,bool)),X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f5050,f894])).
fof(f5050,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK6('const.option.SOME_1'(s(fun(X0,bool),X1)),fun(X0,bool))),s(X0,sK7(X2,sK6('const.option.SOME_1'(s(fun(X0,bool),X1)),fun(X0,bool)),X0))))) )),
  inference(superposition,[],[f716,f894])).
fof(f5108,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK7(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f5087,f128])).
fof(f5087,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK7(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f716,f220])).
fof(f5110,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun(X23,bool),X24),s(X23,sK7(X25,X24,X23)))) | s(bool,X26) = s(bool,happ(s(fun(X23,bool),X24),s(X23,X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) )),
  inference(subsumption_resolution,[],[f5092,f128])).
fof(f5092,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X23,bool),X24),s(X23,sK7(X25,X24,X23)))) | s(bool,X26) = s(bool,happ(s(fun(X23,bool),X24),s(X23,X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) )),
  inference(superposition,[],[f716,f958])).
fof(f652,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun('type.option.option'(X9),bool),X11),s('type.option.option'(X9),X10)))) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) )),
  inference(superposition,[],[f188,f177])).
fof(f731,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),X5) != s('type.option.option'(X2),'const.option.SOME_1'(s(X2,sK6(X3,X2)))) | p(s(bool,happ(s(fun('type.option.option'(X2),bool),X4),s('type.option.option'(X2),X5)))) | ~p(s(bool,happ(s(fun('type.option.option'(X2),bool),X4),s('type.option.option'(X2),X3)))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) )),
  inference(superposition,[],[f187,f177])).
fof(f5080,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,happ(s(fun('type.option.option'(X72),bool),X74),s('type.option.option'(X72),X73)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X72),bool),X74),s('type.option.option'(X72),sK7('const.option.SOME_1'(s(X72,sK6(X73,X72))),X74,'type.option.option'(X72))))) | s('type.option.option'(X72),'const.option.NONE_0') = s('type.option.option'(X72),X73)) )),
  inference(superposition,[],[f716,f177])).
fof(f14398,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,happ(s(fun('type.option.option'(X42),bool),X46),s('type.option.option'(X42),'const.option.OPTION_BIND_2'(s('type.option.option'(X43),X45),s(fun(X43,'type.option.option'(X42)),X44)))))) | p(s(bool,happ(s(fun('type.option.option'(X42),bool),X46),s('type.option.option'(X42),X47)))) | s('type.option.option'(X42),X47) != s('type.option.option'(X42),happ(s(fun(X43,'type.option.option'(X42)),X44),s(X43,sK6(X45,X43)))) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) )),
  inference(superposition,[],[f187,f796])).
fof(f15441,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.option.option'(X0),bool),X1),s('type.option.option'(X0),X2)))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) )),
  inference(superposition,[],[f652,f894])).
fof(f15471,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | ~p(s(bool,happ(s(fun('type.option.option'(X22),bool),X24),s('type.option.option'(X22),X23)))) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) )),
  inference(forward_demodulation,[],[f15449,f894])).
fof(f15449,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun('type.option.option'(X22),bool),X24),s('type.option.option'(X22),X23)))) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)))) )),
  inference(superposition,[],[f652,f894])).
fof(f15472,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.option.option'(X3),'const.option.SOME_1'(s(X3,sK6(X5,X3)))) = s('type.option.option'(X3),sK7('const.option.SOME_1'(s(X3,sK6(X5,X3))),X4,'type.option.option'(X3))) | s('type.option.option'(X3),'const.option.NONE_0') = s('type.option.option'(X3),X5) | s(bool,X6) = s(bool,happ(s(fun('type.option.option'(X3),bool),X4),s('type.option.option'(X3),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f15451,f128])).
fof(f15451,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X3),'const.option.SOME_1'(s(X3,sK6(X5,X3)))) = s('type.option.option'(X3),sK7('const.option.SOME_1'(s(X3,sK6(X5,X3))),X4,'type.option.option'(X3))) | s('type.option.option'(X3),'const.option.NONE_0') = s('type.option.option'(X3),X5) | s(bool,X6) = s(bool,happ(s(fun('type.option.option'(X3),bool),X4),s('type.option.option'(X3),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f652,f220])).
fof(f15474,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK6(X25,X23)))) = s('type.option.option'(X23),sK7('const.option.SOME_1'(s(X23,sK6(X25,X23))),X24,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X25) | s(bool,X26) = s(bool,happ(s(fun('type.option.option'(X23),bool),X24),s('type.option.option'(X23),X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) )),
  inference(subsumption_resolution,[],[f15456,f128])).
fof(f15456,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK6(X25,X23)))) = s('type.option.option'(X23),sK7('const.option.SOME_1'(s(X23,sK6(X25,X23))),X24,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X25) | s(bool,X26) = s(bool,happ(s(fun('type.option.option'(X23),bool),X24),s('type.option.option'(X23),X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) )),
  inference(superposition,[],[f652,f958])).
fof(f15981,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.option.option'(X18),X19) != s('type.option.option'(X18),'const.option.SOME_1'(s(X18,sK6(X20,X18)))) | p(s(bool,happ(s(fun('type.option.option'(X18),bool),X21),s('type.option.option'(X18),'const.option.SOME_1'(s(X18,sK6(X19,X18))))))) | ~p(s(bool,happ(s(fun('type.option.option'(X18),bool),X21),s('type.option.option'(X18),X20)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X19)) )),
  inference(superposition,[],[f731,f177])).
fof(f15982,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(X26,X22)))) != s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(X23),X25),s(fun(X23,'type.option.option'(X22)),X24))) | p(s(bool,happ(s(fun('type.option.option'(X22),bool),X27),s('type.option.option'(X22),happ(s(fun(X23,'type.option.option'(X22)),X24),s(X23,sK6(X25,X23))))))) | ~p(s(bool,happ(s(fun('type.option.option'(X22),bool),X27),s('type.option.option'(X22),X26)))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X26) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X25)) )),
  inference(superposition,[],[f731,f796])).
fof(f16009,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.option.option'(X0),bool),X1),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0))))))) | ~p(s(bool,happ(s(fun('type.option.option'(X0),bool),X1),s('type.option.option'(X0),X2)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) )),
  inference(equality_resolution,[],[f731])).
fof(f614,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'T_0')))) | s(bool,X8) = s(bool,sK7(X8,X9,bool)) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f188,f220])).
fof(f3909,plain,(
  ( ! [X116,X114,X115] : (s(bool,X114) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X114)),bool),X115,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X115),s(bool,'T_0')))) | s(bool,X114) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) )),
  inference(forward_demodulation,[],[f3469,f894])).
fof(f3469,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,happ(s(fun(bool,bool),X115),s(bool,'T_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X114)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X114)),bool),X115,bool)) | s(bool,X114) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f188,f958])).
fof(f5053,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X6),s(bool,sK7(X5,X6,bool)))) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f716,f220])).
fof(f5067,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X44)),bool),X45,bool)))) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f716,f958])).
fof(f16254,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.option.option'(X0),bool),X4),s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X3),s(fun(X1,'type.option.option'(X0)),X2)))))) | s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) )),
  inference(superposition,[],[f819,f796])).
fof(f15448,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,happ(s(fun('type.option.option'(X17),bool),X21),s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),X20),s(fun(X18,'type.option.option'(X17)),X19)))))) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) )),
  inference(superposition,[],[f652,f796])).
fof(f14403,plain,(
  ( ! [X70,X68,X72,X71,X69] : (~p(s(bool,happ(s(fun('type.option.option'(X68),bool),X72),s('type.option.option'(X68),'const.option.OPTION_BIND_2'(s('type.option.option'(X69),X71),s(fun(X69,'type.option.option'(X68)),X70)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X68),bool),X72),s('type.option.option'(X68),sK7(happ(s(fun(X69,'type.option.option'(X68)),X70),s(X69,sK6(X71,X69))),X72,'type.option.option'(X68))))) | s('type.option.option'(X69),'const.option.NONE_0') = s('type.option.option'(X69),X71)) )),
  inference(superposition,[],[f716,f796])).
fof(f14399,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,happ(s(fun('type.option.option'(X48),bool),X52),s('type.option.option'(X48),'const.option.OPTION_BIND_2'(s('type.option.option'(X49),X51),s(fun(X49,'type.option.option'(X48)),X50)))))) | s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) )),
  inference(superposition,[],[f188,f796])).
fof(f819,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,happ(s(fun('type.option.option'(X33),bool),X37),s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35)))))) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) )),
  inference(forward_demodulation,[],[f804,f195])).
fof(f804,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,happ(s(fun('type.option.option'(X33),bool),X37),s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35)))))) | s('type.option.option'(X33),'const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) )),
  inference(superposition,[],[f188,f195])).
fof(f5082,plain,(
  ( ! [X80,X83,X81,X79,X82] : (~p(s(bool,happ(s(fun('type.option.option'(X79),bool),X83),s('type.option.option'(X79),happ(s(fun(X80,'type.option.option'(X79)),X82),s(X80,X81)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X79),bool),X83),s('type.option.option'(X79),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X80),'const.option.SOME_1'(s(X80,X81))),s(fun(X80,'type.option.option'(X79)),X82)),X83,'type.option.option'(X79)))))) )),
  inference(superposition,[],[f716,f195])).
fof(f15465,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | ~p(s(bool,happ(s(fun('type.option.option'(X6),bool),X10),s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8)))))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) )),
  inference(forward_demodulation,[],[f15444,f195])).
fof(f15444,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,happ(s(fun('type.option.option'(X6),bool),X10),s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8)))))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)))) )),
  inference(superposition,[],[f652,f195])).
fof(f16202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.option.option'(X0),bool),X1),s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4)))))) | s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) )),
  inference(superposition,[],[f819,f894])).
fof(f16207,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,happ(s(fun('type.option.option'(X16),bool),X17),s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X18),s(bool,X15)))))) | s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X18),s(bool,X14))) = s('type.option.option'(X16),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(fun(bool,'type.option.option'(X16)),X18)),X17,'type.option.option'(X16))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f819,f220])).
fof(f16281,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,X73) | ~p(s(bool,happ(s(fun('type.option.option'(X70),bool),X71),s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,X69)))))) | s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,'T_0'))) = s('type.option.option'(X70),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X70)),X72)),X71,'type.option.option'(X70))) | s(bool,X69) = s(bool,X73)) )),
  inference(forward_demodulation,[],[f16219,f894])).
fof(f16219,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,happ(s(fun('type.option.option'(X70),bool),X71),s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,X69)))))) | s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,'T_0'))) = s('type.option.option'(X70),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X70)),X72)),X71,'type.option.option'(X70))) | s(bool,X69) = s(bool,X73) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) )),
  inference(superposition,[],[f819,f958])).
fof(f16206,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun('type.option.option'(X10),bool),X11),s('type.option.option'(X10),happ(s(fun(bool,'type.option.option'(X10)),X12),s(bool,'T_0')))))) | s('type.option.option'(X10),happ(s(fun(bool,'type.option.option'(X10)),X12),s(bool,X9))) = s('type.option.option'(X10),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))),s(fun(bool,'type.option.option'(X10)),X12)),X11,'type.option.option'(X10))) | s(bool,X9) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f819,f220])).
fof(f16249,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,happ(s(fun('type.option.option'(X195),bool),X196),s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),X194)))))) | s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) )),
  inference(superposition,[],[f819,f177])).
fof(f16250,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (~p(s(bool,happ(s(fun('type.option.option'(X202),bool),X203),s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),'const.option.OPTION_BIND_2'(s('type.option.option'(X199),X201),s(fun(X199,'type.option.option'(X198)),X200)))))))) | s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) )),
  inference(superposition,[],[f819,f796])).
fof(f5625,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s('type.option.option'(X29),'const.option.NONE_0') = s('type.option.option'(X29),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X31),'const.option.NONE_0'),s(fun(X31,'type.option.option'(X29)),X32)),X30,'type.option.option'(X29))) | s(bool,X33) = s(bool,happ(s(fun('type.option.option'(X29),bool),X30),s('type.option.option'(X29),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) )),
  inference(subsumption_resolution,[],[f5617,f128])).
fof(f5617,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.option.option'(X29),'const.option.NONE_0') = s('type.option.option'(X29),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X31),'const.option.NONE_0'),s(fun(X31,'type.option.option'(X29)),X32)),X30,'type.option.option'(X29))) | s(bool,X33) = s(bool,happ(s(fun('type.option.option'(X29),bool),X30),s('type.option.option'(X29),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) )),
  inference(superposition,[],[f628,f958])).
fof(f5623,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.option.option'(X4),'const.option.NONE_0') = s('type.option.option'(X4),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X6),'const.option.NONE_0'),s(fun(X6,'type.option.option'(X4)),X7)),X5,'type.option.option'(X4))) | s(bool,X8) = s(bool,happ(s(fun('type.option.option'(X4),bool),X5),s('type.option.option'(X4),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5612,f128])).
fof(f5612,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.option.option'(X4),'const.option.NONE_0') = s('type.option.option'(X4),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X6),'const.option.NONE_0'),s(fun(X6,'type.option.option'(X4)),X7)),X5,'type.option.option'(X4))) | s(bool,X8) = s(bool,happ(s(fun('type.option.option'(X4),bool),X5),s('type.option.option'(X4),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f628,f220])).
fof(f5610,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.option.option'(X0),bool),X1),s('type.option.option'(X0),'const.option.NONE_0')))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) )),
  inference(superposition,[],[f628,f894])).
fof(f5081,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,happ(s(fun('type.option.option'(X75),bool),X78),s('type.option.option'(X75),'const.option.NONE_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X75),bool),X78),s('type.option.option'(X75),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X76),'const.option.NONE_0'),s(fun(X76,'type.option.option'(X75)),X77)),X78,'type.option.option'(X75)))))) )),
  inference(superposition,[],[f716,f194])).
fof(f628,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun('type.option.option'(X2),bool),X5),s('type.option.option'(X2),'const.option.NONE_0')))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) )),
  inference(forward_demodulation,[],[f612,f194])).
fof(f612,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun('type.option.option'(X2),bool),X5),s('type.option.option'(X2),'const.option.NONE_0')))) | s('type.option.option'(X2),'const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4))) = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) )),
  inference(superposition,[],[f188,f194])).
fof(f3350,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X193,X194,X195,bool))),bool)) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f196,f958])).
fof(f14377,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.option.option'(X48),happ(s(fun(bool,'type.option.option'(X48)),X49),s(bool,'T_0'))) = s('type.option.option'(X48),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X47),s(fun(bool,'type.option.option'(X48)),X49))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X47) | s(bool,X50) = s(bool,sK6(X47,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) )),
  inference(superposition,[],[f796,f958])).
fof(f14373,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.option.option'(X33),happ(s(fun(bool,'type.option.option'(X33)),X34),s(bool,X32))) = s('type.option.option'(X33),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X31),s(fun(bool,'type.option.option'(X33)),X34))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X31) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,sK6(X31,bool))) )),
  inference(superposition,[],[f796,f220])).
fof(f14372,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.option.option'(X28),happ(s(fun(bool,'type.option.option'(X28)),X29),s(bool,'T_0'))) = s('type.option.option'(X28),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X27),s(fun(bool,'type.option.option'(X28)),X29))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27) | s(bool,X30) = s(bool,sK6(X27,bool)) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f796,f220])).
fof(f4693,plain,(
  ( ! [X0] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X0))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f597,f647])).
fof(f3347,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X186,bool))),bool)) | s(bool,'T_0') = s(bool,X187)) )),
  inference(superposition,[],[f177,f958])).
fof(f16292,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.option.option'(X148),happ(s(fun(bool,'type.option.option'(X148)),X150),s(bool,X147))) = s('type.option.option'(X148),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147))),s(fun(bool,'type.option.option'(X148)),X150)),X149,'type.option.option'(X148))) | ~p(s(bool,happ(s(fun('type.option.option'(X148),bool),X149),s('type.option.option'(X148),happ(s(fun(bool,'type.option.option'(X148)),X150),s(bool,'T_0')))))) | s(bool,'F_0') = s(bool,X147)) )),
  inference(forward_demodulation,[],[f16239,f894])).
fof(f16239,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,happ(s(fun('type.option.option'(X148),bool),X149),s('type.option.option'(X148),happ(s(fun(bool,'type.option.option'(X148)),X150),s(bool,'T_0')))))) | s('type.option.option'(X148),happ(s(fun(bool,'type.option.option'(X148)),X150),s(bool,sK6('const.option.SOME_1'(s(bool,X147)),bool)))) = s('type.option.option'(X148),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X147)),bool)))),s(fun(bool,'type.option.option'(X148)),X150)),X149,'type.option.option'(X148))) | s(bool,'F_0') = s(bool,X147)) )),
  inference(superposition,[],[f819,f960])).
fof(f15691,plain,(
  ( ! [X146,X144,X145,X143] : (s('type.option.option'(X144),X145) = s('type.option.option'(X144),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X143))),s(fun(bool,'type.option.option'(X144)),X146))) | s('type.option.option'('type.option.option'(X144)),'const.option.SOME_1'(s('type.option.option'(X144),X145))) != s('type.option.option'('type.option.option'(X144)),'const.option.SOME_1'(s('type.option.option'(X144),happ(s(fun(bool,'type.option.option'(X144)),X146),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X143)) )),
  inference(forward_demodulation,[],[f15643,f894])).
fof(f15643,plain,(
  ( ! [X146,X144,X145,X143] : (s('type.option.option'('type.option.option'(X144)),'const.option.SOME_1'(s('type.option.option'(X144),X145))) != s('type.option.option'('type.option.option'(X144)),'const.option.SOME_1'(s('type.option.option'(X144),happ(s(fun(bool,'type.option.option'(X144)),X146),s(bool,'T_0'))))) | s('type.option.option'(X144),X145) = s('type.option.option'(X144),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X143)),bool)))),s(fun(bool,'type.option.option'(X144)),X146))) | s(bool,'F_0') = s(bool,X143)) )),
  inference(superposition,[],[f799,f960])).
fof(f6001,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f5969,f128])).
fof(f5969,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f734,f220])).
fof(f5195,plain,(
  ( ! [X45,X44] : (s(bool,'F_0') = s(bool,X44) | ~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X44)),bool),X45,bool))) )),
  inference(forward_demodulation,[],[f5168,f894])).
fof(f5168,plain,(
  ( ! [X45,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X44)),bool),X45,bool)) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f706,f1504])).
fof(f5106,plain,(
  ( ! [X47,X48] : (s(bool,'F_0') = s(bool,X47) | ~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X48),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X47)),bool),X48,bool))))) )),
  inference(forward_demodulation,[],[f5068,f894])).
fof(f5068,plain,(
  ( ! [X47,X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X48),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X47)),bool),X48,bool)))) | s(bool,X47) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f716,f1504])).
fof(f5077,plain,(
  ( ! [X66,X67] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X67),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X67),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X67,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,X66)) )),
  inference(superposition,[],[f716,f1063])).
fof(f5076,plain,(
  ( ! [X64,X65] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X64)),X65,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,X64)) )),
  inference(superposition,[],[f716,f1063])).
fof(f5012,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(subsumption_resolution,[],[f4960,f182])).
fof(f4960,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(superposition,[],[f648,f647])).
fof(f5011,plain,(
  ( ! [X4,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4959,f182])).
fof(f4959,plain,(
  ( ! [X4,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f648,f1063])).
fof(f5003,plain,(
  ( ! [X2,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X2) = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f648,f1063])).
fof(f5000,plain,(
  ( ! [X83,X82] : (s('type.option.option'(bool),X83) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X82,bool)) = s(bool,sK6(X83,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X83) | s('type.option.option'(bool),X82) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X82)) )),
  inference(superposition,[],[f648,f647])).
fof(f4970,plain,(
  ( ! [X4,X5] : (s('type.option.option'('type.option.option'(bool)),X5) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK6(X5,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X5) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f648,f1063])).
fof(f4969,plain,(
  ( ! [X2,X3] : (s('type.option.option'('type.option.option'(bool)),X3) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) = s('type.option.option'(bool),sK6(X3,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X3) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f648,f1063])).
fof(f4828,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,sK6(X65,bool)) | s(bool,'F_0') = s(bool,X66) | s('type.option.option'(bool),X65) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X65)) )),
  inference(subsumption_resolution,[],[f4753,f128])).
fof(f4753,plain,(
  ( ! [X66,X65] : (~p(s(bool,'T_0')) | s(bool,X66) = s(bool,sK6(X65,bool)) | s(bool,'F_0') = s(bool,X66) | s('type.option.option'(bool),X65) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X65)) )),
  inference(superposition,[],[f1061,f647])).
fof(f4819,plain,(
  ( ! [X37,X38,X36] : (s(bool,X37) = s(bool,sK6(X36,bool)) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(subsumption_resolution,[],[f4739,f128])).
fof(f4739,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | s(bool,X37) = s(bool,sK6(X36,bool)) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s('type.option.option'(bool),X36) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(superposition,[],[f511,f647])).
fof(f4818,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,sK6(X32,bool)) | s(bool,'T_0') = s(bool,X33) | s('type.option.option'(bool),X32) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(subsumption_resolution,[],[f4737,f128])).
fof(f4737,plain,(
  ( ! [X33,X32] : (~p(s(bool,'T_0')) | s(bool,X33) != s(bool,sK6(X32,bool)) | s(bool,'T_0') = s(bool,X33) | s('type.option.option'(bool),X32) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f222,f647])).
fof(f4783,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f4769])).
fof(f4769,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) )),
  inference(superposition,[],[f177,f647])).
fof(f4772,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) )),
  inference(superposition,[],[f185,f647])).
fof(f4702,plain,(
  ( ! [X17,X18,X16] : (s('type.option.option'(X17),happ(s(fun(bool,'type.option.option'(X17)),X18),s(bool,'F_0'))) = s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X16),s(fun(bool,'type.option.option'(X17)),X18))) | s(bool,'T_0') = s(bool,sK6(X16,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16)) )),
  inference(superposition,[],[f195,f647])).
fof(f4536,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X1)) )),
  inference(condensation,[],[f4535])).
fof(f4535,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(duplicate_literal_removal,[],[f4513])).
fof(f4513,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f4325,f956])).
fof(f4534,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(condensation,[],[f4533])).
fof(f4533,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,X25) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool))) )),
  inference(duplicate_literal_removal,[],[f4516])).
fof(f4516,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,X25) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f4325,f958])).
fof(f4475,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,sK7(X18,X17,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),X17),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) )),
  inference(subsumption_resolution,[],[f4466,f128])).
fof(f4466,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | s(bool,X18) = s(bool,sK7(X18,X17,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),X17),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) )),
  inference(superposition,[],[f618,f958])).
fof(f4473,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK7(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4461,f128])).
fof(f4461,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X3) = s(bool,sK7(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f618,f220])).
fof(f4330,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) )),
  inference(condensation,[],[f4329])).
fof(f4329,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool))) )),
  inference(duplicate_literal_removal,[],[f4273])).
fof(f4273,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f1062,f958])).
fof(f4255,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,sK7('F_0',X17,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),X17),s(bool,X18))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) )),
  inference(subsumption_resolution,[],[f4230,f128])).
fof(f4230,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X17,bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),X17),s(bool,X18))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) )),
  inference(superposition,[],[f613,f958])).
fof(f4253,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4225,f128])).
fof(f4225,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f613,f220])).
fof(f4200,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) | s(bool,'F_0') = s(bool,sK7('F_0',sK6('const.option.SOME_1'(s(fun(bool,bool),X0)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f613,f894])).
fof(f3929,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,X60) = s(bool,X62) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) )),
  inference(subsumption_resolution,[],[f3531,f128])).
fof(f3531,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,X60) = s(bool,X62) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) )),
  inference(superposition,[],[f1061,f958])).
fof(f3901,plain,(
  ( ! [X76,X74,X75] : (s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,'F_0') = s(bool,X75) | s(bool,X74) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f3453,f128])).
fof(f3453,plain,(
  ( ! [X76,X74,X75] : (~p(s(bool,'T_0')) | s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,'F_0') = s(bool,X75) | s(bool,X74) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f1061,f958])).
fof(f3476,plain,(
  ( ! [X14,X15,X13] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,'F_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool))) )),
  inference(superposition,[],[f1063,f958])).
fof(f3028,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') != s(bool,X56) | s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(forward_demodulation,[],[f2900,f894])).
fof(f2900,plain,(
  ( ! [X56,X55] : (s(bool,'T_0') != s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool)))) | s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f186,f1504])).
fof(f3027,plain,(
  ( ! [X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(subsumption_resolution,[],[f2896,f182])).
fof(f2896,plain,(
  ( ! [X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f177,f1504])).
fof(f3026,plain,(
  ( ! [X41,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'F_0') = s(bool,X42) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(subsumption_resolution,[],[f2890,f128])).
fof(f2890,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'F_0') = s(bool,X42) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f1061,f1504])).
fof(f3023,plain,(
  ( ! [X28,X29,X27] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(subsumption_resolution,[],[f2883,f128])).
fof(f2883,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f511,f1504])).
fof(f3022,plain,(
  ( ! [X24,X23] : (s(bool,X24) != s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X23) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(subsumption_resolution,[],[f2881,f128])).
fof(f2881,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | s(bool,X24) != s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X23) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f222,f1504])).
fof(f2988,plain,(
  ( ! [X85,X83,X84] : (s(bool,'F_0') != s(bool,f(s(X83,sK8(X84,X85,bool,X83)))) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X83,sK8(X84,X85,bool,X83))))),bool))) )),
  inference(forward_demodulation,[],[f2817,f894])).
fof(f2817,plain,(
  ( ! [X85,X83,X84] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X83,sK8(X84,X85,bool,X83)))) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X83,sK8(X84,X85,bool,X83))))),bool))) )),
  inference(superposition,[],[f196,f1504])).
fof(f2898,plain,(
  ( ! [X52,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool)) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f185,f1504])).
fof(f2857,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool))) )),
  inference(superposition,[],[f185,f1504])).
fof(f2810,plain,(
  ( ! [X66,X67] : (s(bool,X67) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) )),
  inference(superposition,[],[f186,f1504])).
fof(f2620,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(X8),happ(s(fun(bool,'type.option.option'(X8)),X9),s(bool,'F_0'))) = s('type.option.option'(X8),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))),s(fun(bool,'type.option.option'(X8)),X9))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f195,f1669])).
fof(f1673,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X58,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,X57)))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(forward_demodulation,[],[f1599,f894])).
fof(f1599,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,X57)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X58,bool)) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f188,f1437])).
fof(f1669,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f1592,f182])).
fof(f1592,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f177,f1437])).
fof(f1594,plain,(
  ( ! [X47,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,X47) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f185,f1437])).
fof(f1554,plain,(
  ( ! [X59,X60] : (s(bool,X60) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f186,f1437])).
fof(f1504,plain,(
  ( ! [X19] : (s(bool,X19) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) )),
  inference(superposition,[],[f1437,f894])).
fof(f1437,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f1436])).
fof(f1436,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X16)) )),
  inference(duplicate_literal_removal,[],[f1307])).
fof(f1307,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f956,f135])).
fof(f1280,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X1) = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f534,f177])).
fof(f1249,plain,(
  ( ! [X30,X31,X32] : (s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f1232,f128])).
fof(f1232,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f511,f960])).
fof(f1197,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f529,f177])).
fof(f1196,plain,(
  ( ! [X23,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,'F_0') = s(bool,X23) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool))) )),
  inference(superposition,[],[f529,f894])).
fof(f1174,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X22)),X23,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f188,f1063])).
fof(f1173,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X20),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X20),s('type.option.option'(bool),X21)))) | s('type.option.option'(bool),X21) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f187,f1063])).
fof(f1171,plain,(
  ( ! [X15,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X16))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f186,f1063])).
fof(f1169,plain,(
  ( ! [X12,X11] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X12))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f185,f1063])).
fof(f1164,plain,(
  ( ! [X4,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f185,f1063])).
fof(f1163,plain,(
  ( ! [X2,X3,X1] : (s('type.option.option'(X2),happ(s(fun(bool,'type.option.option'(X2)),X3),s(bool,X1))) = s('type.option.option'(X2),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X2)),X3))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f195,f1063])).
fof(f1157,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X23),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X23,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f188,f1063])).
fof(f1156,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X20),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X20),s('type.option.option'(bool),X21)))) | s('type.option.option'(bool),X21) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f187,f1063])).
fof(f1154,plain,(
  ( ! [X15,X16] : (s('type.option.option'(bool),X16) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X16))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f186,f1063])).
fof(f1152,plain,(
  ( ! [X12,X11] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X12))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))))) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f185,f1063])).
fof(f1147,plain,(
  ( ! [X4,X2,X3] : (s('type.option.option'(X3),happ(s(fun(bool,'type.option.option'(X3)),X4),s(bool,'T_0'))) = s('type.option.option'(X3),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))),s(fun(bool,'type.option.option'(X3)),X4))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f195,f1063])).
fof(f1138,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f1063,f1063])).
fof(f1132,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1063,f220])).
fof(f1098,plain,(
  ( ! [X23,X22] : (s(bool,X23) = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1090,f128])).
fof(f1090,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(bool,X23) = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'F_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f1061,f960])).
fof(f1067,plain,(
  ( ! [X35,X36] : (s(bool,X35) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X35)),bool),X36,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X35)) )),
  inference(forward_demodulation,[],[f1049,f894])).
fof(f1049,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,'T_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X35)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X35)),bool),X36,bool)) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f188,f960])).
fof(f1066,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) != s(bool,X34) | ~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X34)))) | s(bool,'F_0') = s(bool,X32)) )),
  inference(forward_demodulation,[],[f1048,f894])).
fof(f1048,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X34)))) | s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool)) | s(bool,'F_0') = s(bool,X32)) )),
  inference(superposition,[],[f187,f960])).
fof(f1064,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,'T_0') != s(bool,X29) | s(bool,'F_0') = s(bool,X28)) )),
  inference(forward_demodulation,[],[f1046,f894])).
fof(f1046,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') != s(bool,X29) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)))) | s(bool,'F_0') = s(bool,X28)) )),
  inference(superposition,[],[f186,f960])).
fof(f1063,plain,(
  ( ! [X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1042,f182])).
fof(f1042,plain,(
  ( ! [X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f177,f960])).
fof(f1061,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1060,f894])).
fof(f1060,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1036,f128])).
fof(f1036,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f193,f960])).
fof(f1044,plain,(
  ( ! [X24,X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) | s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'F_0') = s(bool,X24)) )),
  inference(superposition,[],[f185,f960])).
fof(f883,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK8(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK8(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f196,f135])).
fof(f878,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK8(X16,X17,X18,bool))) )),
  inference(superposition,[],[f196,f135])).
fof(f734,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'F_0') != s(bool,X15) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f187,f135])).
fof(f647,plain,(
  ( ! [X8] : (s('type.option.option'(bool),X8) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X8,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X8)) )),
  inference(superposition,[],[f177,f135])).
fof(f613,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | s(bool,'F_0') = s(bool,sK7('F_0',X7,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f188,f135])).
fof(f573,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') != s(bool,X21) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f186,f135])).
fof(f534,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f185,f135])).
fof(f529,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f185,f135])).
fof(f525,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f208,f185])).
fof(f15977,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X1,bool)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X2),s('type.option.option'(bool),X0)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X2),s('type.option.option'(bool),X1)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f731,f647])).
fof(f15652,plain,(
  ( ! [X187,X185,X188,X186] : (s('type.option.option'('type.option.option'(X186)),'const.option.SOME_1'(s('type.option.option'(X186),X187))) != s('type.option.option'('type.option.option'(X186)),'const.option.SOME_1'(s('type.option.option'(X186),happ(s(fun('type.option.option'(bool),'type.option.option'(X186)),X188),s('type.option.option'(bool),X185))))) | s('type.option.option'(X186),X187) = s('type.option.option'(X186),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(fun('type.option.option'(bool),'type.option.option'(X186)),X188))) | s(bool,'T_0') = s(bool,sK6(X185,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185)) )),
  inference(superposition,[],[f799,f647])).
fof(f15648,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'('type.option.option'(X166)),'const.option.SOME_1'(s('type.option.option'(X166),X167))) != s('type.option.option'('type.option.option'(X166)),'const.option.SOME_1'(s('type.option.option'(X166),happ(s(fun('type.option.option'(bool),'type.option.option'(X166)),X168),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))))) | s('type.option.option'(X166),X167) = s('type.option.option'(X166),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X165))),s(fun('type.option.option'(bool),'type.option.option'(X166)),X168))) | s(bool,'T_0') = s(bool,sK6(X165,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) )),
  inference(superposition,[],[f799,f647])).
fof(f15647,plain,(
  ( ! [X163,X161,X164,X162] : (s('type.option.option'('type.option.option'(X162)),'const.option.SOME_1'(s('type.option.option'(X162),X163))) != s('type.option.option'('type.option.option'(X162)),'const.option.SOME_1'(s('type.option.option'(X162),happ(s(fun(bool,'type.option.option'(X162)),X164),s(bool,'T_0'))))) | s('type.option.option'(X162),X163) = s('type.option.option'(X162),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X161,bool)))),s(fun(bool,'type.option.option'(X162)),X164))) | s('type.option.option'(bool),X161) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X161)) )),
  inference(superposition,[],[f799,f647])).
fof(f15600,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),happ(s(fun(X1,'type.option.option'(bool)),X2),s(X1,X3))))) | s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3))),s(fun(X1,'type.option.option'(bool)),X2))) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f799,f647])).
fof(f15128,plain,(
  ( ! [X12,X13] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X12))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X13))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X13,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) )),
  inference(superposition,[],[f655,f647])).
fof(f15124,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X1))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X1,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f655,f647])).
fof(f14962,plain,(
  ( ! [X12,X13] : (s('type.option.option'(bool),X12) != s('type.option.option'(bool),X13) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X13,bool)))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X13) | s(bool,'T_0') = s(bool,sK6(X12,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) )),
  inference(superposition,[],[f653,f647])).
fof(f14958,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X1) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X0))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X1,bool)))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f653,f647])).
fof(f14405,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(X22),happ(s(fun(bool,'type.option.option'(X22)),X23),s(bool,'T_0'))) = s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X21),s(fun(bool,'type.option.option'(X22)),X23))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f14370])).
fof(f14370,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(X22),happ(s(fun(bool,'type.option.option'(X22)),X23),s(bool,'T_0'))) = s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X21),s(fun(bool,'type.option.option'(X22)),X23))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21)) )),
  inference(superposition,[],[f796,f647])).
fof(f14387,plain,(
  ( ! [X6,X4,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.OPTION_BIND_2'(s('type.option.option'(X4),X6),s(fun(X4,'type.option.option'(bool)),X5))) | s('type.option.option'(X4),'const.option.NONE_0') = s('type.option.option'(X4),X6) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(X4,'type.option.option'(bool)),X5),s(X4,sK6(X6,X4))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X4,'type.option.option'(bool)),X5),s(X4,sK6(X6,X4))))) )),
  inference(superposition,[],[f796,f647])).
fof(f5022,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),X54) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X53) = s(bool,sK6(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool))) )),
  inference(forward_demodulation,[],[f4988,f894])).
fof(f4988,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),X54) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X53) = s(bool,sK6(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool))) )),
  inference(superposition,[],[f648,f1504])).
fof(f4977,plain,(
  ( ! [X24,X23] : (s('type.option.option'('type.option.option'(bool)),X24) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X23) = s('type.option.option'(bool),sK6(X24,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X24) | s(bool,'T_0') = s(bool,sK6(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23)) )),
  inference(superposition,[],[f648,f647])).
fof(f4972,plain,(
  ( ! [X8,X9] : (s('type.option.option'('type.option.option'(bool)),X9) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X9,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X9) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f648,f1669])).
fof(f4971,plain,(
  ( ! [X6,X7] : (s('type.option.option'('type.option.option'(bool)),X7) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X6))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X7,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X7) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(superposition,[],[f648,f647])).
fof(f4968,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(bool)),X1) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),sK6(X1,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f648,f1669])).
fof(f4817,plain,(
  ( ! [X24,X25] : (~p(s(bool,X25)) | s(bool,X25) = s(bool,sK6(X24,bool)) | s('type.option.option'(bool),X24) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(subsumption_resolution,[],[f4734,f128])).
fof(f4734,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | s(bool,X25) = s(bool,sK6(X24,bool)) | s('type.option.option'(bool),X24) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(superposition,[],[f193,f647])).
fof(f4805,plain,(
  ( ! [X12] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X12)),'type.option.option'(bool)),bool))) )),
  inference(forward_demodulation,[],[f4634,f894])).
fof(f4634,plain,(
  ( ! [X12] : (s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X12)),'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6('const.option.SOME_1'(s('type.option.option'(bool),X12)),'type.option.option'(bool)))) )),
  inference(superposition,[],[f647,f894])).
fof(f4804,plain,(
  ( ! [X10,X8,X9] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X8,'type.option.option'(bool)),X10),s(X8,X9))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X8,'type.option.option'(bool)),X10),s(X8,X9))) | s(bool,'T_0') = s(bool,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X8,'type.option.option'(bool)),X10)),bool))) )),
  inference(forward_demodulation,[],[f4633,f195])).
fof(f4633,plain,(
  ( ! [X10,X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X8,'type.option.option'(bool)),X10),s(X8,X9))) | s(bool,'T_0') = s(bool,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X8,'type.option.option'(bool)),X10)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.OPTION_BIND_2'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X8,'type.option.option'(bool)),X10)))) )),
  inference(superposition,[],[f647,f195])).
fof(f4774,plain,(
  ( ! [X94,X95] : (s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) )),
  inference(superposition,[],[f186,f647])).
fof(f4709,plain,(
  ( ! [X30,X29] : (s('type.option.option'(bool),X29) != s('type.option.option'(bool),X30) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X29,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X29)) )),
  inference(superposition,[],[f186,f647])).
fof(f4707,plain,(
  ( ! [X26,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X25))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X25,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X25)) )),
  inference(superposition,[],[f185,f647])).
fof(f4692,plain,(
  ( ! [X57,X56,X55] : (s(X57,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(X57,g(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(fun('type.option.option'(bool),X57),X55) = s(fun('type.option.option'(bool),X57),X56) | s(bool,'T_0') = s(bool,sK6(sK8(X55,X56,X57,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X55,X56,X57,'type.option.option'(bool)))) )),
  inference(superposition,[],[f196,f647])).
fof(f4689,plain,(
  ( ! [X51] : (s('type.option.option'('type.option.option'(bool)),X51) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X51) | s(bool,'T_0') = s(bool,sK6(sK6(X51,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X51,'type.option.option'(bool)))) )),
  inference(superposition,[],[f177,f647])).
fof(f4688,plain,(
  ( ! [X50,X48,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),f(s(X48,sK8(X49,X50,'type.option.option'(bool),X48)))) | s(fun(X48,'type.option.option'(bool)),X49) = s(fun(X48,'type.option.option'(bool)),X50) | s(bool,'T_0') = s(bool,sK6(g(s(X48,sK8(X49,X50,'type.option.option'(bool),X48))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),g(s(X48,sK8(X49,X50,'type.option.option'(bool),X48))))) )),
  inference(superposition,[],[f196,f647])).
fof(f4681,plain,(
  ( ! [X31,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X31))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X32))) | s(bool,'T_0') = s(bool,sK6(X31,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X31)) )),
  inference(superposition,[],[f186,f647])).
fof(f4679,plain,(
  ( ! [X28,X27] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X28))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X27) = s('type.option.option'(bool),X28) | s(bool,'T_0') = s(bool,sK6(X27,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27)) )),
  inference(superposition,[],[f185,f647])).
fof(f2989,plain,(
  ( ! [X86] : (s('type.option.option'(bool),X86) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X86) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X86,bool))),bool))) )),
  inference(forward_demodulation,[],[f2818,f894])).
fof(f2818,plain,(
  ( ! [X86] : (s('type.option.option'(bool),X86) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X86) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X86,bool))),bool))) )),
  inference(superposition,[],[f177,f1504])).
fof(f2982,plain,(
  ( ! [X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) )),
  inference(forward_demodulation,[],[f2808,f894])).
fof(f2808,plain,(
  ( ! [X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) )),
  inference(superposition,[],[f185,f1504])).
fof(f2647,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),X21) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X21))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f186,f1669])).
fof(f2645,plain,(
  ( ! [X17,X16] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X17))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X17) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f185,f1669])).
fof(f2639,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(X7),happ(s(fun(bool,'type.option.option'(X7)),X8),s(bool,X6))) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X7)),X8))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f195,f1669])).
fof(f2627,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),X21) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X21))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f186,f1669])).
fof(f2625,plain,(
  ( ! [X17,X16] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X17))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))))) | s('type.option.option'(bool),X17) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f185,f1669])).
fof(f2350,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f185,f1445])).
fof(f1711,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) )),
  inference(condensation,[],[f1710])).
fof(f1710,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(duplicate_literal_removal,[],[f1685])).
fof(f1685,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f568,f956])).
fof(f1693,plain,(
  ( ! [X33,X32] : (s(bool,X32) != s(bool,X33) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool))) )),
  inference(superposition,[],[f568,f894])).
fof(f1279,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool)) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f534,f894])).
fof(f913,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8)))) )),
  inference(superposition,[],[f640,f135])).
fof(f4997,plain,(
  ( ! [X76,X77,X75] : (s('type.option.option'(bool),X77) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) | s(bool,sK6(X77,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X75)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X77) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f648,f956])).
fof(f4996,plain,(
  ( ! [X74,X73] : (s('type.option.option'(bool),X74) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X74,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X74) | s(bool,'F_0') = s(bool,X73)) )),
  inference(superposition,[],[f648,f960])).
fof(f4995,plain,(
  ( ! [X72,X71] : (s('type.option.option'(bool),X72) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X72,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f648,f1445])).
fof(f4994,plain,(
  ( ! [X70,X69] : (s('type.option.option'(bool),X70) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X70,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X69)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X70) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(superposition,[],[f648,f1504])).
fof(f4993,plain,(
  ( ! [X68,X66,X67] : (s('type.option.option'(bool),X67) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X67,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X67) | s(bool,X66) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f648,f958])).
fof(f4507,plain,(
  ( ! [X57,X58] : (s(bool,X57) != s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) )),
  inference(superposition,[],[f4325,f894])).
fof(f4332,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) )),
  inference(condensation,[],[f4331])).
fof(f4331,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(duplicate_literal_removal,[],[f4270])).
fof(f4270,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1062,f956])).
fof(f1445,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f1444])).
fof(f1444,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15)) )),
  inference(duplicate_literal_removal,[],[f1298])).
fof(f1298,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f956,f135])).
fof(f1209,plain,(
  ( ! [X24,X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f529,f894])).
fof(f1144,plain,(
  ( ! [X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool))) )),
  inference(superposition,[],[f1063,f894])).
fof(f1254,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))))),
  inference(unit_resulting_resolution,[],[f597,f185])).
fof(f597,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f525,f185])).
fof(f12918,plain,(
  ( ! [X17,X15,X16] : (s(bool,X15) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17) | s(bool,'T_0') = s(bool,sK8(X16,X17,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f878,f220])).
fof(f12919,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,sK8(X18,X19,bool,bool)) | s(bool,X20) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f878,f220])).
fof(f12920,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,sK8(X22,X23,bool,bool)) | s(bool,X24) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool))) )),
  inference(superposition,[],[f878,f958])).
fof(f12922,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,'T_0') = s(bool,sK8(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f878,f958])).
fof(f16302,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s('type.option.option'(X35),happ(s(fun(X37,'type.option.option'(X35)),X38),s(X37,X39))) = s('type.option.option'(X35),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X37),'const.option.SOME_1'(s(X37,X39))),s(fun(X37,'type.option.option'(X35)),X38)),X36,'type.option.option'(X35))) | s(bool,X40) = s(bool,happ(s(fun('type.option.option'(X35),bool),X36),s('type.option.option'(X35),happ(s(fun(X37,'type.option.option'(X35)),X38),s(X37,X39))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool))) )),
  inference(subsumption_resolution,[],[f16262,f128])).
fof(f16262,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'T_0')) | s('type.option.option'(X35),happ(s(fun(X37,'type.option.option'(X35)),X38),s(X37,X39))) = s('type.option.option'(X35),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X37),'const.option.SOME_1'(s(X37,X39))),s(fun(X37,'type.option.option'(X35)),X38)),X36,'type.option.option'(X35))) | s(bool,X40) = s(bool,happ(s(fun('type.option.option'(X35),bool),X36),s('type.option.option'(X35),happ(s(fun(X37,'type.option.option'(X35)),X38),s(X37,X39))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool))) )),
  inference(superposition,[],[f819,f958])).
fof(f16300,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),happ(s(fun(X7,'type.option.option'(X5)),X8),s(X7,X9))) = s('type.option.option'(X5),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))),s(fun(X7,'type.option.option'(X5)),X8)),X6,'type.option.option'(X5))) | s(bool,X10) = s(bool,happ(s(fun('type.option.option'(X5),bool),X6),s('type.option.option'(X5),happ(s(fun(X7,'type.option.option'(X5)),X8),s(X7,X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f16257,f128])).
fof(f16257,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X5),happ(s(fun(X7,'type.option.option'(X5)),X8),s(X7,X9))) = s('type.option.option'(X5),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))),s(fun(X7,'type.option.option'(X5)),X8)),X6,'type.option.option'(X5))) | s(bool,X10) = s(bool,happ(s(fun('type.option.option'(X5),bool),X6),s('type.option.option'(X5),happ(s(fun(X7,'type.option.option'(X5)),X8),s(X7,X9))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f819,f220])).
fof(f15658,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),X4))) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X3),s(fun(X1,'type.option.option'(X0)),X2))))) | s('type.option.option'(X0),X4) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) )),
  inference(superposition,[],[f799,f796])).
fof(f15654,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),X199))) != s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun('type.option.option'(X194),'type.option.option'(X198)),X200),s('type.option.option'(X194),'const.option.OPTION_BIND_2'(s('type.option.option'(X195),X197),s(fun(X195,'type.option.option'(X194)),X196))))))) | s('type.option.option'(X198),X199) = s('type.option.option'(X198),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X194)),'const.option.SOME_1'(s('type.option.option'(X194),happ(s(fun(X195,'type.option.option'(X194)),X196),s(X195,sK6(X197,X195)))))),s(fun('type.option.option'(X194),'type.option.option'(X198)),X200))) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) )),
  inference(superposition,[],[f799,f796])).
fof(f15653,plain,(
  ( ! [X191,X189,X192,X190,X193] : (s('type.option.option'('type.option.option'(X191)),'const.option.SOME_1'(s('type.option.option'(X191),X192))) != s('type.option.option'('type.option.option'(X191)),'const.option.SOME_1'(s('type.option.option'(X191),happ(s(fun('type.option.option'(X189),'type.option.option'(X191)),X193),s('type.option.option'(X189),X190))))) | s('type.option.option'(X191),X192) = s('type.option.option'(X191),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X189)),'const.option.SOME_1'(s('type.option.option'(X189),'const.option.SOME_1'(s(X189,sK6(X190,X189)))))),s(fun('type.option.option'(X189),'type.option.option'(X191)),X193))) | s('type.option.option'(X189),'const.option.NONE_0') = s('type.option.option'(X189),X190)) )),
  inference(superposition,[],[f799,f177])).
fof(f15674,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s('type.option.option'(X75),X76) = s('type.option.option'(X75),happ(s(fun(bool,'type.option.option'(X75)),X77),s(bool,'T_0'))) | s('type.option.option'('type.option.option'(X75)),'const.option.SOME_1'(s('type.option.option'(X75),X76))) != s('type.option.option'('type.option.option'(X75)),'const.option.SOME_1'(s('type.option.option'(X75),happ(s(fun(bool,'type.option.option'(X75)),X77),s(bool,X74))))) | s(bool,X74) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(forward_demodulation,[],[f15625,f195])).
fof(f15625,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s('type.option.option'('type.option.option'(X75)),'const.option.SOME_1'(s('type.option.option'(X75),X76))) != s('type.option.option'('type.option.option'(X75)),'const.option.SOME_1'(s('type.option.option'(X75),happ(s(fun(bool,'type.option.option'(X75)),X77),s(bool,X74))))) | s('type.option.option'(X75),X76) = s('type.option.option'(X75),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X75)),X77))) | s(bool,X74) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f799,f220])).
fof(f15673,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'(X70),X71) = s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,'T_0'))) | s('type.option.option'('type.option.option'(X70)),'const.option.SOME_1'(s('type.option.option'(X70),X71))) != s('type.option.option'('type.option.option'(X70)),'const.option.SOME_1'(s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,X69))))) | s(bool,X69) = s(bool,X73) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) )),
  inference(forward_demodulation,[],[f15624,f195])).
fof(f15624,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'('type.option.option'(X70)),'const.option.SOME_1'(s('type.option.option'(X70),X71))) != s('type.option.option'('type.option.option'(X70)),'const.option.SOME_1'(s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,X69))))) | s('type.option.option'(X70),X71) = s('type.option.option'(X70),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X70)),X72))) | s(bool,X69) = s(bool,X73) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) )),
  inference(superposition,[],[f799,f958])).
fof(f15616,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.option.option'('type.option.option'(X35)),'const.option.SOME_1'(s('type.option.option'(X35),X36))) != s('type.option.option'('type.option.option'(X35)),'const.option.SOME_1'(s('type.option.option'(X35),happ(s(fun(bool,'type.option.option'(X35)),X37),s(bool,'T_0'))))) | s('type.option.option'(X35),X36) = s('type.option.option'(X35),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))),s(fun(bool,'type.option.option'(X35)),X37))) | s(bool,X34) = s(bool,X38) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) )),
  inference(superposition,[],[f799,f958])).
fof(f15612,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.option.option'('type.option.option'(X16)),'const.option.SOME_1'(s('type.option.option'(X16),X17))) != s('type.option.option'('type.option.option'(X16)),'const.option.SOME_1'(s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X18),s(bool,X15))))) | s('type.option.option'(X16),X17) = s('type.option.option'(X16),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(fun(bool,'type.option.option'(X16)),X18))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f799,f220])).
fof(f15611,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.option.option'('type.option.option'(X10)),'const.option.SOME_1'(s('type.option.option'(X10),X11))) != s('type.option.option'('type.option.option'(X10)),'const.option.SOME_1'(s('type.option.option'(X10),happ(s(fun(bool,'type.option.option'(X10)),X12),s(bool,'T_0'))))) | s('type.option.option'(X10),X11) = s('type.option.option'(X10),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))),s(fun(bool,'type.option.option'(X10)),X12))) | s(bool,X9) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f799,f220])).
fof(f15606,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.option.option'('type.option.option'(X36)),'const.option.SOME_1'(s('type.option.option'(X36),X37))) != s('type.option.option'('type.option.option'(X36)),'const.option.SOME_1'(s('type.option.option'(X36),happ(s(fun(X38,'type.option.option'(X36)),X39),s(X38,X40))))) | s('type.option.option'(X36),sK6('const.option.SOME_1'(s('type.option.option'(X36),X37)),'type.option.option'(X36))) = s('type.option.option'(X36),'const.option.OPTION_BIND_2'(s('type.option.option'(X38),'const.option.SOME_1'(s(X38,X40))),s(fun(X38,'type.option.option'(X36)),X39)))) )),
  inference(superposition,[],[f799,f894])).
fof(f15605,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s('type.option.option'('type.option.option'(X29)),'const.option.SOME_1'(s('type.option.option'(X29),happ(s(fun(X33,'type.option.option'(X29)),X34),s(X33,X35))))) != s('type.option.option'('type.option.option'(X29)),'const.option.SOME_1'(s('type.option.option'(X29),'const.option.OPTION_BIND_2'(s('type.option.option'(X30),X32),s(fun(X30,'type.option.option'(X29)),X31))))) | s('type.option.option'(X29),happ(s(fun(X30,'type.option.option'(X29)),X31),s(X30,sK6(X32,X30)))) = s('type.option.option'(X29),'const.option.OPTION_BIND_2'(s('type.option.option'(X33),'const.option.SOME_1'(s(X33,X35))),s(fun(X33,'type.option.option'(X29)),X34))) | s('type.option.option'(X30),'const.option.NONE_0') = s('type.option.option'(X30),X32)) )),
  inference(superposition,[],[f799,f796])).
fof(f15602,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X16] : (s('type.option.option'('type.option.option'(X10)),'const.option.SOME_1'(s('type.option.option'(X10),happ(s(fun(X11,'type.option.option'(X10)),X13),s(X11,X12))))) != s('type.option.option'('type.option.option'(X10)),'const.option.SOME_1'(s('type.option.option'(X10),happ(s(fun(X14,'type.option.option'(X10)),X15),s(X14,X16))))) | s('type.option.option'(X10),'const.option.OPTION_BIND_2'(s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X12))),s(fun(X11,'type.option.option'(X10)),X13))) = s('type.option.option'(X10),'const.option.OPTION_BIND_2'(s('type.option.option'(X14),'const.option.SOME_1'(s(X14,X16))),s(fun(X14,'type.option.option'(X10)),X15)))) )),
  inference(superposition,[],[f799,f195])).
fof(f15131,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X23))) != s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X24))) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(X24,X22)))) = s('type.option.option'(X22),sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X24)) )),
  inference(superposition,[],[f655,f894])).
fof(f15130,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),X21))) != s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),X20),s(fun(X18,'type.option.option'(X17)),X19))))) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(X21,X17)))) = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X21) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) )),
  inference(superposition,[],[f655,f796])).
fof(f15129,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X15))) != s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X16))) | s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X15,X14)))) = s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X16,X14)))) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X16) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X15)) )),
  inference(superposition,[],[f655,f177])).
fof(f15126,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X10))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6(X10,X6)))) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X10)) )),
  inference(superposition,[],[f655,f195])).
fof(f15123,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.option.option'(X0)),X1) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),X2))) | s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(sK6(X1,'type.option.option'(X0)),X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK6(X1,'type.option.option'(X0))) | s('type.option.option'('type.option.option'(X0)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X0)),X1)) )),
  inference(superposition,[],[f655,f177])).
fof(f15141,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X23))) != s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X24))) | s('type.option.option'(X22),X24) = s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))))) )),
  inference(forward_demodulation,[],[f15122,f894])).
fof(f15122,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X23))) != s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X24))) | s('type.option.option'(X22),X24) = s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)))) )),
  inference(superposition,[],[f655,f894])).
fof(f15121,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),X21))) != s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),X20),s(fun(X18,'type.option.option'(X17)),X19))))) | s('type.option.option'(X17),X21) = s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) )),
  inference(superposition,[],[f655,f796])).
fof(f15135,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X10))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))))) | s('type.option.option'(X6),X10) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))))) )),
  inference(forward_demodulation,[],[f15117,f195])).
fof(f15117,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X10))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))))) | s('type.option.option'(X6),X10) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)))) )),
  inference(superposition,[],[f655,f195])).
fof(f14966,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),X1))) = s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(equality_resolution,[],[f653])).
fof(f14964,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),X21) != s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),X20),s(fun(X18,'type.option.option'(X17)),X19))) | s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(X21,X17)))))) = s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X21) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) )),
  inference(superposition,[],[f653,f796])).
fof(f14963,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'(X14),X15) != s('type.option.option'(X14),X16) | s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X15,X14)))))) = s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X16,X14)))))) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X16) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X15)) )),
  inference(superposition,[],[f653,f177])).
fof(f14976,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),X23) != s('type.option.option'(X22),X24) | s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X24))) = s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))))))) )),
  inference(forward_demodulation,[],[f14957,f894])).
fof(f14957,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),X23) != s('type.option.option'(X22),X24) | s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X24))) = s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)))) )),
  inference(superposition,[],[f653,f894])).
fof(f14956,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),X21) != s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),X20),s(fun(X18,'type.option.option'(X17)),X19))) | s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),X21))) = s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) )),
  inference(superposition,[],[f653,f796])).
fof(f14970,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),X10) != s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X10))) = s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))))))) )),
  inference(forward_demodulation,[],[f14952,f195])).
fof(f14952,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),X10) != s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X10))) = s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)))) )),
  inference(superposition,[],[f653,f195])).
fof(f14402,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'('type.option.option'(X63)),X67) != s('type.option.option'('type.option.option'(X63)),'const.option.SOME_1'(s('type.option.option'(X63),'const.option.OPTION_BIND_2'(s('type.option.option'(X64),X66),s(fun(X64,'type.option.option'(X63)),X65))))) | s('type.option.option'(X63),sK6(X67,'type.option.option'(X63))) = s('type.option.option'(X63),happ(s(fun(X64,'type.option.option'(X63)),X65),s(X64,sK6(X66,X64)))) | s('type.option.option'('type.option.option'(X63)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X63)),X67) | s('type.option.option'(X64),'const.option.NONE_0') = s('type.option.option'(X64),X66)) )),
  inference(superposition,[],[f648,f796])).
fof(f14396,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(X32),X36) != s('type.option.option'(X32),'const.option.OPTION_BIND_2'(s('type.option.option'(X33),X35),s(fun(X33,'type.option.option'(X32)),X34))) | s('type.option.option'('type.option.option'(X32)),'const.option.SOME_1'(s('type.option.option'(X32),X36))) = s('type.option.option'('type.option.option'(X32)),'const.option.SOME_1'(s('type.option.option'(X32),happ(s(fun(X33,'type.option.option'(X32)),X34),s(X33,sK6(X35,X33)))))) | s('type.option.option'(X33),'const.option.NONE_0') = s('type.option.option'(X33),X35)) )),
  inference(superposition,[],[f186,f796])).
fof(f14394,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),X26))) != s('type.option.option'('type.option.option'(X22)),'const.option.SOME_1'(s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(X23),X25),s(fun(X23,'type.option.option'(X22)),X24))))) | s('type.option.option'(X22),X26) = s('type.option.option'(X22),happ(s(fun(X23,'type.option.option'(X22)),X24),s(X23,sK6(X25,X23)))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X25)) )),
  inference(superposition,[],[f185,f796])).
fof(f14392,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X17))) != s('type.option.option'(X13),'const.option.OPTION_BIND_2'(s('type.option.option'(X14),X16),s(fun(X14,'type.option.option'(X13)),X15))) | s(X13,X17) = s(X13,sK6(happ(s(fun(X14,'type.option.option'(X13)),X15),s(X14,sK6(X16,X14))),X13)) | s('type.option.option'(X13),'const.option.NONE_0') = s('type.option.option'(X13),happ(s(fun(X14,'type.option.option'(X13)),X15),s(X14,sK6(X16,X14)))) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X16)) )),
  inference(superposition,[],[f648,f796])).
fof(f14419,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),happ(s(fun(X8,'type.option.option'(X7)),X9),s(X8,sK6(X10,X8)))) | s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X8),X10),s(fun(X8,'type.option.option'(X7)),X9))))) | s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),X10)) )),
  inference(forward_demodulation,[],[f14391,f194])).
fof(f14391,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X8),X10),s(fun(X8,'type.option.option'(X7)),X9))))) | s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X11),'const.option.NONE_0'),s(fun(X11,'type.option.option'(X7)),X12))) = s('type.option.option'(X7),happ(s(fun(X8,'type.option.option'(X7)),X9),s(X8,sK6(X10,X8)))) | s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),X10)) )),
  inference(superposition,[],[f528,f796])).
fof(f14408,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X17),s(bool,X15))) = s('type.option.option'(X16),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(fun(bool,'type.option.option'(X16)),X17))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f14368,f182])).
fof(f14368,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X17),s(bool,X15))) = s('type.option.option'(X16),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(fun(bool,'type.option.option'(X16)),X17))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f796,f956])).
fof(f14407,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(X11),happ(s(fun(bool,'type.option.option'(X11)),X12),s(bool,'T_0'))) = s('type.option.option'(X11),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))),s(fun(bool,'type.option.option'(X11)),X12))) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f14367,f182])).
fof(f14367,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(X11),happ(s(fun(bool,'type.option.option'(X11)),X12),s(bool,'T_0'))) = s('type.option.option'(X11),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))),s(fun(bool,'type.option.option'(X11)),X12))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f796,f958])).
fof(f1145,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f1063,f177])).
fof(f1210,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f529,f177])).
fof(f5005,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),X7) | s(bool,'F_0') = s(bool,sK6(X7,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X7) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(superposition,[],[f648,f647])).
fof(f5023,plain,(
  ( ! [X78,X79] : (s(bool,'F_0') = s(bool,sK6(X79,bool)) | s('type.option.option'(bool),X79) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) )),
  inference(forward_demodulation,[],[f4998,f894])).
fof(f4998,plain,(
  ( ! [X78,X79] : (s('type.option.option'(bool),X79) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,sK6(X79,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) )),
  inference(superposition,[],[f648,f1504])).
fof(f7725,plain,(
  ( ! [X10] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724])).
fof(f7724,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(forward_demodulation,[],[f7163,f894])).
fof(f7163,plain,(
  ( ! [X10,X9] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f4103,f2943])).
fof(f4103,plain,(
  ( ! [X10,X9] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f4053,f956])).
fof(f3936,plain,(
  ( ! [X116,X114,X115,X113] : (s(X113,X115) = s(X113,sK7(X115,X114,X113)) | s(bool,X116) = s(bool,happ(s(fun(X113,bool),X114),s(X113,X115))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X116)),bool))) )),
  inference(subsumption_resolution,[],[f3556,f128])).
fof(f3556,plain,(
  ( ! [X116,X114,X115,X113] : (~p(s(bool,'T_0')) | s(X113,X115) = s(X113,sK7(X115,X114,X113)) | s(bool,X116) = s(bool,happ(s(fun(X113,bool),X114),s(X113,X115))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X116)),bool))) )),
  inference(superposition,[],[f188,f958])).
fof(f629,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0)) | s(bool,X3) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f621,f128])).
fof(f621,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0)) | s(bool,X3) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f188,f220])).
fof(f7179,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool)) | s(bool,'T_0') = s(bool,sK6(X62,bool)) | s('type.option.option'(bool),X62) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X62)) )),
  inference(subsumption_resolution,[],[f4751,f2943])).
fof(f4751,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool)) | s(bool,'T_0') = s(bool,sK6(X62,bool)) | s('type.option.option'(bool),X62) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X62)) )),
  inference(superposition,[],[f958,f647])).
fof(f7177,plain,(
  ( ! [X56,X55] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool)) | s(bool,'T_0') = s(bool,sK6(X55,bool)) | s('type.option.option'(bool),X55) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X55)) )),
  inference(subsumption_resolution,[],[f4748,f2943])).
fof(f4748,plain,(
  ( ! [X56,X55] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool)) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,sK6(X55,bool)) | s('type.option.option'(bool),X55) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X55)) )),
  inference(superposition,[],[f956,f647])).
fof(f7175,plain,(
  ( ! [X21,X22] : (s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'T_0') = s(bool,sK6(X21,bool))) )),
  inference(subsumption_resolution,[],[f4658,f2943])).
fof(f4658,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,X22) | s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'T_0') = s(bool,sK6(X21,bool))) )),
  inference(superposition,[],[f647,f958])).
fof(f7173,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s('type.option.option'(bool),X16) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16) | s(bool,'T_0') = s(bool,sK6(X16,bool))) )),
  inference(subsumption_resolution,[],[f4656,f2943])).
fof(f4656,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s('type.option.option'(bool),X16) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6(X16,bool))) )),
  inference(superposition,[],[f647,f956])).
fof(f4066,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f4055,f894])).
fof(f4055,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(condensation,[],[f4054])).
fof(f4054,plain,(
  ( ! [X10,X9] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X10)) )),
  inference(duplicate_literal_removal,[],[f4003])).
fof(f4003,plain,(
  ( ! [X10,X9] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3602,f956])).
fof(f7134,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f3047,f2943])).
fof(f3047,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2943,f956])).
fof(f7123,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2) | ~p(s(bool,'F_0'))) )),
  inference(forward_demodulation,[],[f7122,f894])).
fof(f7122,plain,(
  ( ! [X2] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) )),
  inference(forward_demodulation,[],[f7121,f894])).
fof(f7121,plain,(
  ( ! [X2] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) )),
  inference(subsumption_resolution,[],[f2773,f2943])).
fof(f2773,plain,(
  ( ! [X2] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) )),
  inference(superposition,[],[f138,f1504])).
fof(f7110,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(condensation,[],[f7109])).
fof(f7109,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) )),
  inference(subsumption_resolution,[],[f2065,f2943])).
fof(f2065,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'F_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool))) )),
  inference(superposition,[],[f960,f956])).
fof(f5007,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),X12) | s(X10,sK6(X11,X10)) = s(X10,sK6(X12,X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X12) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(superposition,[],[f648,f177])).
fof(f5001,plain,(
  ( ! [X85,X86,X84] : (s('type.option.option'(X84),X86) != s('type.option.option'(X84),'const.option.SOME_1'(s(X84,X85))) | s(X84,sK6(X86,X84)) = s(X84,sK6('const.option.SOME_1'(s(X84,X85)),X84)) | s('type.option.option'(X84),'const.option.NONE_0') = s('type.option.option'(X84),X86)) )),
  inference(superposition,[],[f648,f894])).
fof(f4989,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),X56) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56) | s(bool,X55) = s(bool,X57) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) )),
  inference(superposition,[],[f648,f958])).
fof(f4986,plain,(
  ( ! [X50,X48,X49] : (s('type.option.option'(bool),X50) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X48) = s(bool,sK6(X50,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X50) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f648,f958])).
fof(f4985,plain,(
  ( ! [X47,X45,X46] : (s('type.option.option'(bool),X47) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s(bool,X45) = s(bool,sK6(X47,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X47) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X45)),bool)) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f648,f958])).
fof(f4984,plain,(
  ( ! [X43,X44,X42] : (s('type.option.option'(bool),X43) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X42) = s(bool,sK6(X43,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool))) )),
  inference(superposition,[],[f648,f958])).
fof(f4980,plain,(
  ( ! [X30,X31,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,X30) = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f648,f220])).
fof(f4979,plain,(
  ( ! [X28,X29,X27] : (s('type.option.option'(bool),X28) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X27) = s(bool,sK6(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f648,f220])).
fof(f4975,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'('type.option.option'(X17)),X21) != s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X20),s(X18,X19))))) | s('type.option.option'(X17),sK6(X21,'type.option.option'(X17))) = s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s(fun(X18,'type.option.option'(X17)),X20))) | s('type.option.option'('type.option.option'(X17)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X17)),X21)) )),
  inference(superposition,[],[f648,f195])).
fof(f4973,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'('type.option.option'(X10)),X12) != s('type.option.option'('type.option.option'(X10)),'const.option.SOME_1'(s('type.option.option'(X10),X11))) | s('type.option.option'(X10),sK6(X12,'type.option.option'(X10))) = s('type.option.option'(X10),'const.option.SOME_1'(s(X10,sK6(X11,X10)))) | s('type.option.option'('type.option.option'(X10)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X10)),X12) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(superposition,[],[f648,f177])).
fof(f5017,plain,(
  ( ! [X26,X27,X25] : (s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X26) | s('type.option.option'(X25),X26) != s('type.option.option'(X25),'const.option.SOME_1'(s(X25,X27))) | s(X25,X27) = s(X25,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X25),X26)),'type.option.option'(X25)),X25))) )),
  inference(forward_demodulation,[],[f4967,f894])).
fof(f4967,plain,(
  ( ! [X26,X27,X25] : (s('type.option.option'(X25),X26) != s('type.option.option'(X25),'const.option.SOME_1'(s(X25,X27))) | s(X25,X27) = s(X25,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X25),X26)),'type.option.option'(X25)),X25)) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),sK6('const.option.SOME_1'(s('type.option.option'(X25),X26)),'type.option.option'(X25)))) )),
  inference(superposition,[],[f648,f894])).
fof(f5014,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X20),s(X18,X19))) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,X21))) != s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X20),s(X18,X19))) | s(X17,X21) = s(X17,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s(fun(X18,'type.option.option'(X17)),X20)),X17))) )),
  inference(forward_demodulation,[],[f4964,f195])).
fof(f4964,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),'const.option.SOME_1'(s(X17,X21))) != s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X20),s(X18,X19))) | s(X17,X21) = s(X17,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s(fun(X18,'type.option.option'(X17)),X20)),X17)) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),'const.option.OPTION_BIND_2'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s(fun(X18,'type.option.option'(X17)),X20)))) )),
  inference(superposition,[],[f648,f195])).
fof(f5013,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) | s(X10,X12) = s(X10,sK6('const.option.SOME_1'(s(X10,sK6(X11,X10))),X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(subsumption_resolution,[],[f4962,f182])).
fof(f4962,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) | s(X10,X12) = s(X10,sK6('const.option.SOME_1'(s(X10,sK6(X11,X10))),X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),'const.option.SOME_1'(s(X10,sK6(X11,X10)))) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(superposition,[],[f648,f177])).
fof(f4694,plain,(
  ( ! [X2,X3,X1] : (s('type.option.option'(bool),X1) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1)) )),
  inference(superposition,[],[f534,f647])).
fof(f4644,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f647,f647])).
fof(f4306,plain,(
  ( ! [X57,X58] : (s(bool,X58) != s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool)) | s(bool,'T_0') = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool))) )),
  inference(superposition,[],[f1062,f894])).
fof(f4121,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f4053,f220])).
fof(f4120,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) )),
  inference(superposition,[],[f4053,f958])).
fof(f4020,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) )),
  inference(superposition,[],[f3602,f958])).
fof(f4053,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(condensation,[],[f4052])).
fof(f4052,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool))) )),
  inference(duplicate_literal_removal,[],[f4006])).
fof(f4006,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f3602,f958])).
fof(f3590,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f958])).
fof(f3602,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f3580])).
fof(f3580,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f958])).
fof(f3579,plain,(
  ( ! [X182,X180,X183,X181] : (s(X182,f(s(bool,'T_0'))) != s(X182,g(s(bool,'T_0'))) | s(fun(bool,X182),X180) = s(fun(bool,X182),X181) | s(bool,X183) = s(bool,sK8(X180,X181,X182,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X183)),bool))) )),
  inference(superposition,[],[f196,f958])).
fof(f3576,plain,(
  ( ! [X173,X174] : (s('type.option.option'(bool),X173) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X173) | s(bool,X174) = s(bool,sK6(X173,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X174)),bool))) )),
  inference(superposition,[],[f177,f958])).
fof(f3568,plain,(
  ( ! [X146,X147,X145] : (s(bool,'T_0') != s(bool,X146) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X145))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146))) | s(bool,X145) = s(bool,X147) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X147)),bool))) )),
  inference(superposition,[],[f186,f958])).
fof(f3566,plain,(
  ( ! [X140,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140))) | s(bool,X139) = s(bool,X140) | s(bool,X139) = s(bool,X141) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool))) )),
  inference(superposition,[],[f185,f958])).
fof(f3503,plain,(
  ( ! [X94,X92,X93] : (s(bool,X92) != s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))) | s(bool,X92) = s(bool,X94) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X94)),bool))) )),
  inference(superposition,[],[f186,f958])).
fof(f3921,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool))) )),
  inference(subsumption_resolution,[],[f3492,f525])).
fof(f3492,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X63) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool))) )),
  inference(superposition,[],[f568,f958])).
fof(f3477,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool)) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) )),
  inference(superposition,[],[f2943,f958])).
fof(f3464,plain,(
  ( ! [X99,X100,X98] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99))) | s(bool,X99) = s(bool,sK6('const.option.SOME_1'(s(bool,X98)),bool)) | s(bool,X98) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f185,f958])).
fof(f3905,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) )),
  inference(subsumption_resolution,[],[f3462,f182])).
fof(f3462,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f177,f958])).
fof(f3897,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,X47)),bool)) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f3444,f128])).
fof(f3444,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,X47)),bool)) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f511,f958])).
fof(f3896,plain,(
  ( ! [X43,X41,X42] : (s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f3442,f128])).
fof(f3442,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f222,f958])).
fof(f3425,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X196)),bool)) | s(bool,'T_0') = s(bool,sK8(X193,X194,X195,bool))) )),
  inference(superposition,[],[f196,f958])).
fof(f3422,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X187)),bool)) | s(bool,'T_0') = s(bool,sK6(X186,bool))) )),
  inference(superposition,[],[f177,f958])).
fof(f3414,plain,(
  ( ! [X158,X159,X157] : (s(bool,X158) != s(bool,X159) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X157))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X159))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X158)),bool)) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f186,f958])).
fof(f3875,plain,(
  ( ! [X109,X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X108) = s(bool,X109) | s(bool,'T_0') = s(bool,X109) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X107)),bool))) )),
  inference(subsumption_resolution,[],[f3393,f208])).
fof(f3393,plain,(
  ( ! [X109,X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X108) = s(bool,X109) | s(bool,'T_0') = s(bool,X109) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X107)),bool)) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f534,f958])).
fof(f3339,plain,(
  ( ! [X158,X159,X157] : (s(bool,X158) != s(bool,X159) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X157))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X159))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X157)),bool)) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f186,f958])).
fof(f3337,plain,(
  ( ! [X152,X151,X153] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X153))) | s(bool,X151) = s(bool,X153) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X151)),bool)) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f185,f958])).
fof(f3253,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f958,f220])).
fof(f3252,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) )),
  inference(superposition,[],[f958,f958])).
fof(f3036,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f2943,f220])).
fof(f2943,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) )),
  inference(subsumption_resolution,[],[f2942,f207])).
fof(f2942,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) )),
  inference(forward_demodulation,[],[f2772,f894])).
fof(f2772,plain,(
  ( ! [X1] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) )),
  inference(superposition,[],[f137,f1504])).
fof(f2727,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(superposition,[],[f1504,f1504])).
fof(f1398,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f956])).
fof(f1389,plain,(
  ( ! [X66,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s(bool,'T_0') = s(bool,X65) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f185,f956])).
fof(f1489,plain,(
  ( ! [X61,X62] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X62)) )),
  inference(subsumption_resolution,[],[f1387,f182])).
fof(f1387,plain,(
  ( ! [X61,X62] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f177,f956])).
fof(f1352,plain,(
  ( ! [X97,X98,X96] : (s(bool,X98) != s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f186,f956])).
fof(f1301,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) )),
  inference(superposition,[],[f956,f894])).
fof(f1255,plain,(
  ( ! [X0] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f597,f135])).
fof(f1110,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))))) )),
  inference(unit_resulting_resolution,[],[f523,f185])).
fof(f1093,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1082,f128])).
fof(f1082,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1061,f220])).
fof(f958,plain,(
  ( ! [X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f894,f220])).
fof(f915,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) != s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) | s(X6,X8) = s(X6,sK6('const.option.SOME_1'(s(X6,X7)),X6))) )),
  inference(superposition,[],[f185,f640])).
fof(f911,plain,(
  ( ! [X4,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f640,f220])).
fof(f909,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f640,f220])).
fof(f876,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK8(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f196,f220])).
fof(f874,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK8(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f196,f220])).
fof(f799,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),X11))) != s('type.option.option'('type.option.option'(X7)),'const.option.SOME_1'(s('type.option.option'(X7),happ(s(fun(X8,'type.option.option'(X7)),X10),s(X8,X9))))) | s('type.option.option'(X7),X11) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X8,'type.option.option'(X7)),X10)))) )),
  inference(superposition,[],[f185,f195])).
fof(f655,plain,(
  ( ! [X19,X20,X18] : (s('type.option.option'('type.option.option'(X18)),'const.option.SOME_1'(s('type.option.option'(X18),X19))) != s('type.option.option'('type.option.option'(X18)),'const.option.SOME_1'(s('type.option.option'(X18),X20))) | s('type.option.option'(X18),X20) = s('type.option.option'(X18),'const.option.SOME_1'(s(X18,sK6(X19,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X19)) )),
  inference(superposition,[],[f185,f177])).
fof(f653,plain,(
  ( ! [X14,X12,X13] : (s('type.option.option'(X12),X13) != s('type.option.option'(X12),X14) | s('type.option.option'('type.option.option'(X12)),'const.option.SOME_1'(s('type.option.option'(X12),X14))) = s('type.option.option'('type.option.option'(X12)),'const.option.SOME_1'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,sK6(X13,X12)))))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X13)) )),
  inference(superposition,[],[f186,f177])).
fof(f645,plain,(
  ( ! [X4,X5] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,'T_0') = s(bool,sK6(X4,bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f177,f220])).
fof(f643,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0) | s(bool,X1) = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f177,f220])).
fof(f574,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f186,f220])).
fof(f571,plain,(
  ( ! [X14,X15,X16] : (s(bool,X15) != s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f186,f220])).
fof(f569,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f186,f220])).
fof(f532,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f185,f220])).
fof(f530,plain,(
  ( ! [X10,X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f185,f220])).
fof(f528,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'('type.option.option'(X2)),'const.option.SOME_1'(s('type.option.option'(X2),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X2)),'const.option.SOME_1'(s('type.option.option'(X2),X5))) | s('type.option.option'(X2),X5) = s('type.option.option'(X2),'const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)))) )),
  inference(superposition,[],[f185,f194])).
fof(f523,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f182,f185])).
fof(f512,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f363,f128])).
fof(f363,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s(bool,X26) != s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f222,f220])).
fof(f511,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X24)) | s(bool,X23) = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(subsumption_resolution,[],[f362,f128])).
fof(f362,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X24)) | s(bool,X23) = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f193,f220])).
fof(f288,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f220,f220])).
fof(f251,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f248,f207])).
fof(f248,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f190,f135])).
fof(f196,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1',aHL_EXT)).
fof(f190,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.bool.IMP_ANTISYM_AX')).
fof(f193,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f83])).
fof(f138,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f90])).
fof(f29229,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(g(s(bool,X36)),X37,bool)) | s(bool,'T_0') = s(bool,X36)) ) | $spl44),
  inference(superposition,[],[f706,f29064])).
fof(f29064,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f5566,f135])).
fof(f29047,plain,(
  ( ! [X26,X27] : (s(fun(fun(bool,bool),bool),X26) = s(fun(fun(bool,bool),bool),X27) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK8(X26,X27,bool,fun(bool,bool)))))) ) | $spl206),
  inference(cnf_transformation,[],[f29047_D])).
fof(f29047_D,plain,(
  ( ! [X26,X27] : (s(fun(fun(bool,bool),bool),X26) = s(fun(fun(bool,bool),bool),X27) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK8(X26,X27,bool,fun(bool,bool)))))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f29048,plain,(
  ( ! [X28] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X28)))) ) | $spl208),
  inference(cnf_transformation,[],[f29048_D])).
fof(f29048_D,plain,(
  ( ! [X28] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X28)))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f29031,plain,(
  ( ! [X30,X31,X29] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X31))) | s(fun(fun(bool,bool),bool),X29) = s(fun(fun(bool,bool),bool),X30) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK8(X29,X30,bool,fun(bool,bool)))))) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f883,f22160])).
fof(f22160,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl46 | $spl64)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5745,f5755,f5756,f5757,f5696,f5767,f5736,f5725,f5727,f5729,f5730,f5733,f5734,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f1254,f597,f5567])).
fof(f8254,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,X0))) = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl64),
  inference(superposition,[],[f5772,f958])).
fof(f8255,plain,(
  ( ! [X2,X3] : (s(bool,f(s(bool,X2))) = s(bool,g(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f5772,f220])).
fof(f8334,plain,(
  ( ! [X23] : (s(bool,f(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,f(s(bool,'T_0'))))))) ) | $spl64),
  inference(forward_demodulation,[],[f8300,f5772])).
fof(f8300,plain,(
  ( ! [X23] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,f(s(bool,'T_0')))))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X23,bool))) ) | $spl64),
  inference(superposition,[],[f188,f5772])).
fof(f5772,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | $spl64),
  inference(cnf_transformation,[],[f5772_D])).
fof(f5772_D,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5734,plain,(
  ( ! [X165,X163,X164] : (~p(s(bool,happ(s(fun(bool,bool),X165),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X165),s(bool,sK7(sK8(X163,X164,bool,bool),X165,bool)))) | s(fun(bool,bool),X163) = s(fun(bool,bool),X164)) ) | $spl46),
  inference(superposition,[],[f716,f5567])).
fof(f5733,plain,(
  ( ! [X161,X162,X160] : (s('type.option.option'(bool),X162) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X162,bool)) = s(bool,sK8(X160,X161,bool,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X162) | s(fun(bool,bool),X160) = s(fun(bool,bool),X161)) ) | $spl46),
  inference(superposition,[],[f648,f5567])).
fof(f5730,plain,(
  ( ! [X152,X151,X153] : (~p(s(bool,happ(s(fun(bool,bool),X153),s(bool,'T_0')))) | s(bool,sK8(X151,X152,bool,bool)) = s(bool,sK7(sK8(X151,X152,bool,bool),X153,bool)) | s(fun(bool,bool),X151) = s(fun(bool,bool),X152)) ) | $spl46),
  inference(superposition,[],[f188,f5567])).
fof(f5729,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,happ(s(fun(bool,bool),X149),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X149),s(bool,X150)))) | s(bool,X150) != s(bool,sK8(X147,X148,bool,bool)) | s(fun(bool,bool),X147) = s(fun(bool,bool),X148)) ) | $spl46),
  inference(superposition,[],[f187,f5567])).
fof(f5727,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') != s(bool,X143) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X143))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X141,X142,bool,bool)))) | s(fun(bool,bool),X141) = s(fun(bool,bool),X142)) ) | $spl46),
  inference(superposition,[],[f186,f5567])).
fof(f5725,plain,(
  ( ! [X136,X135,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X137))) | s(bool,X137) = s(bool,sK8(X135,X136,bool,bool)) | s(fun(bool,bool),X135) = s(fun(bool,bool),X136)) ) | $spl46),
  inference(superposition,[],[f185,f5567])).
fof(f5767,plain,(
  ( ! [X83,X84,X82] : (s(bool,X84) = s(bool,sK8(X82,X83,bool,bool)) | s(bool,'F_0') = s(bool,X84) | s(fun(bool,bool),X82) = s(fun(bool,bool),X83)) ) | $spl46),
  inference(subsumption_resolution,[],[f5703,f128])).
fof(f5703,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,'T_0')) | s(bool,X84) = s(bool,sK8(X82,X83,bool,bool)) | s(bool,'F_0') = s(bool,X84) | s(fun(bool,bool),X82) = s(fun(bool,bool),X83)) ) | $spl46),
  inference(superposition,[],[f1061,f5567])).
fof(f5696,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK8(X60,X61,bool,bool),X62,bool)) | s(fun(bool,bool),X60) = s(fun(bool,bool),X61)) ) | $spl46),
  inference(superposition,[],[f706,f5567])).
fof(f5757,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X37) = s(bool,sK8(X35,X36,bool,bool)) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36)) ) | $spl46),
  inference(subsumption_resolution,[],[f5688,f128])).
fof(f5688,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | s(bool,X37) = s(bool,sK8(X35,X36,bool,bool)) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36)) ) | $spl46),
  inference(superposition,[],[f511,f5567])).
fof(f5756,plain,(
  ( ! [X30,X31,X29] : (s(bool,X31) != s(bool,sK8(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30)) ) | $spl46),
  inference(subsumption_resolution,[],[f5686,f128])).
fof(f5686,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,sK8(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30)) ) | $spl46),
  inference(superposition,[],[f222,f5567])).
fof(f5755,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X18)) | s(bool,X18) = s(bool,sK8(X16,X17,bool,bool)) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17)) ) | $spl46),
  inference(subsumption_resolution,[],[f5683,f128])).
fof(f5683,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | s(bool,X18) = s(bool,sK8(X16,X17,bool,bool)) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17)) ) | $spl46),
  inference(superposition,[],[f193,f5567])).
fof(f5745,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X0,X1,bool,bool))),bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl46),
  inference(condensation,[],[f5744])).
fof(f5744,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') = s(bool,X21) | s(fun(bool,bool),X19) = s(fun(bool,bool),X20) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X19,X20,bool,bool))),bool))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f5671])).
fof(f5671,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') = s(bool,X21) | s(fun(bool,bool),X19) = s(fun(bool,bool),X20) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X19,X20,bool,bool))),bool)) | s(bool,'T_0') = s(bool,X21)) ) | $spl46),
  inference(superposition,[],[f5567,f958])).
fof(f29030,plain,(
  ( ! [X28,X26,X27] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X28))) | s(fun(fun(bool,bool),bool),X26) = s(fun(fun(bool,bool),bool),X27) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK8(X26,X27,bool,fun(bool,bool)))))) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f883,f22160])).
fof(f24512,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | $spl192),
  inference(cnf_transformation,[],[f24512_D])).
fof(f24512_D,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f28888,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X61)) ) | ($spl15 | $spl22 | $spl45)),
  inference(duplicate_literal_removal,[],[f28736])).
fof(f28736,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X60)) ) | ($spl15 | $spl22 | $spl45)),
  inference(superposition,[],[f4325,f24555])).
fof(f24555,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl15 | $spl22 | $spl45)),
  inference(subsumption_resolution,[],[f23570,f7715])).
fof(f7715,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl15 | $spl22)),
  inference(global_subsumption,[],[f7714,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141])).
fof(f1954,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl15),
  inference(superposition,[],[f1676,f135])).
fof(f7714,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl22),
  inference(subsumption_resolution,[],[f4840,f4864])).
fof(f4864,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl22),
  inference(superposition,[],[f4588,f1504])).
fof(f4588,plain,(
  ( ! [X32] : (s(bool,X32) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool))) ) | $spl22),
  inference(superposition,[],[f4560,f894])).
fof(f4840,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl22),
  inference(superposition,[],[f4588,f958])).
fof(f23570,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl45),
  inference(superposition,[],[f958,f23230])).
fof(f23230,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl45),
  inference(unit_resulting_resolution,[],[f128,f208,f5565,f511])).
fof(f5565,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl45),
  inference(cnf_transformation,[],[f5565_D])).
fof(f5565_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f27921,plain,(
  ( ! [X0,X3] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X3)))) | s(bool,'F_0') != s(bool,X3)) ) | $spl204),
  inference(cnf_transformation,[],[f27921_D])).
fof(f27921_D,plain,(
  ( ! [X0,X3] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X3)))) | s(bool,'F_0') != s(bool,X3)) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f25765,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'T_0') = s(bool,X2)) ) | $spl196),
  inference(cnf_transformation,[],[f25765_D])).
fof(f25765_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f27870,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X7)))) | s(bool,'F_0') != s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f734,f22160])).
fof(f27869,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X3)))) | s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f734,f22160])).
fof(f27325,plain,(
  ( ! [X53,X51] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X51)),bool),X53,bool)) | s(bool,'T_0') = s(bool,X51)) ) | $spl202),
  inference(cnf_transformation,[],[f27325_D])).
fof(f27325_D,plain,(
  ( ! [X53,X51] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X51)),bool),X53,bool)) | s(bool,'T_0') = s(bool,X51)) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f27324,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,X52)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X51)),bool),X53,bool)) | s(bool,'T_0') = s(bool,X51)) ) | $spl198),
  inference(subsumption_resolution,[],[f27310,f137])).
fof(f27310,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,X52)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X51)),bool),X53,bool)) | s(bool,'T_0') = s(bool,X51) | s(bool,'T_0') = s(bool,X52)) ) | $spl198),
  inference(superposition,[],[f26206,f956])).
fof(f26073,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,sK7(X2,X0,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl198),
  inference(cnf_transformation,[],[f26073_D])).
fof(f26073_D,plain,(
  ( ! [X2,X0] : (s(bool,X2) = s(bool,sK7(X2,X0,bool)) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f26074,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0'))))) ) | $spl200),
  inference(cnf_transformation,[],[f26074_D])).
fof(f26074_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0'))))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f26053,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,X5) = s(bool,sK7(X5,X3,bool)) | s(bool,'T_0') = s(bool,X5)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f618,f22160])).
fof(f26052,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X2) = s(bool,sK7(X2,X0,bool)) | s(bool,'T_0') = s(bool,X2)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f618,f22160])).
fof(f25764,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK7('F_0',X0,bool))) ) | $spl194),
  inference(cnf_transformation,[],[f25764_D])).
fof(f25764_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK7('F_0',X0,bool))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f25720,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | s(bool,'F_0') = s(bool,sK7('F_0',X3,bool)) | s(bool,'T_0') = s(bool,X5)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f613,f22160])).
fof(f25719,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'F_0') = s(bool,sK7('F_0',X0,bool)) | s(bool,'T_0') = s(bool,X2)) ) | ($spl46 | $spl64)),
  inference(superposition,[],[f613,f22160])).
fof(f24457,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X44)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f24373])).
fof(f24373,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) ) | $spl50),
  inference(superposition,[],[f4325,f5570])).
fof(f23258,plain,(
  $false | ($spl15 | $spl22 | $spl45 | $spl58)),
  inference(subsumption_resolution,[],[f23257,f7715])).
fof(f23257,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl45 | $spl58)),
  inference(backward_demodulation,[],[f23230,f5576])).
fof(f23154,plain,(
  $false | ($spl64 | $spl66 | $spl68)),
  inference(subsumption_resolution,[],[f22164,f208])).
fof(f22164,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl64 | $spl66 | $spl68)),
  inference(backward_demodulation,[],[f22163,f5816])).
fof(f22163,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f5772,f5815])).
fof(f23152,plain,(
  $false | ($spl15 | $spl22 | $spl74 | $spl166)),
  inference(subsumption_resolution,[],[f10136,f23149])).
fof(f23149,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63)) ) | $spl166),
  inference(subsumption_resolution,[],[f23148,f23121])).
fof(f23121,plain,(
  ( ! [X56] : (s(bool,'T_0') != s(bool,X56)) ) | $spl166),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f3028])).
fof(f21939,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8))) | s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X7))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,'F_0')))))) ) | $spl166),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f3028,f3027,f1254,f597,f20184,f15676,f21938,f15610])).
fof(f21938,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),X86))) != s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,X84))))) | s('type.option.option'(X85),X86) = s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0')))) ) | $spl166),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15610,f3028,f3027,f1254,f597,f20184,f15676])).
fof(f23148,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl166),
  inference(subsumption_resolution,[],[f2982,f23124])).
fof(f23124,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | $spl166),
  inference(subsumption_resolution,[],[f23123,f23121])).
fof(f23123,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) ) | $spl166),
  inference(subsumption_resolution,[],[f2810,f23122])).
fof(f23122,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl166),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f3028,f23121,f3027])).
fof(f10136,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | ($spl15 | $spl22 | $spl74)),
  inference(forward_demodulation,[],[f10075,f894])).
fof(f10075,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl15 | $spl22 | $spl74)),
  inference(unit_resulting_resolution,[],[f7715,f5821])).
fof(f23151,plain,(
  $false | ($spl74 | $spl166)),
  inference(subsumption_resolution,[],[f10073,f23149])).
fof(f10073,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl74),
  inference(unit_resulting_resolution,[],[f208,f5821])).
fof(f23150,plain,(
  $false | ($spl98 | $spl166)),
  inference(subsumption_resolution,[],[f18633,f23149])).
fof(f18633,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl98),
  inference(unit_resulting_resolution,[],[f208,f18342])).
fof(f23141,plain,(
  $false | $spl166),
  inference(subsumption_resolution,[],[f525,f23124])).
fof(f23140,plain,(
  $false | $spl166),
  inference(subsumption_resolution,[],[f23139,f23121])).
fof(f23139,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl166),
  inference(condensation,[],[f23138])).
fof(f23138,plain,(
  ( ! [X21,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | $spl166),
  inference(subsumption_resolution,[],[f534,f23124])).
fof(f21307,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) ) | $spl190),
  inference(cnf_transformation,[],[f21307_D])).
fof(f21307_D,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f1674,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl12),
  inference(cnf_transformation,[],[f1674_D])).
fof(f1674_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f23118,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) ) | ($spl15 | $spl22 | $spl50 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f5012,f22962])).
fof(f22962,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187)))) ) | ($spl15 | $spl22 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7714,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f7715,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22945,f22946,f22954,f22955,f22961])).
fof(f22961,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl15 | $spl22 | $spl50 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f22960,f7715])).
fof(f22960,plain,(
  ( ! [X187,X186] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f3347,f22946])).
fof(f22955,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194)) ) | ($spl15 | $spl22 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7714,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f7715,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22945,f22946,f22954])).
fof(f22954,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl15 | $spl22 | $spl50 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f22953,f7715])).
fof(f22953,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f22925,f22946])).
fof(f22925,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f3350,f22161])).
fof(f22946,plain,(
  ( ! [X43] : (s(bool,'F_0') = s(bool,X43)) ) | ($spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f22945,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22945,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f20014,f22161])).
fof(f22522,plain,(
  ( ! [X185,X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | ($spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22521,f22161])).
fof(f22521,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,g(s(bool,'F_0'))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f3421,f22161])).
fof(f22512,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl50 | $spl166)),
  inference(condensation,[],[f22511])).
fof(f22511,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK8(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22510,f22161])).
fof(f22510,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,g(s(bool,'F_0'))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK8(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f881,f22161])).
fof(f22187,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl50 | $spl166)),
  inference(condensation,[],[f22186])).
fof(f22186,plain,(
  ( ! [X123,X121,X124,X122] : (s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK8(X122,X123,bool,X121))))) ) | ($spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22185,f22161])).
fof(f22185,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,g(s(bool,'F_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK8(X122,X123,bool,X121))))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f1359,f22161])).
fof(f22161,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0')))) ) | ($spl50 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f597,f1254,f5570])).
fof(f20190,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X20) = s(bool,g(s(bool,'F_0')))) ) | $spl50),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5570,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919])).
fof(f20189,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,X24) = s(bool,g(s(bool,'F_0')))) ) | $spl50),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5570,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920])).
fof(f4855,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl22),
  inference(superposition,[],[f4588,f135])).
fof(f4899,plain,(
  ( ! [X33] : (s(bool,'F_0') != s(bool,X33) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) ) | $spl22),
  inference(forward_demodulation,[],[f4898,f894])).
fof(f4898,plain,(
  ( ! [X33] : (s(bool,'F_0') != s(bool,X33) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))),bool))) ) | $spl22),
  inference(forward_demodulation,[],[f4854,f894])).
fof(f4854,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))),bool))) ) | $spl22),
  inference(superposition,[],[f4588,f894])).
fof(f23107,plain,(
  $false | ($spl15 | $spl22 | $spl50 | $spl58 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f23106,f7715])).
fof(f23106,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl50 | $spl58 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f5576,f22946])).
fof(f21257,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | $spl186),
  inference(cnf_transformation,[],[f21257_D])).
fof(f21257_D,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f21258,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) | $spl188),
  inference(cnf_transformation,[],[f21258_D])).
fof(f21258_D,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f23096,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22531,f22783,f22945,f22946,f22897,f22967,f22972,f22973,f23039,f23040,f22526,f23087,f23094,f23095])).
fof(f23095,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22531,f22783,f22945,f22946,f22897,f22967,f22972,f22973,f23039,f23040,f22526,f23087,f23094])).
fof(f23094,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f23093,f22973])).
fof(f23093,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f22494,f22946])).
fof(f22494,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,g(s(bool,'F_0')))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f13997,f22161])).
fof(f23087,plain,(
  ( ! [X261,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl50 | $spl166)),
  inference(global_subsumption,[],[f22526,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522])).
fof(f22526,plain,(
  ( ! [X261,X263,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22525,f22161])).
fof(f22525,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X260,sK8(X261,X262,bool,X260)))) | s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5352,f22161])).
fof(f23040,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22526,f22531,f22783,f22945,f22946,f22897,f22967,f22972,f22973,f23039])).
fof(f23039,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f23038,f22973])).
fof(f23038,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f22663,f22946])).
fof(f22663,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,g(s(bool,'F_0')))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f752,f22161])).
fof(f22973,plain,(
  ~p(s(bool,'F_0')) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f22972,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f597,f1254,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22972,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl50 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f22877,f22946])).
fof(f22877,plain,(
  ( ! [X0] : (~p(s(bool,g(s(bool,'F_0')))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5114,f22161])).
fof(f22897,plain,(
  ( ! [X231,X229,X230] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22896,f22161])).
fof(f22896,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5343,f22161])).
fof(f22783,plain,(
  ( ! [X405,X403,X404] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X403)) ) | ($spl0 | $spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22782,f22161])).
fof(f22782,plain,(
  ( ! [X405,X403,X404] : (s(bool,X405) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X403)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19802,f22161])).
fof(f22531,plain,(
  ( ! [X445,X447,X446,X448] : (s(fun(X445,bool),X446) = s(fun(X445,bool),X447) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X448,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,g(s(X445,sK8(X446,X447,bool,X445))))) ) | ($spl0 | $spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22530,f22161])).
fof(f22530,plain,(
  ( ! [X445,X447,X446,X448] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X445,sK8(X446,X447,bool,X445)))) | s(fun(X445,bool),X446) = s(fun(X445,bool),X447) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X448,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,g(s(X445,sK8(X446,X447,bool,X445))))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19813,f22161])).
fof(f19926,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))) | s(bool,X0) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | $spl0),
  inference(equality_factoring,[],[f1106])).
fof(f19924,plain,(
  ( ! [X261,X263,X260,X262,X264] : (~p(s(bool,happ(s(fun('type.option.option'(X262),bool),X263),s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,X261)))))) | s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s('type.option.option'(X262),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))),s(fun(bool,'type.option.option'(X262)),X264)),X263,'type.option.option'(X262))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X260,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X261)) ) | $spl0),
  inference(superposition,[],[f819,f1106])).
fof(f19923,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s('type.option.option'('type.option.option'(X257)),'const.option.SOME_1'(s('type.option.option'(X257),X258))) != s('type.option.option'('type.option.option'(X257)),'const.option.SOME_1'(s('type.option.option'(X257),happ(s(fun(bool,'type.option.option'(X257)),X259),s(bool,X256))))) | s('type.option.option'(X257),X258) = s('type.option.option'(X257),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X255),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))),s(fun(bool,'type.option.option'(X257)),X259))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X255,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X256)) ) | $spl0),
  inference(superposition,[],[f799,f1106])).
fof(f19922,plain,(
  ( ! [X253,X254,X252] : (~p(s(bool,happ(s(fun(bool,bool),X254),s(bool,X253)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X254),s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X252),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X254,bool)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X252,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X253)) ) | $spl0),
  inference(superposition,[],[f716,f1106])).
fof(f19921,plain,(
  ( ! [X251,X249,X250] : (s('type.option.option'(bool),X251) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))) | s(bool,sK6(X251,bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X249),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X251) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X249,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X250)) ) | $spl0),
  inference(superposition,[],[f648,f1106])).
fof(f19915,plain,(
  ( ! [X231,X230,X232] : (s(bool,X231) != s(bool,X232) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X230),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X230,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X231)) ) | $spl0),
  inference(superposition,[],[f186,f1106])).
fof(f19913,plain,(
  ( ! [X225,X226,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X226))) | s(bool,X226) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X224),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X224,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X225)) ) | $spl0),
  inference(superposition,[],[f185,f1106])).
fof(f19849,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,X76)))) | p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun('type.option.option'(sK1),bool),X75),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))),X77,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X75,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f706,f1106])).
fof(f20094,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f20093])).
fof(f20093,plain,(
  ( ! [X70,X71,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X69),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X71) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X69,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f19847,f135])).
fof(f19847,plain,(
  ( ! [X70,X71,X69] : (s(bool,'F_0') != s(bool,X70) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X69),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X71) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X69,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f573,f1106])).
fof(f20085,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f20084])).
fof(f20084,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X23),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X23,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19832,f137])).
fof(f19832,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X23),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X23,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f190,f1106])).
fof(f19819,plain,(
  ( ! [X466,X465,X467,X468] : (s(X467,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X468),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) != s(X467,g(s(bool,happ(s(fun('type.option.option'(sK1),bool),X468),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(fun(bool,X467),X465) = s(fun(bool,X467),X466) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X468,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK8(X465,X466,X467,bool))) ) | $spl0),
  inference(superposition,[],[f196,f1106])).
fof(f19818,plain,(
  ( ! [X463,X462,X464] : (p(s(bool,happ(s(fun(bool,bool),X463),s(bool,happ(s(fun('type.option.option'(sK1),bool),X464),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | ~p(s(bool,happ(s(fun(bool,bool),X463),s(bool,X462)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X464,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK7(X462,X463,bool))) ) | $spl0),
  inference(superposition,[],[f189,f1106])).
fof(f19816,plain,(
  ( ! [X459,X458] : (s('type.option.option'(bool),X458) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X459),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X458) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X459,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6(X458,bool))) ) | $spl0),
  inference(superposition,[],[f177,f1106])).
fof(f19815,plain,(
  ( ! [X455,X457,X454,X456] : (s('type.option.option'(X456),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X454),s(fun(bool,'type.option.option'(X456)),X457))) = s('type.option.option'(X456),happ(s(fun(bool,'type.option.option'(X456)),X457),s(bool,happ(s(fun('type.option.option'(sK1),bool),X455),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X454) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X455,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6(X454,bool))) ) | $spl0),
  inference(superposition,[],[f796,f1106])).
fof(f19814,plain,(
  ( ! [X453,X451,X452,X450] : (s('type.option.option'(bool),X452) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X451),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X453),s('type.option.option'(bool),X452)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X453),s('type.option.option'(bool),X450)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X450) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X451,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6(X450,bool))) ) | $spl0),
  inference(superposition,[],[f731,f1106])).
fof(f19813,plain,(
  ( ! [X445,X447,X446,X448] : (s(bool,f(s(X445,sK8(X446,X447,bool,X445)))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X448),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(fun(X445,bool),X446) = s(fun(X445,bool),X447) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X448,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,g(s(X445,sK8(X446,X447,bool,X445))))) ) | $spl0),
  inference(superposition,[],[f196,f1106])).
fof(f19811,plain,(
  ( ! [X436,X434,X437,X433,X435] : (~p(s(bool,happ(s(fun('type.option.option'(X435),bool),X436),s('type.option.option'(X435),happ(s(fun(bool,'type.option.option'(X435)),X437),s(bool,happ(s(fun('type.option.option'(sK1),bool),X434),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))))) | s('type.option.option'(X435),happ(s(fun(bool,'type.option.option'(X435)),X437),s(bool,X433))) = s('type.option.option'(X435),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))),s(fun(bool,'type.option.option'(X435)),X437)),X436,'type.option.option'(X435))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X434,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X433)) ) | $spl0),
  inference(superposition,[],[f819,f1106])).
fof(f19810,plain,(
  ( ! [X428,X430,X432,X429,X431] : (s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,happ(s(fun('type.option.option'(sK1),bool),X429),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X428)) ) | $spl0),
  inference(superposition,[],[f799,f1106])).
fof(f19809,plain,(
  ( ! [X426,X425,X427] : (~p(s(bool,happ(s(fun(bool,bool),X427),s(bool,happ(s(fun('type.option.option'(sK1),bool),X426),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X427),s(bool,sK7(X425,X427,bool)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X426,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X425)) ) | $spl0),
  inference(superposition,[],[f716,f1106])).
fof(f19808,plain,(
  ( ! [X422,X424,X423] : (s('type.option.option'(bool),X424) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X423),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X423,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X422)) ) | $spl0),
  inference(superposition,[],[f648,f1106])).
fof(f19805,plain,(
  ( ! [X414,X413,X415] : (~p(s(bool,happ(s(fun(bool,bool),X415),s(bool,happ(s(fun('type.option.option'(sK1),bool),X414),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,X413) = s(bool,sK7(X413,X415,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X414,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X413)) ) | $spl0),
  inference(superposition,[],[f188,f1106])).
fof(f19804,plain,(
  ( ! [X412,X410,X409,X411] : (~p(s(bool,happ(s(fun(bool,bool),X411),s(bool,happ(s(fun('type.option.option'(sK1),bool),X410),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | p(s(bool,happ(s(fun(bool,bool),X411),s(bool,X412)))) | s(bool,X409) != s(bool,X412) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X410,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X409)) ) | $spl0),
  inference(superposition,[],[f187,f1106])).
fof(f19802,plain,(
  ( ! [X405,X403,X404] : (s(bool,X405) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X404),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X403)) ) | $spl0),
  inference(superposition,[],[f186,f1106])).
fof(f19800,plain,(
  ( ! [X397,X399,X398] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X399))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X398),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,X397) = s(bool,X399) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X398,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X397)) ) | $spl0),
  inference(superposition,[],[f185,f1106])).
fof(f19964,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f19963])).
fof(f19963,plain,(
  ( ! [X70,X71,X69] : (s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X70),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X71) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X70,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19696])).
fof(f19696,plain,(
  ( ! [X70,X71,X69] : (s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X70),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X71) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X70,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f956,f1106])).
fof(f19694,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,happ(s(fun('type.option.option'(sK1),bool),X63),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X62,X64,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X63,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f706,f1106])).
fof(f19670,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,happ(s(fun('type.option.option'(X74),bool),X75),s('type.option.option'(X74),happ(s(fun('type.option.option'(sK1),'type.option.option'(X74)),X76),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(X74),happ(s(fun('type.option.option'(sK1),'type.option.option'(X74)),X76),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X73,'type.option.option'(sK1))))) = s('type.option.option'(X74),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X73,'type.option.option'(sK1))))),s(fun('type.option.option'(sK1),'type.option.option'(X74)),X76)),X75,'type.option.option'(X74))) | s(bool,X77) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X73),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X77)) ) | $spl0),
  inference(superposition,[],[f819,f1106])).
fof(f19669,plain,(
  ( ! [X70,X68,X72,X71,X69] : (s('type.option.option'('type.option.option'(X69)),'const.option.SOME_1'(s('type.option.option'(X69),X70))) != s('type.option.option'('type.option.option'(X69)),'const.option.SOME_1'(s('type.option.option'(X69),happ(s(fun('type.option.option'(sK1),'type.option.option'(X69)),X71),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(X69),X70) = s('type.option.option'(X69),'const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X68,'type.option.option'(sK1))))),s(fun('type.option.option'(sK1),'type.option.option'(X69)),X71))) | s(bool,X72) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X68),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X72)) ) | $spl0),
  inference(superposition,[],[f799,f1106])).
fof(f19668,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),sK7(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X65,'type.option.option'(sK1)),X66,'type.option.option'(sK1))))) | s(bool,X67) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X65),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f716,f1106])).
fof(f19667,plain,(
  ( ! [X64,X62,X63] : (s('type.option.option'('type.option.option'(sK1)),X63) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),sK6(X63,'type.option.option'(sK1))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X62,'type.option.option'(sK1))) | s('type.option.option'('type.option.option'(sK1)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(sK1)),X63) | s(bool,X64) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X62),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f648,f1106])).
fof(f19664,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X54),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X53,'type.option.option'(sK1))) = s('type.option.option'(sK1),sK7(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X53,'type.option.option'(sK1)),X54,'type.option.option'(sK1))) | s(bool,X55) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X53),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f188,f1106])).
fof(f19663,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X50),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X50),s('type.option.option'(sK1),X51)))) | s('type.option.option'(sK1),X51) != s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X49,'type.option.option'(sK1))) | s(bool,X52) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X49),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f187,f1106])).
fof(f19661,plain,(
  ( ! [X45,X43,X44] : (s('type.option.option'(sK1),X44) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X44))) = s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X43,'type.option.option'(sK1))))) | s(bool,X45) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X43),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X45)) ) | $spl0),
  inference(superposition,[],[f186,f1106])).
fof(f19659,plain,(
  ( ! [X39,X37,X38] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X38))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),X38) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X37,'type.option.option'(sK1))) | s(bool,X39) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X37),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f185,f1106])).
fof(f19656,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(X29,'type.option.option'(sK1)),X30),s(X29,X31))))) | s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(X29),'const.option.SOME_1'(s(X29,X31))),s(fun(X29,'type.option.option'(sK1)),X30))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X28,'type.option.option'(sK1))) | s(bool,X32) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X28),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f799,f1106])).
fof(f19655,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(X25,sK1)))) | p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X26),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X24,'type.option.option'(sK1)))))) | ~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X26),s('type.option.option'(sK1),X25)))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X25) | s(bool,X27) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X24),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f731,f1106])).
fof(f19654,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X22))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(X22,sK1)))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X21,'type.option.option'(sK1))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X22) | s(bool,X23) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X21),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X23)) ) | $spl0),
  inference(superposition,[],[f655,f1106])).
fof(f19653,plain,(
  ( ! [X19,X20,X18] : (s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X19))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),X19) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X18,'type.option.option'(sK1)),sK1)))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X18,'type.option.option'(sK1))) | s(bool,X20) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X18),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f655,f1106])).
fof(f19652,plain,(
  ( ! [X17,X15,X16] : (s('type.option.option'(sK1),X16) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(X16,sK1)))))) = s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X15,'type.option.option'(sK1))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X16) | s(bool,X17) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X15),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f653,f1106])).
fof(f19651,plain,(
  ( ! [X14,X12,X13] : (s('type.option.option'(sK1),X13) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),X13))) = s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X12,'type.option.option'(sK1)),sK1)))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X12,'type.option.option'(sK1))) | s(bool,X14) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X12),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X14)) ) | $spl0),
  inference(superposition,[],[f653,f1106])).
fof(f19650,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X10),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X9,'type.option.option'(sK1)),sK1)))) = s('type.option.option'(sK1),sK7('const.option.SOME_1'(s(sK1,sK6(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X9,'type.option.option'(sK1)),sK1))),X10,'type.option.option'(sK1))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X9,'type.option.option'(sK1))) | s(bool,X11) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X9),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f652,f1106])).
fof(f19649,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X7))) | s(sK1,X7) = s(sK1,sK6(sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)),sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1))) | s(bool,X8) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X6),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f648,f1106])).
fof(f19624,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f1106,f894])).
fof(f19992,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f19991])).
fof(f19991,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X16),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X16,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19594])).
fof(f19594,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X16),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X16,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | $spl0),
  inference(superposition,[],[f1106,f956])).
fof(f19040,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X11),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X11,'type.option.option'(sK1))))) | s(bool,X12) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X11),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f19024,f128])).
fof(f19024,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X11),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X11,'type.option.option'(sK1))))) | s(bool,X12) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X11),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(superposition,[],[f5083,f958])).
fof(f19038,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))))) | s(bool,X2) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f19019,f128])).
fof(f19019,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))))) | s(bool,X2) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f5083,f220])).
fof(f19037,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1))))) | ~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) ) | $spl0),
  inference(forward_demodulation,[],[f19017,f894])).
fof(f19017,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool))),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))))) ) | $spl0),
  inference(superposition,[],[f5083,f894])).
fof(f5293,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,happ(s(fun(sK1,bool),X63),s(sK1,sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X62,X64,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X63,sK1)) | s(bool,'T_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f706,f5126])).
fof(f5385,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,X76)))) | p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun(sK1,bool),X75),s(sK1,sK2)),X77,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X75,sK1)) | s(bool,'T_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f706,f5126])).
fof(f5352,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,f(s(X260,sK8(X261,X262,bool,X260)))) != s(bool,happ(s(fun(sK1,bool),X263),s(sK1,sK2))) | s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | $spl0),
  inference(superposition,[],[f196,f5126])).
fof(f5085,plain,(
  ( ! [X87] : (~p(s(bool,happ(s(fun(sK1,bool),X87),s(sK1,sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X87),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X87,sK1))))) ) | $spl0),
  inference(superposition,[],[f716,f5027])).
fof(f5114,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK1,bool),X0),s(sK1,sK2)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | $spl0),
  inference(superposition,[],[f5048,f894])).
fof(f5128,plain,(
  ( ! [X12,X11] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X11,sK1)) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f5121,f128])).
fof(f5121,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X11,sK1)) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(superposition,[],[f5048,f958])).
fof(f5144,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X0),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1)))) | ~p(s(bool,happ(s(fun(sK1,bool),X0),s(sK1,sK2))))) ) | $spl0),
  inference(forward_demodulation,[],[f5132,f894])).
fof(f5132,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK1,bool),X0),s(sK1,sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool))),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))))) ) | $spl0),
  inference(superposition,[],[f5085,f894])).
fof(f5145,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)))) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f5134,f128])).
fof(f5134,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)))) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f5085,f220])).
fof(f5147,plain,(
  ( ! [X12,X11] : (s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X11,sK1)))) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f5139,f128])).
fof(f5139,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X11,sK1)))) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(superposition,[],[f5085,f958])).
fof(f5217,plain,(
  ( ! [X2,X1] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X1)),fun(sK1,bool)),sK1)) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f5206,f128])).
fof(f5206,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X1)),fun(sK1,bool)),sK1)) | s(bool,X2) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f5114,f220])).
fof(f5219,plain,(
  ( ! [X12,X11] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X11)),fun(sK1,bool)),sK1)) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f5211,f128])).
fof(f5211,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X11)),fun(sK1,bool)),sK1)) | s(bool,X12) = s(bool,happ(s(fun(sK1,bool),X11),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl0),
  inference(superposition,[],[f5114,f958])).
fof(f5260,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X7))) | s(sK1,X7) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1)) | s(bool,X8) = s(bool,happ(s(fun(sK1,bool),X6),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f185,f5126])).
fof(f5262,plain,(
  ( ! [X14,X12,X13] : (s(sK1,sK2) != s(sK1,X13) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X13))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X12,sK1)))) | s(bool,X14) = s(bool,happ(s(fun(sK1,bool),X12),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X14)) ) | $spl0),
  inference(superposition,[],[f186,f5126])).
fof(f5264,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun(sK1,bool),X19),s(sK1,sK2)))) | p(s(bool,happ(s(fun(sK1,bool),X19),s(sK1,X20)))) | s(sK1,X20) != s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X18,sK1)) | s(bool,X21) = s(bool,happ(s(fun(sK1,bool),X18),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f187,f5126])).
fof(f5265,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(sK1,bool),X23),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1),X23,sK1)) | s(bool,X24) = s(bool,happ(s(fun(sK1,bool),X22),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f188,f5126])).
fof(f5268,plain,(
  ( ! [X33,X31,X32] : (s('type.option.option'(sK1),X32) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X32,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X31,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X32) | s(bool,X33) = s(bool,happ(s(fun(sK1,bool),X31),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f648,f5126])).
fof(f5269,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,happ(s(fun(sK1,bool),X35),s(sK1,sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X35),s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X34,sK1),X35,sK1)))) | s(bool,X36) = s(bool,happ(s(fun(sK1,bool),X34),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f716,f5126])).
fof(f5341,plain,(
  ( ! [X225,X223,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X224),s(sK1,sK2))))) | s(bool,X223) = s(bool,X225) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X224,sK1)) | s(bool,'T_0') = s(bool,X223)) ) | $spl0),
  inference(superposition,[],[f185,f5126])).
fof(f5343,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,happ(s(fun(sK1,bool),X230),s(sK1,sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | $spl0),
  inference(superposition,[],[f186,f5126])).
fof(f5345,plain,(
  ( ! [X237,X235,X238,X236] : (~p(s(bool,happ(s(fun(bool,bool),X237),s(bool,happ(s(fun(sK1,bool),X236),s(sK1,sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X237),s(bool,X238)))) | s(bool,X235) != s(bool,X238) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X236,sK1)) | s(bool,'T_0') = s(bool,X235)) ) | $spl0),
  inference(superposition,[],[f187,f5126])).
fof(f5346,plain,(
  ( ! [X241,X239,X240] : (~p(s(bool,happ(s(fun(bool,bool),X241),s(bool,happ(s(fun(sK1,bool),X240),s(sK1,sK2)))))) | s(bool,X239) = s(bool,sK7(X239,X241,bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X240,sK1)) | s(bool,'T_0') = s(bool,X239)) ) | $spl0),
  inference(superposition,[],[f188,f5126])).
fof(f5349,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),X250) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X249),s(sK1,sK2))))) | s(bool,X248) = s(bool,sK6(X250,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X250) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X249,sK1)) | s(bool,'T_0') = s(bool,X248)) ) | $spl0),
  inference(superposition,[],[f648,f5126])).
fof(f5350,plain,(
  ( ! [X253,X251,X252] : (~p(s(bool,happ(s(fun(bool,bool),X253),s(bool,happ(s(fun(sK1,bool),X252),s(sK1,sK2)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X253),s(bool,sK7(X251,X253,bool)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X252,sK1)) | s(bool,'T_0') = s(bool,X251)) ) | $spl0),
  inference(superposition,[],[f716,f5126])).
fof(f5353,plain,(
  ( ! [X265,X264] : (s('type.option.option'(bool),X264) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X265),s(sK1,sK2))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X264) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X265,sK1)) | s(bool,'T_0') = s(bool,sK6(X264,bool))) ) | $spl0),
  inference(superposition,[],[f177,f5126])).
fof(f5355,plain,(
  ( ! [X269,X268,X270] : (p(s(bool,happ(s(fun(bool,bool),X269),s(bool,happ(s(fun(sK1,bool),X270),s(sK1,sK2)))))) | ~p(s(bool,happ(s(fun(bool,bool),X269),s(bool,X268)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X270,sK1)) | s(bool,'T_0') = s(bool,sK7(X268,X269,bool))) ) | $spl0),
  inference(superposition,[],[f189,f5126])).
fof(f5356,plain,(
  ( ! [X271,X273,X272,X274] : (s(X273,f(s(bool,happ(s(fun(sK1,bool),X274),s(sK1,sK2))))) != s(X273,g(s(bool,happ(s(fun(sK1,bool),X274),s(sK1,sK2))))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X274,sK1)) | s(bool,'T_0') = s(bool,sK8(X271,X272,X273,bool))) ) | $spl0),
  inference(superposition,[],[f196,f5126])).
fof(f5413,plain,(
  ( ! [X144,X145,X143] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X144))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X145))) | s(bool,X145) = s(bool,happ(s(fun(sK1,bool),X143),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X143,sK1)) | s(bool,'T_0') = s(bool,X144)) ) | $spl0),
  inference(superposition,[],[f185,f5126])).
fof(f5415,plain,(
  ( ! [X151,X149,X150] : (s(bool,X150) != s(bool,X151) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X149),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X149,sK1)) | s(bool,'T_0') = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f186,f5126])).
fof(f5421,plain,(
  ( ! [X169,X170,X168] : (s('type.option.option'(bool),X170) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X169))) | s(bool,sK6(X170,bool)) = s(bool,happ(s(fun(sK1,bool),X168),s(sK1,sK2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X168,sK1)) | s(bool,'T_0') = s(bool,X169)) ) | $spl0),
  inference(superposition,[],[f648,f5126])).
fof(f5471,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5470])).
fof(f5470,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) = s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5228])).
fof(f5228,plain,(
  ( ! [X14,X15,X16] : (s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool)) = s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | $spl0),
  inference(superposition,[],[f5126,f956])).
fof(f5518,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5517])).
fof(f5517,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) = s(bool,happ(s(fun(sK1,bool),X23),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X23,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5368,f137])).
fof(f5368,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) = s(bool,happ(s(fun(sK1,bool),X23),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X23,sK1)) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f190,f5126])).
fof(f5530,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5529])).
fof(f5529,plain,(
  ( ! [X70,X71,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X69),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X71) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X69,sK1)) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f5383,f135])).
fof(f5383,plain,(
  ( ! [X70,X71,X69] : (s(bool,'F_0') != s(bool,X70) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X69),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X71) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X69,sK1)) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f573,f5126])).
fof(f5083,plain,(
  ( ! [X84] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X84),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X84),s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X84,'type.option.option'(sK1)))))) ) | $spl0),
  inference(superposition,[],[f716,f200])).
fof(f3937,plain,(
  ( ! [X121,X122] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1))) | s(bool,X122) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X122)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3558,f128])).
fof(f3558,plain,(
  ( ! [X121,X122] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1))) | s(bool,X122) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X122)),bool))) ) | $spl0),
  inference(superposition,[],[f868,f958])).
fof(f1100,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.option.option'(sK1),bool),X0),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | $spl0),
  inference(superposition,[],[f868,f894])).
fof(f5422,plain,(
  ( ! [X173,X171,X172] : (~p(s(bool,happ(s(fun(bool,bool),X173),s(bool,X172)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X173),s(bool,sK7(happ(s(fun(sK1,bool),X171),s(sK1,sK2)),X173,bool)))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X171,sK1)) | s(bool,'T_0') = s(bool,X172)) ) | $spl0),
  inference(superposition,[],[f716,f5126])).
fof(f5424,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,X0) = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2)))) ) | $spl0),
  inference(equality_factoring,[],[f5126])).
fof(f5026,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),X0) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X0,sK1)) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | $spl0),
  inference(superposition,[],[f5016,f177])).
fof(f5025,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X0))) | s(sK1,sK6('const.option.SOME_1'(s(sK1,X0)),sK1)) = s(sK1,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1))) ) | $spl0),
  inference(superposition,[],[f5016,f894])).
fof(f20949,plain,(
  ( ! [X231,X229] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | $spl176),
  inference(cnf_transformation,[],[f20949_D])).
fof(f20949_D,plain,(
  ( ! [X231,X229] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f20948,plain,(
  ( ! [X230] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1))) ) | $spl174),
  inference(cnf_transformation,[],[f20948_D])).
fof(f20948_D,plain,(
  ( ! [X230] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f22967,plain,(
  ( ! [X231,X229,X230] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231)))) ) | ($spl0 | $spl50 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f20189,f12919,f20190,f12918,f20184,f15676,f21938,f15610,f21939,f597,f1254,f5570,f22161,f22187,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f15600,f207,f525,f534,f568,f647,f878,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012,f22512,f22522,f22526,f22531,f22783,f22897])).
fof(f22941,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22940,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22387,plain,(
  ( ! [X17,X18,X16] : (s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK8(X17,X18,bool,X16))))) ) | ($spl88 | $spl166)),
  inference(subsumption_resolution,[],[f883,f22162])).
fof(f22367,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl88 | $spl166)),
  inference(subsumption_resolution,[],[f573,f22162])).
fof(f22361,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl88 | $spl166)),
  inference(subsumption_resolution,[],[f141,f22162])).
fof(f22293,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X1))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) ) | ($spl88 | $spl166)),
  inference(forward_demodulation,[],[f15124,f22162])).
fof(f22253,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl88 | $spl166)),
  inference(forward_demodulation,[],[f4774,f22162])).
fof(f22179,plain,(
  ( ! [X74] : (s(bool,'T_0') = s(bool,X74)) ) | ($spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f13502,f22162])).
fof(f13502,plain,(
  ( ! [X74] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X74)) ) | $spl74),
  inference(subsumption_resolution,[],[f13426,f7725])).
fof(f13426,plain,(
  ( ! [X74] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,'T_0') = s(bool,X74)) ) | $spl74),
  inference(superposition,[],[f5821,f1445])).
fof(f22177,plain,(
  ( ! [X64] : (s(bool,'T_0') = s(bool,X64)) ) | ($spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f13247,f22162])).
fof(f13247,plain,(
  ( ! [X64] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X64)) ) | $spl74),
  inference(forward_demodulation,[],[f13183,f894])).
fof(f13183,plain,(
  ( ! [X64] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl74),
  inference(duplicate_literal_removal,[],[f13029])).
fof(f13029,plain,(
  ( ! [X64] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) ) | $spl74),
  inference(superposition,[],[f5821,f1437])).
fof(f22172,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22171,f22162])).
fof(f22171,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl74 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f10129,f22162])).
fof(f10129,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl74),
  inference(condensation,[],[f10128])).
fof(f10128,plain,(
  ( ! [X10,X9] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X10)) ) | $spl74),
  inference(duplicate_literal_removal,[],[f10083])).
fof(f10083,plain,(
  ( ! [X10,X9] : (s(bool,f(s(bool,'T_0'))) != s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl74),
  inference(superposition,[],[f5821,f956])).
fof(f22169,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f10134,f22162])).
fof(f10134,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl74),
  inference(duplicate_literal_removal,[],[f10078])).
fof(f10078,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl74),
  inference(superposition,[],[f5821,f135])).
fof(f22162,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,X18)) ) | ($spl88 | $spl166)),
  inference(global_subsumption,[],[f8329,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f597,f1254])).
fof(f10153,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl74),
  inference(condensation,[],[f10152])).
fof(f10152,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(subsumption_resolution,[],[f10111,f135])).
fof(f10111,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(superposition,[],[f5821,f135])).
fof(f10156,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl74),
  inference(condensation,[],[f10155])).
fof(f10155,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(condensation,[],[f10154])).
fof(f10154,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(subsumption_resolution,[],[f10113,f220])).
fof(f10113,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(superposition,[],[f5821,f220])).
fof(f10159,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl74),
  inference(condensation,[],[f10158])).
fof(f10158,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl74),
  inference(condensation,[],[f10157])).
fof(f10157,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl74),
  inference(subsumption_resolution,[],[f10114,f220])).
fof(f10114,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl74),
  inference(superposition,[],[f5821,f220])).
fof(f10119,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl74),
  inference(equality_resolution,[],[f5821])).
fof(f10101,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl74),
  inference(superposition,[],[f5821,f220])).
fof(f10100,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl74),
  inference(superposition,[],[f5821,f958])).
fof(f22940,plain,(
  ( ! [X52,X51] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl50 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f22939,f22161])).
fof(f22939,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl50 | $spl110 | $spl166)),
  inference(forward_demodulation,[],[f20015,f22161])).
fof(f22928,plain,(
  $false | ($spl15 | $spl22 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22927,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22927,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl15 | $spl22 | $spl50 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22926,f7715])).
fof(f22926,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22925,f22162])).
fof(f22920,plain,(
  $false | ($spl15 | $spl22 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22919,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22919,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl15 | $spl22 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22918,f7715])).
fof(f22918,plain,(
  ( ! [X187,X186] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl88 | $spl166)),
  inference(forward_demodulation,[],[f3347,f22162])).
fof(f22901,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22900,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22900,plain,(
  ( ! [X271,X273,X272,X274] : (s(X273,f(s(bool,'F_0'))) != s(X273,g(s(bool,'F_0'))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X274,sK1)) | s(bool,'T_0') = s(bool,sK8(X271,X272,X273,bool))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22899,f22162])).
fof(f22899,plain,(
  ( ! [X271,X273,X272,X274] : (s(X273,f(s(bool,g(s(bool,'F_0'))))) != s(X273,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X274,sK1)) | s(bool,'T_0') = s(bool,sK8(X271,X272,X273,bool))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5356,f22161])).
fof(f22898,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22897,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22879,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22878,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22878,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22877,f22162])).
fof(f22873,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22872,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22872,plain,(
  ( ! [X6] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22871,f22162])).
fof(f22871,plain,(
  ( ! [X6] : (~p(s(bool,g(s(bool,'F_0')))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5048,f22161])).
fof(f22870,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22869,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22869,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'F_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22868,f22162])).
fof(f22868,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f628,f22161])).
fof(f22864,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22863,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22863,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22862,f22162])).
fof(f22862,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f5610,f22161])).
fof(f22849,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22848,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22848,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (~p(s(bool,'F_0')) | s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22847,f22162])).
fof(f22847,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16250,f22161])).
fof(f22846,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22845,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22845,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,'F_0')) | s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22844,f22162])).
fof(f22844,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16249,f22161])).
fof(f22843,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22842,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22842,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,'F_0')) | s('type.option.option'(X10),happ(s(fun(bool,'type.option.option'(X10)),X12),s(bool,X9))) = s('type.option.option'(X10),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))),s(fun(bool,'type.option.option'(X10)),X12)),X11,'type.option.option'(X10))) | s(bool,X9) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22841,f22162])).
fof(f22841,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X10),happ(s(fun(bool,'type.option.option'(X10)),X12),s(bool,X9))) = s('type.option.option'(X10),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))),s(fun(bool,'type.option.option'(X10)),X12)),X11,'type.option.option'(X10))) | s(bool,X9) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16206,f22161])).
fof(f22840,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22839,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22839,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(X1),happ(s(fun(bool,'type.option.option'(X1)),X2),s(bool,'T_0'))) = s('type.option.option'(X1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X1)),X2)),X3,'type.option.option'(X1)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22838,f22162])).
fof(f22838,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X1),happ(s(fun(bool,'type.option.option'(X1)),X2),s(bool,'T_0'))) = s('type.option.option'(X1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X1)),X2)),X3,'type.option.option'(X1)))) ) | ($spl50 | $spl166)),
  inference(condensation,[],[f22837])).
fof(f22837,plain,(
  ( ! [X70,X72,X71,X69,X73] : (~p(s(bool,g(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X73) | s('type.option.option'(X70),happ(s(fun(bool,'type.option.option'(X70)),X72),s(bool,'T_0'))) = s('type.option.option'(X70),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X70)),X72)),X71,'type.option.option'(X70))) | s(bool,X69) = s(bool,X73)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16281,f22161])).
fof(f22836,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22835,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22835,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(X1),happ(s(fun(bool,'type.option.option'(X1)),X2),s(bool,X0))) = s('type.option.option'(X1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))),s(fun(bool,'type.option.option'(X1)),X2)),X3,'type.option.option'(X1)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22834,f22162])).
fof(f22834,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X1),happ(s(fun(bool,'type.option.option'(X1)),X2),s(bool,X0))) = s('type.option.option'(X1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))),s(fun(bool,'type.option.option'(X1)),X2)),X3,'type.option.option'(X1)))) ) | ($spl50 | $spl166)),
  inference(condensation,[],[f22833])).
fof(f22833,plain,(
  ( ! [X14,X17,X15,X18,X16] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X16),happ(s(fun(bool,'type.option.option'(X16)),X18),s(bool,X14))) = s('type.option.option'(X16),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))),s(fun(bool,'type.option.option'(X16)),X18)),X17,'type.option.option'(X16))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X14)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16207,f22161])).
fof(f22832,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22831,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22831,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22830,f22162])).
fof(f22830,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16202,f22161])).
fof(f22829,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22828,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22828,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'F_0')) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22827,f22162])).
fof(f22827,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f15465,f22161])).
fof(f22823,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22822,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22822,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'F_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22821,f22162])).
fof(f22821,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f819,f22161])).
fof(f22820,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22819,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22819,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22818,f22162])).
fof(f22818,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f20094,f22161])).
fof(f22812,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22811,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22811,plain,(
  ( ! [X231,X230,X232] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) | s(bool,X231) != s(bool,X232) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X230,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X231)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22810,f22162])).
fof(f22810,plain,(
  ( ! [X231,X230,X232] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X232))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X231) != s(bool,X232) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X230,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X231)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19915,f22161])).
fof(f22808,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22807,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22807,plain,(
  ( ! [X466,X465,X467,X468] : (s(X467,f(s(bool,'F_0'))) != s(X467,g(s(bool,'F_0'))) | s(fun(bool,X467),X465) = s(fun(bool,X467),X466) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X468,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK8(X465,X466,X467,bool))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22806,f22162])).
fof(f22806,plain,(
  ( ! [X466,X465,X467,X468] : (s(X467,f(s(bool,g(s(bool,'F_0'))))) != s(X467,g(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,X467),X465) = s(fun(bool,X467),X466) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X468,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK8(X465,X466,X467,bool))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19819,f22161])).
fof(f22805,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22804,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22804,plain,(
  ( ! [X459,X458] : (s('type.option.option'(bool),X458) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X458) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X459,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6(X458,bool))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22803,f22162])).
fof(f22803,plain,(
  ( ! [X459,X458] : (s('type.option.option'(bool),X458) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X458) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X459,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6(X458,bool))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19816,f22161])).
fof(f22799,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22798,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22798,plain,(
  ( ! [X436,X434,X437,X433,X435] : (~p(s(bool,'F_0')) | s('type.option.option'(X435),happ(s(fun(bool,'type.option.option'(X435)),X437),s(bool,X433))) = s('type.option.option'(X435),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))),s(fun(bool,'type.option.option'(X435)),X437)),X436,'type.option.option'(X435))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X434,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X433)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22797,f22162])).
fof(f22797,plain,(
  ( ! [X436,X434,X437,X433,X435] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X435),happ(s(fun(bool,'type.option.option'(X435)),X437),s(bool,X433))) = s('type.option.option'(X435),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))),s(fun(bool,'type.option.option'(X435)),X437)),X436,'type.option.option'(X435))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X434,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X433)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19811,f22161])).
fof(f22790,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22789,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22789,plain,(
  ( ! [X422,X424,X423] : (s('type.option.option'(bool),X424) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X423,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X422)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22788,f22162])).
fof(f22788,plain,(
  ( ! [X422,X424,X423] : (s('type.option.option'(bool),X424) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X423,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X422)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19808,f22161])).
fof(f22784,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22783,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22781,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22780,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22780,plain,(
  ( ! [X397,X399,X398] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X399))) | s(bool,X397) = s(bool,X399) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X398,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X397)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22779,f22162])).
fof(f22779,plain,(
  ( ! [X397,X399,X398] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X399))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X397) = s(bool,X399) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X398,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X397)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19800,f22161])).
fof(f22747,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22746,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22746,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22745,f22162])).
fof(f22745,plain,(
  ( ! [X0] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f1100,f22161])).
fof(f22744,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22743,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22743,plain,(
  ( ! [X6] : (~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22742,f22162])).
fof(f22742,plain,(
  ( ! [X6] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f868,f22161])).
fof(f22741,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22740,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22740,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'F_0')) | s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22739,f22162])).
fof(f22739,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f14399,f22161])).
fof(f22735,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22734,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22734,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,'F_0')) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22733,f22162])).
fof(f22733,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f15448,f22161])).
fof(f22732,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22731,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22731,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22730,f22162])).
fof(f22730,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16254,f22161])).
fof(f22701,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22700,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22700,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'F_0')) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22699,f22162])).
fof(f22699,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f15471,f22161])).
fof(f22698,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22697,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22697,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22696,f22162])).
fof(f22696,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f15441,f22161])).
fof(f22684,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22683,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22683,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'F_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22682,f22162])).
fof(f22682,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f652,f22161])).
fof(f22671,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22670,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22670,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'F_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22669,f22162])).
fof(f22669,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,g(s(bool,'F_0')))) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f1001,f22161])).
fof(f22668,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22667,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22667,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'F_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22666,f22162])).
fof(f22666,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,g(s(bool,'F_0')))) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f987,f22161])).
fof(f22655,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22654,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22654,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22653,f22162])).
fof(f22653,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,g(s(bool,'F_0')))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f188,f22161])).
fof(f22532,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22531,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22527,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22526,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22523,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22522,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22520,plain,(
  $false | ($spl15 | $spl22 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22519,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22519,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl15 | $spl22 | $spl50 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22518,f7715])).
fof(f22518,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22517,f22162])).
fof(f22517,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f22516,f22161])).
fof(f22516,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X0,sK8(X1,X2,bool,X0))))),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl50 | $spl166)),
  inference(condensation,[],[f22515])).
fof(f22515,plain,(
  ( ! [X185,X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X182,sK8(X183,X184,bool,X182))))),bool)) | s(bool,'T_0') = s(bool,X185)) ) | ($spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22514,f22161])).
fof(f22514,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,g(s(bool,'F_0'))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X182,sK8(X183,X184,bool,X182))))),bool)) | s(bool,'T_0') = s(bool,X185)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f3346,f22161])).
fof(f22513,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22512,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22499,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22498,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22498,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,'F_0')) | s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,X5))) = s('type.option.option'(X6),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8)),X7,'type.option.option'(X6))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22497,f22162])).
fof(f22497,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,X5))) = s('type.option.option'(X6),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8)),X7,'type.option.option'(X6))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16205,f22161])).
fof(f22483,plain,(
  $false | ($spl15 | $spl22 | $spl58 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22482,f7715])).
fof(f22482,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl58 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f5576,f22162])).
fof(f22424,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819,f5012])).
fof(f22422,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818,f4819])).
fof(f22421,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783,f4818])).
fof(f22420,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772,f4783])).
fof(f22419,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475,f4772])).
fof(f22417,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473,f4475])).
fof(f22416,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028,f4473])).
fof(f22412,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027,f3028])).
fof(f22411,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023,f3027])).
fof(f22410,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022,f3023])).
fof(f22409,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898,f3022])).
fof(f22408,plain,(
  $false | ($spl15 | $spl22 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22407,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898])).
fof(f22407,plain,(
  ( ! [X92,X90,X91] : (s(X92,f(s(bool,'F_0'))) != s(X92,g(s(bool,'F_0'))) | s(fun(bool,X92),X90) = s(fun(bool,X92),X91)) ) | ($spl15 | $spl22 | $spl50 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22406,f7715])).
fof(f22406,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X92,f(s(bool,'F_0'))) != s(X92,g(s(bool,'F_0'))) | s(fun(bool,X92),X90) = s(fun(bool,X92),X91)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22405,f22162])).
fof(f22405,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(X92,f(s(bool,'F_0'))) != s(X92,g(s(bool,'F_0'))) | s(fun(bool,X92),X90) = s(fun(bool,X92),X91)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f2994,f22161])).
fof(f22404,plain,(
  $false | ($spl15 | $spl22 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22403,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898])).
fof(f22403,plain,(
  ( ! [X85,X83,X84] : (s(fun(X83,bool),X84) = s(fun(X83,bool),X85)) ) | ($spl15 | $spl22 | $spl50 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22402,f7715])).
fof(f22402,plain,(
  ( ! [X85,X83,X84] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22401,f22162])).
fof(f22401,plain,(
  ( ! [X85,X83,X84] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(fun(X83,bool),X84) = s(fun(X83,bool),X85)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22400,f22161])).
fof(f22400,plain,(
  ( ! [X85,X83,X84] : (s(fun(X83,bool),X84) = s(fun(X83,bool),X85) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X83,sK8(X84,X85,bool,X83))))),bool))) ) | ($spl88 | $spl166)),
  inference(subsumption_resolution,[],[f2988,f22162])).
fof(f22399,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857,f2898])).
fof(f22398,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810,f2857])).
fof(f22397,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620,f2810])).
fof(f22396,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669,f2620])).
fof(f22394,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594,f1669])).
fof(f22393,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554,f1594])).
fof(f22392,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504,f1554])).
fof(f22391,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437,f1504])).
fof(f22390,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280,f1437])).
fof(f22389,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387,f1280])).
fof(f22388,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878,f22387])).
fof(f22386,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647,f878])).
fof(f22372,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367,f647])).
fof(f22368,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568,f22367])).
fof(f22366,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534,f568])).
fof(f22365,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525,f534])).
fof(f22364,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207,f525])).
fof(f22363,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361,f207])).
fof(f22362,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600,f22361])).
fof(f22360,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22359,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22359,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,'F_0'))) = s('type.option.option'(X262),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X262)),X264)),X263,'type.option.option'(X262))) | ~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X260,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X261)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22358,f22162])).
fof(f22358,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,g(s(bool,'F_0'))))) = s('type.option.option'(X262),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))),s(fun(bool,'type.option.option'(X262)),X264)),X263,'type.option.option'(X262))) | ~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X260,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X261)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22357,f22161])).
fof(f22357,plain,(
  ( ! [X261,X263,X260,X262,X264] : (~p(s(bool,'F_0')) | s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s('type.option.option'(X262),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))),s(fun(bool,'type.option.option'(X262)),X264)),X263,'type.option.option'(X262))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X260,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X261)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22356,f22162])).
fof(f22356,plain,(
  ( ! [X261,X263,X260,X262,X264] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X262),happ(s(fun(bool,'type.option.option'(X262)),X264),s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s('type.option.option'(X262),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X260),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))),s(fun(bool,'type.option.option'(X262)),X264)),X263,'type.option.option'(X262))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X260,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X261)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f19924,f22161])).
fof(f22346,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22345,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22345,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22344,f22162])).
fof(f22344,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5530,f22161])).
fof(f22343,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22342,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22342,plain,(
  ( ! [X151,X149,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) != s(bool,X151) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X149,sK1)) | s(bool,'T_0') = s(bool,X150)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22341,f22162])).
fof(f22341,plain,(
  ( ! [X151,X149,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X150) != s(bool,X151) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X149,sK1)) | s(bool,'T_0') = s(bool,X150)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5415,f22161])).
fof(f22340,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22339,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22339,plain,(
  ( ! [X265,X264] : (s('type.option.option'(bool),X264) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X264) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X265,sK1)) | s(bool,'T_0') = s(bool,sK6(X264,bool))) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22338,f22162])).
fof(f22338,plain,(
  ( ! [X265,X264] : (s('type.option.option'(bool),X264) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X264) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X265,sK1)) | s(bool,'T_0') = s(bool,sK6(X264,bool))) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5353,f22161])).
fof(f22337,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22336,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22336,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),X250) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X248) = s(bool,sK6(X250,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X250) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X249,sK1)) | s(bool,'T_0') = s(bool,X248)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22335,f22162])).
fof(f22335,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),X250) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X248) = s(bool,sK6(X250,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X250) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X249,sK1)) | s(bool,'T_0') = s(bool,X248)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5349,f22161])).
fof(f22334,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22333,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22333,plain,(
  ( ! [X225,X223,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) | s(bool,X223) = s(bool,X225) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X224,sK1)) | s(bool,'T_0') = s(bool,X223)) ) | ($spl0 | $spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22332,f22162])).
fof(f22332,plain,(
  ( ! [X225,X223,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,X223) = s(bool,X225) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X224,sK1)) | s(bool,'T_0') = s(bool,X223)) ) | ($spl0 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5341,f22161])).
fof(f22322,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22321,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22321,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'F_0'))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | ~p(s(bool,'F_0')) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22320,f22162])).
fof(f22320,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,'F_0')) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22319,f22162])).
fof(f22319,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16243,f22161])).
fof(f22318,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22317,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22317,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,'F_0')) | s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0'))) = s('type.option.option'(X85),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X85)),X87)),X86,'type.option.option'(X85))) | s(bool,'T_0') = s(bool,X84)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22316,f22162])).
fof(f22316,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0'))) = s('type.option.option'(X85),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(bool,'type.option.option'(X85)),X87)),X86,'type.option.option'(X85))) | s(bool,'T_0') = s(bool,X84)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f16222,f22161])).
fof(f22295,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293,f15600])).
fof(f22294,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405,f22293])).
fof(f22290,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387,f14405])).
fof(f22289,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022,f14387])).
fof(f22286,plain,(
  $false | ($spl30 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22285,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022])).
fof(f22285,plain,(
  ( ! [X52,X51] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl30 | $spl50 | $spl166)),
  inference(subsumption_resolution,[],[f22284,f22161])).
fof(f22284,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,g(s(bool,'F_0'))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl30 | $spl50 | $spl166)),
  inference(forward_demodulation,[],[f5490,f22161])).
fof(f22269,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977,f5022])).
fof(f22268,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972,f4977])).
fof(f22267,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968,f4972])).
fof(f22265,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805,f4968])).
fof(f22263,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804,f4805])).
fof(f22262,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253,f4804])).
fof(f22254,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709,f22253])).
fof(f22245,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692,f4709])).
fof(f22243,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689,f4692])).
fof(f22238,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688,f4689])).
fof(f22237,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679,f4688])).
fof(f22228,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982,f4679])).
fof(f22227,plain,(
  $false | ($spl15 | $spl22 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22226,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982])).
fof(f22226,plain,(
  ( ! [X86] : (s('type.option.option'(bool),X86) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X86)) ) | ($spl15 | $spl22 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f22225,f7715])).
fof(f22225,plain,(
  ( ! [X86] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X86) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X86)) ) | ($spl88 | $spl166)),
  inference(forward_demodulation,[],[f2989,f22162])).
fof(f22224,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647,f2982])).
fof(f22223,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22222,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647])).
fof(f22222,plain,(
  ( ! [X28,X27] : (~p(s(bool,'F_0')) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X27)),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22221,f22162])).
fof(f22221,plain,(
  ( ! [X28,X27] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X27)),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f2650,f22161])).
fof(f22216,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645,f2647])).
fof(f22215,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639,f2645])).
fof(f22214,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627,f2639])).
fof(f22213,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22212,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627])).
fof(f22212,plain,(
  ( ! [X28,X27] : (~p(s(bool,'F_0')) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl50 | $spl88 | $spl166)),
  inference(forward_demodulation,[],[f22211,f22162])).
fof(f22211,plain,(
  ( ! [X28,X27] : (~p(s(bool,g(s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl50 | $spl166)),
  inference(forward_demodulation,[],[f2630,f22161])).
fof(f22206,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625,f2627])).
fof(f22205,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350,f2625])).
fof(f22204,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711,f2350])).
fof(f22203,plain,(
  $false | ($spl18 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f1720,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711])).
fof(f22202,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693,f1711])).
fof(f22201,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279,f1693])).
fof(f22200,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913,f1279])).
fof(f22199,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179,f913])).
fof(f22188,plain,(
  $false | ($spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22187,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179])).
fof(f22184,plain,(
  $false | ($spl0 | $spl50 | $spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f22183,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179])).
fof(f22183,plain,(
  ( ! [X118,X117] : (s(bool,'T_0') = s(bool,X117) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X118,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl74 | $spl166)),
  inference(subsumption_resolution,[],[f22182,f22161])).
fof(f22182,plain,(
  ( ! [X118,X117] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X117) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X118,'type.option.option'(sK1)))) ) | ($spl0 | $spl50 | $spl74 | $spl166)),
  inference(forward_demodulation,[],[f19954,f22161])).
fof(f19954,plain,(
  ( ! [X118,X117] : (s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X118),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X117) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X118,'type.option.option'(sK1)))) ) | ($spl0 | $spl74)),
  inference(duplicate_literal_removal,[],[f19715])).
fof(f19715,plain,(
  ( ! [X118,X117] : (s(bool,f(s(bool,'T_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X118),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X117) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X118,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X117)) ) | ($spl0 | $spl74)),
  inference(superposition,[],[f5821,f1106])).
fof(f22181,plain,(
  $false | ($spl88 | $spl98 | $spl166)),
  inference(subsumption_resolution,[],[f18633,f22162])).
fof(f22180,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177,f22179])).
fof(f22178,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172,f22177])).
fof(f22173,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169,f22172])).
fof(f22170,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f2647,f2645,f2639,f2627,f2625,f10119,f10159,f10156,f10153,f597,f1254,f8329,f22162,f22169])).
fof(f22168,plain,(
  $false | ($spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f10073,f22162])).
fof(f22167,plain,(
  $false | ($spl15 | $spl22 | $spl74 | $spl88 | $spl166)),
  inference(subsumption_resolution,[],[f10136,f22162])).
fof(f22155,plain,(
  $false | ($spl56 | $spl66 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f5815,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097,f1254,f597])).
fof(f22097,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool)) | s(bool,'T_0') = s(bool,X21)) ) | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f1279,f21667])).
fof(f22095,plain,(
  ( ! [X41,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'T_0') = s(bool,X41)) ) | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f2350,f21667])).
fof(f22080,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f2982,f21667])).
fof(f22015,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl56 | $spl110 | $spl166)),
  inference(condensation,[],[f22014])).
fof(f22014,plain,(
  ( ! [X21,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f534,f21667])).
fof(f21927,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(fun(X169,bool),X170) = s(fun(X169,bool),X171)) ) | ($spl56 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21926])).
fof(f21926,plain,(
  ( ! [X171,X169,X172,X170] : (s(fun(X169,bool),X170) = s(fun(X169,bool),X171) | s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X172)),bool))) ) | ($spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21925,f21659])).
fof(f21925,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(fun(X169,bool),X170) = s(fun(X169,bool),X171) | s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X172)),bool))) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f3575,f21659])).
fof(f21667,plain,(
  ( ! [X52] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f21666,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184])).
fof(f21666,plain,(
  ( ! [X52,X51] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f21665,f21659])).
fof(f21665,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl56 | $spl110 | $spl166)),
  inference(forward_demodulation,[],[f20015,f21659])).
fof(f21659,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,g(s(bool,'F_0')))) ) | ($spl56 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574])).
fof(f22154,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097,f1254,f597])).
fof(f22153,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097,f1254])).
fof(f22152,plain,(
  $false | ($spl45 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f5565,f21659])).
fof(f22151,plain,(
  $false | ($spl52 | $spl54 | $spl166)),
  inference(subsumption_resolution,[],[f5571,f21658])).
fof(f21658,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0')))) ) | ($spl54 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f20166,f12915,f14643,f12920,f12919,f12918,f20191,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5573])).
fof(f20191,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl54),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f20166,f12915,f14643,f12920,f12919,f12918])).
fof(f20166,plain,(
  ( ! [X28] : (s(bool,X28) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl54),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922])).
fof(f5571,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl52),
  inference(cnf_transformation,[],[f5571_D])).
fof(f5571_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f22150,plain,(
  $false | ($spl15 | $spl22 | $spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f7715,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22146,plain,(
  $false | ($spl56 | $spl72 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f5819,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22145,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22144,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22144,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f10077,f21664])).
fof(f21664,plain,(
  ( ! [X43] : (s(bool,'F_0') = s(bool,X43)) ) | ($spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f21663,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184])).
fof(f21663,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f20014,f21659])).
fof(f10077,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | $spl74),
  inference(unit_resulting_resolution,[],[f894,f5821])).
fof(f22143,plain,(
  $false | ($spl15 | $spl22 | $spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f10136,f21664])).
fof(f22142,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f10073,f21664])).
fof(f22141,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22140,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22140,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f10134,f21664])).
fof(f22139,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22138,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22138,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f22137,f21664])).
fof(f22137,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f10129,f21664])).
fof(f22136,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22135,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22135,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f22134,f21664])).
fof(f22134,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f10127,f21664])).
fof(f10127,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) != s(bool,f(s(bool,'T_0')))) ) | $spl74),
  inference(condensation,[],[f10126])).
fof(f10126,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool))) ) | $spl74),
  inference(duplicate_literal_removal,[],[f10086])).
fof(f10086,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,X15)) ) | $spl74),
  inference(superposition,[],[f5821,f958])).
fof(f22133,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22132,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22132,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f22131,f21664])).
fof(f22131,plain,(
  ( ! [X28] : (s(bool,'F_0') != s(bool,X28) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f10099,f21664])).
fof(f10099,plain,(
  ( ! [X28] : (s(bool,X28) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl74),
  inference(superposition,[],[f5821,f894])).
fof(f22130,plain,(
  $false | ($spl56 | $spl74 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f10153,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22129,plain,(
  $false | ($spl56 | $spl74 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f10156,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22128,plain,(
  $false | ($spl56 | $spl74 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f10159,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22127,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22126,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22126,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f10162,f21664])).
fof(f10162,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | $spl74),
  inference(condensation,[],[f10161])).
fof(f10161,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl74),
  inference(condensation,[],[f10160])).
fof(f10160,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl74),
  inference(subsumption_resolution,[],[f10117,f220])).
fof(f10117,plain,(
  ( ! [X14,X13] : (s(bool,X13) != s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,'T_0')))),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl74),
  inference(superposition,[],[f5821,f958])).
fof(f22122,plain,(
  $false | ($spl56 | $spl74 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f10119,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22121,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22120,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22120,plain,(
  ( ! [X64] : (s(bool,'T_0') = s(bool,X64)) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f13247,f21664])).
fof(f22119,plain,(
  $false | ($spl56 | $spl74 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22118,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22118,plain,(
  ( ! [X74] : (s(bool,'T_0') = s(bool,X74)) ) | ($spl56 | $spl74 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f13502,f21664])).
fof(f22117,plain,(
  $false | ($spl56 | $spl98 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f18633,f21664])).
fof(f22116,plain,(
  $false | ($spl56 | $spl98 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f18766,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f18766,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl98),
  inference(unit_resulting_resolution,[],[f208,f18712])).
fof(f18712,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,f(s(bool,X6))) | s(bool,'F_0') = s(bool,X6)) ) | $spl98),
  inference(trivial_inequality_removal,[],[f18691])).
fof(f18691,plain,(
  ( ! [X6] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X6) | s(bool,'T_0') = s(bool,f(s(bool,X6)))) ) | $spl98),
  inference(superposition,[],[f18342,f135])).
fof(f22098,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095,f22097])).
fof(f22096,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625,f22095])).
fof(f22094,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627,f2625])).
fof(f22093,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639,f2627])).
fof(f22088,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645,f2639])).
fof(f22087,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647,f2645])).
fof(f22086,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080,f2647])).
fof(f22081,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679,f22080])).
fof(f22079,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688,f4679])).
fof(f22073,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689,f4688])).
fof(f22072,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692,f4689])).
fof(f22066,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709,f4692])).
fof(f22064,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968,f4709])).
fof(f22059,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972,f4968])).
fof(f22057,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977,f4972])).
fof(f22056,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387,f4977])).
fof(f22055,plain,(
  $false | ($spl15 | $spl56 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22054,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387])).
fof(f22054,plain,(
  ( ! [X54,X53] : (s(bool,X53) = s(bool,sK6(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool))) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f5022,f21683])).
fof(f21683,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187)))) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682])).
fof(f21682,plain,(
  ( ! [X187,X186] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f3347,f21664])).
fof(f21677,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194)) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676])).
fof(f21676,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21675,f21664])).
fof(f21675,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f3350,f21659])).
fof(f22048,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600,f14387])).
fof(f22043,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015,f15600])).
fof(f22019,plain,(
  $false | ($spl56 | $spl108 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f22018,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015])).
fof(f22018,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f141,f21664])).
fof(f22017,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(subsumption_resolution,[],[f525,f21667])).
fof(f22016,plain,(
  $false | ($spl56 | $spl110 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21666,f21667,f21926,f21927,f15676,f21938,f15610,f21939,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22015])).
fof(f22013,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22001,f22012])).
fof(f22012,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f573,f21664])).
fof(f22001,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f1280,f21683])).
fof(f21983,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f5012,f21683])).
fof(f21951,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl56 | $spl58 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f5576,f21664])).
fof(f21933,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl15 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932])).
fof(f21932,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21931,f21664])).
fof(f21931,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f21930,f21659])).
fof(f21930,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X0,sK8(X1,X2,bool,X0))))),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl56 | $spl166)),
  inference(condensation,[],[f21929])).
fof(f21929,plain,(
  ( ! [X185,X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X182,sK8(X183,X184,bool,X182))))),bool)) | s(bool,'T_0') = s(bool,X185)) ) | ($spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21928,f21659])).
fof(f21928,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,g(s(bool,'F_0'))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X182,sK8(X183,X184,bool,X182))))),bool)) | s(bool,'T_0') = s(bool,X185)) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f3346,f21659])).
fof(f22002,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437,f22001])).
fof(f22000,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504,f1437])).
fof(f21999,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554,f1504])).
fof(f21998,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594,f1554])).
fof(f21997,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620,f1594])).
fof(f21995,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810,f2620])).
fof(f21994,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857,f2810])).
fof(f21993,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898,f2857])).
fof(f21992,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022,f2898])).
fof(f21991,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023,f3022])).
fof(f21990,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027,f3023])).
fof(f21989,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028,f3027])).
fof(f21988,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983,f3028])).
fof(f21984,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951,f21983])).
fof(f21952,plain,(
  $false | ($spl15 | $spl56 | $spl58 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f5576,f14643,f12920,f12919,f12918,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21677,f21682,f21683,f21926,f21927,f21932,f21933,f15676,f21938,f15610,f21939,f21951])).
fof(f21944,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5606,f5605,f5602,f5601,f5599,f5597,f5502,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15656,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16252,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21682,f21685,f21690,f21694,f21695,f21697,f21699,f21702,f21836,f21837,f21926,f21927,f21932,f15676,f21938,f15610,f21939,f21942,f21943])).
fof(f21943,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5606,f5605,f5602,f5601,f5599,f5597,f5502,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15656,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16252,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21682,f21685,f21690,f21694,f21695,f21697,f21699,f21702,f21836,f21837,f21926,f21927,f21932,f15676,f21938,f15610,f21939,f21942])).
fof(f21942,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f21941,f21695])).
fof(f21941,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21940,f21664])).
fof(f21940,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,g(s(bool,'F_0')))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f13997,f21659])).
fof(f21837,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5606,f5605,f5602,f5601,f5599,f5597,f5502,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15656,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16252,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f20184,f5574,f21659,f21663,f21664,f21676,f21682,f21685,f21690,f21694,f21695,f21697,f21699,f21702,f21836])).
fof(f21836,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f21835,f21695])).
fof(f21835,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21834,f21664])).
fof(f21834,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,g(s(bool,'F_0')))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl56 | $spl166)),
  inference(forward_demodulation,[],[f752,f21659])).
fof(f21702,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21701,f21659])).
fof(f21701,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f5502,f21659])).
fof(f21699,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21698,f21659])).
fof(f21698,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f5597,f21659])).
fof(f21697,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21696,f21659])).
fof(f21696,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f5599,f21659])).
fof(f21695,plain,(
  ~p(s(bool,'F_0')) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(global_subsumption,[],[f21694,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597])).
fof(f21694,plain,(
  ( ! [X17,X16] : (~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(subsumption_resolution,[],[f21693,f21659])).
fof(f21693,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | ~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21692,f21659])).
fof(f21692,plain,(
  ( ! [X17,X16] : (~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2)))) ) | ($spl38 | $spl56 | $spl108 | $spl166)),
  inference(forward_demodulation,[],[f21691,f21664])).
fof(f21691,plain,(
  ( ! [X17,X16] : (~p(s(bool,g(s(bool,'F_0')))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2)))) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f5602,f21659])).
fof(f21690,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21689,f21659])).
fof(f21689,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f5605,f21659])).
fof(f21685,plain,(
  ( ! [X206,X204,X207,X205] : (s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207)))) ) | ($spl38 | $spl56 | $spl166)),
  inference(subsumption_resolution,[],[f21684,f21659])).
fof(f21684,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207)))) ) | ($spl38 | $spl56 | $spl166)),
  inference(forward_demodulation,[],[f15656,f21659])).
fof(f16252,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,happ(s(fun('type.option.option'(X209),bool),X210),s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK2)))))) | s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X208),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f819,f5502])).
fof(f15656,plain,(
  ( ! [X206,X204,X207,X205] : (s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X204),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f799,f5502])).
fof(f5597,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X5),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f185,f5502])).
fof(f5599,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1)))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X9),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f186,f5502])).
fof(f5601,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(sK1,bool),X14),s(sK1,sK2)))) | p(s(bool,happ(s(fun(sK1,bool),X14),s(sK1,X15)))) | s(sK1,X15) != s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X13,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X13),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f187,f5502])).
fof(f5602,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f188,f5502])).
fof(f5605,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X22),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f648,f5502])).
fof(f5606,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun(sK1,bool),X25),s(sK1,sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun(sK1,bool),X25),s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X24,sK1),X25,sK1)))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X24),s(sK1,sK2)))) ) | $spl38),
  inference(superposition,[],[f716,f5502])).
fof(f21653,plain,(
  $false | ($spl74 | $spl84 | $spl110)),
  inference(global_subsumption,[],[f21652,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21607,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21606,f128])).
fof(f21606,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f628,f21349])).
fof(f21604,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21603,f128])).
fof(f21603,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f5610,f21349])).
fof(f21597,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21596,f128])).
fof(f21596,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (~p(s(bool,'T_0')) | s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f16250,f21349])).
fof(f21594,plain,(
  ( ! [X196,X194,X197,X195,X193] : (s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21593,f128])).
fof(f21593,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,'T_0')) | s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f16249,f21349])).
fof(f21591,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21590,f128])).
fof(f21590,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f16202,f21349])).
fof(f21588,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21587,f128])).
fof(f21587,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f15465,f21349])).
fof(f21585,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21584,f128])).
fof(f21584,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f819,f21349])).
fof(f21573,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21572,f128])).
fof(f21572,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f14399,f21349])).
fof(f21570,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21569,f128])).
fof(f21569,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,'T_0')) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f15448,f21349])).
fof(f21567,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21566,f128])).
fof(f21566,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f16254,f21349])).
fof(f21561,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21560,f128])).
fof(f21560,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f15471,f21349])).
fof(f21558,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21557,f128])).
fof(f21557,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f15441,f21349])).
fof(f21551,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21550,f128])).
fof(f21550,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f652,f21349])).
fof(f21545,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21544,f128])).
fof(f21544,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f1001,f21349])).
fof(f21542,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21541,f128])).
fof(f21541,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f987,f21349])).
fof(f21538,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21537,f128])).
fof(f21537,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f188,f21349])).
fof(f21476,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl74 | $spl84)),
  inference(duplicate_literal_removal,[],[f21475])).
fof(f21475,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f4783,f21349])).
fof(f21473,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f4772,f21349])).
fof(f21469,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f21468,f21349])).
fof(f21468,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f3028,f21349])).
fof(f21466,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21465,f915])).
fof(f21465,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49)))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f3027,f21349])).
fof(f21462,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f2898,f21349])).
fof(f21422,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21421,f21349])).
fof(f21421,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f141,f21349])).
fof(f21412,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'T_0'))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f21411,f21349])).
fof(f21411,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'T_0'))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f21410,f21349])).
fof(f21410,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21409,f128])).
fof(f21409,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,'T_0')) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f16243,f21349])).
fof(f21405,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(X22),happ(s(fun(bool,'type.option.option'(X22)),X23),s(bool,'T_0'))) = s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X21),s(fun(bool,'type.option.option'(X22)),X23))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f14405,f21349])).
fof(f21391,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f21390,f21349])).
fof(f21390,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f21389,f21349])).
fof(f21389,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f4774,f21349])).
fof(f21349,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f8307,f5821])).
fof(f21652,plain,(
  ( ! [X52,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1)))) ) | ($spl74 | $spl84 | $spl110)),
  inference(forward_demodulation,[],[f21651,f21349])).
fof(f21651,plain,(
  ( ! [X52,X51] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl74 | $spl84 | $spl110)),
  inference(subsumption_resolution,[],[f21650,f21349])).
fof(f21650,plain,(
  ( ! [X52,X51] : (s(bool,'T_0') != s(bool,X52) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl74 | $spl84 | $spl110)),
  inference(forward_demodulation,[],[f20015,f21349])).
fof(f21640,plain,(
  $false | ($spl74 | $spl84 | $spl118)),
  inference(global_subsumption,[],[f21639,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21639,plain,(
  ( ! [X97] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1)))) ) | ($spl74 | $spl84 | $spl118)),
  inference(subsumption_resolution,[],[f20025,f21349])).
fof(f21635,plain,(
  $false | ($spl74 | $spl84 | $spl122)),
  inference(global_subsumption,[],[f21634,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21634,plain,(
  ( ! [X126] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1)))) ) | ($spl74 | $spl84 | $spl122)),
  inference(subsumption_resolution,[],[f20032,f21349])).
fof(f21631,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21630,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21630,plain,(
  ( ! [X206,X204,X207,X205] : (s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207)))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f15656,f21349])).
fof(f21629,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21628,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21628,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f5605,f21349])).
fof(f21627,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21626,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21626,plain,(
  ( ! [X17,X16] : (s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21625,f128])).
fof(f21625,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f21624,f21349])).
fof(f21624,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f5602,f21349])).
fof(f21623,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21622,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21622,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f5599,f21349])).
fof(f21621,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21620,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21620,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f5597,f21349])).
fof(f21618,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21617,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21617,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f5502,f21349])).
fof(f21614,plain,(
  $false | ($spl0 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21613,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21613,plain,(
  ( ! [X0] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21612,f128])).
fof(f21612,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f5114,f21349])).
fof(f21611,plain,(
  $false | ($spl0 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21610,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21610,plain,(
  ( ! [X6] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21609,f128])).
fof(f21609,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f5048,f21349])).
fof(f21608,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604,f21607])).
fof(f21605,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597,f21604])).
fof(f21602,plain,(
  $false | ($spl38 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21601,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597])).
fof(f21601,plain,(
  ( ! [X210,X208,X211,X209] : (s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209)))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21600,f128])).
fof(f21600,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,'T_0')) | s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209)))) ) | ($spl38 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f21599,f21349])).
fof(f21599,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,happ(s(fun('type.option.option'(X209),bool),X210),s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK2)))))) | s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209)))) ) | ($spl38 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f16252,f21349])).
fof(f21598,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594,f21597])).
fof(f21595,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591,f21594])).
fof(f21592,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588,f21591])).
fof(f21589,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585,f21588])).
fof(f21586,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573,f21585])).
fof(f21580,plain,(
  $false | ($spl0 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21579,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573])).
fof(f21579,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21578,f128])).
fof(f21578,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f1100,f21349])).
fof(f21577,plain,(
  $false | ($spl0 | $spl74 | $spl84)),
  inference(global_subsumption,[],[f21576,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573])).
fof(f21576,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21575,f128])).
fof(f21575,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f868,f21349])).
fof(f21574,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570,f21573])).
fof(f21571,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567,f21570])).
fof(f21568,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561,f21567])).
fof(f21562,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558,f21561])).
fof(f21559,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551,f21558])).
fof(f21552,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545,f21551])).
fof(f21546,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542,f21545])).
fof(f21543,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538,f21542])).
fof(f21539,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476,f21538])).
fof(f21477,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473,f21476])).
fof(f21474,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469,f21473])).
fof(f21470,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466,f21469])).
fof(f21467,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462,f21466])).
fof(f21463,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422,f21462])).
fof(f21428,plain,(
  $false | ($spl74 | $spl84)),
  inference(trivial_inequality_removal,[],[f21427])).
fof(f21427,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f525,f21349])).
fof(f21426,plain,(
  $false | ($spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21425,f128])).
fof(f21425,plain,(
  ~p(s(bool,'T_0')) | ($spl74 | $spl84)),
  inference(forward_demodulation,[],[f207,f21349])).
fof(f21423,plain,(
  $false | ($spl74 | $spl84)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f21391,f21405,f21412,f21422])).
fof(f21413,plain,(
  $false | ($spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184,f21391,f21405,f21412])).
fof(f21406,plain,(
  $false | ($spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184,f21391,f21405])).
fof(f21403,plain,(
  $false | ($spl30 | $spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f21402,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184,f21391])).
fof(f21402,plain,(
  ( ! [X52,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1))) ) | ($spl30 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f21401,f21349])).
fof(f21401,plain,(
  ( ! [X52,X51] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl30 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21400,f21349])).
fof(f21400,plain,(
  ( ! [X52,X51] : (s(bool,'T_0') != s(bool,X52) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl30 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f5490,f21349])).
fof(f21392,plain,(
  $false | ($spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184,f21391])).
fof(f21388,plain,(
  $false | ($spl18 | $spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f21387,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184])).
fof(f21387,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl18 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f21386,f21349])).
fof(f21386,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl18 | $spl74 | $spl84)),
  inference(forward_demodulation,[],[f1720,f21349])).
fof(f21363,plain,(
  $false | ($spl74 | $spl84 | $spl166)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5821,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f568,f534,f529,f525,f207,f142,f141,f10100,f10101,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918,f15676,f15610,f3028,f3027,f1254,f597,f21349,f20184])).
fof(f21360,plain,(
  $false | ($spl15 | $spl22 | $spl74 | $spl84)),
  inference(subsumption_resolution,[],[f21356,f21349])).
fof(f21356,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl22 | $spl74 | $spl84)),
  inference(backward_demodulation,[],[f21349,f7715])).
fof(f21359,plain,(
  $false | ($spl74 | $spl84)),
  inference(trivial_inequality_removal,[],[f21350])).
fof(f21350,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl74 | $spl84)),
  inference(backward_demodulation,[],[f21349,f597])).
fof(f21358,plain,(
  $false | ($spl74 | $spl84)),
  inference(trivial_inequality_removal,[],[f21351])).
fof(f21351,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl74 | $spl84)),
  inference(backward_demodulation,[],[f21349,f1254])).
fof(f21347,plain,(
  $false | ($spl15 | $spl22 | $spl52 | $spl74 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f10136,f21344])).
fof(f21344,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63)) ) | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21343,f21311])).
fof(f21311,plain,(
  ( ! [X56] : (s(bool,'T_0') != s(bool,X56)) ) | ($spl52 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f15676,f21250,f15610,f21251,f3028])).
fof(f21251,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))),s(fun(bool,'type.option.option'(X6)),X8))) | s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),X7))) != s('type.option.option'('type.option.option'(X6)),'const.option.SOME_1'(s('type.option.option'(X6),happ(s(fun(bool,'type.option.option'(X6)),X8),s(bool,'F_0')))))) ) | ($spl52 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f15676,f21250,f15610])).
fof(f21250,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.option.option'(X85),X86) = s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,'F_0'))) | s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),X86))) != s('type.option.option'('type.option.option'(X85)),'const.option.SOME_1'(s('type.option.option'(X85),happ(s(fun(bool,'type.option.option'(X85)),X87),s(bool,X84)))))) ) | ($spl52 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f15676])).
fof(f20143,plain,(
  ( ! [X74,X75] : (s(bool,X75) = s(bool,f(s(bool,X74))) | s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,X74)) ) | $spl98),
  inference(subsumption_resolution,[],[f18888,f128])).
fof(f18888,plain,(
  ( ! [X74,X75] : (~p(s(bool,'T_0')) | s(bool,X75) = s(bool,f(s(bool,X74))) | s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,X74)) ) | $spl98),
  inference(superposition,[],[f1061,f18712])).
fof(f18952,plain,(
  ( ! [X167,X169,X166,X168] : (~p(s(bool,happ(s(fun('type.option.option'(X167),bool),X168),s('type.option.option'(X167),happ(s(fun(bool,'type.option.option'(X167)),X169),s(bool,'T_0')))))) | s('type.option.option'(X167),happ(s(fun(bool,'type.option.option'(X167)),X169),s(bool,f(s(bool,X166))))) = s('type.option.option'(X167),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,X166))))),s(fun(bool,'type.option.option'(X167)),X169)),X168,'type.option.option'(X167))) | s(bool,'F_0') = s(bool,X166)) ) | $spl98),
  inference(superposition,[],[f819,f18712])).
fof(f18951,plain,(
  ( ! [X165,X163,X164,X162] : (s('type.option.option'('type.option.option'(X163)),'const.option.SOME_1'(s('type.option.option'(X163),X164))) != s('type.option.option'('type.option.option'(X163)),'const.option.SOME_1'(s('type.option.option'(X163),happ(s(fun(bool,'type.option.option'(X163)),X165),s(bool,'T_0'))))) | s('type.option.option'(X163),X164) = s('type.option.option'(X163),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,X162))))),s(fun(bool,'type.option.option'(X163)),X165))) | s(bool,'F_0') = s(bool,X162)) ) | $spl98),
  inference(superposition,[],[f799,f18712])).
fof(f18950,plain,(
  ( ! [X161,X160] : (~p(s(bool,happ(s(fun(bool,bool),X161),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X161),s(bool,sK7(f(s(bool,X160)),X161,bool)))) | s(bool,'F_0') = s(bool,X160)) ) | $spl98),
  inference(superposition,[],[f716,f18712])).
fof(f18949,plain,(
  ( ! [X158,X159] : (s('type.option.option'(bool),X159) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X159,bool)) = s(bool,f(s(bool,X158))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X159) | s(bool,'F_0') = s(bool,X158)) ) | $spl98),
  inference(superposition,[],[f648,f18712])).
fof(f18946,plain,(
  ( ! [X152,X153] : (~p(s(bool,happ(s(fun(bool,bool),X153),s(bool,'T_0')))) | s(bool,f(s(bool,X152))) = s(bool,sK7(f(s(bool,X152)),X153,bool)) | s(bool,'F_0') = s(bool,X152)) ) | $spl98),
  inference(superposition,[],[f188,f18712])).
fof(f18945,plain,(
  ( ! [X151,X149,X150] : (~p(s(bool,happ(s(fun(bool,bool),X150),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X151)))) | s(bool,X151) != s(bool,f(s(bool,X149))) | s(bool,'F_0') = s(bool,X149)) ) | $spl98),
  inference(superposition,[],[f187,f18712])).
fof(f18943,plain,(
  ( ! [X146,X145] : (s(bool,'T_0') != s(bool,X146) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,X145))))) | s(bool,'F_0') = s(bool,X145)) ) | $spl98),
  inference(superposition,[],[f186,f18712])).
fof(f18941,plain,(
  ( ! [X142,X141] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,X142) = s(bool,f(s(bool,X141))) | s(bool,'F_0') = s(bool,X141)) ) | $spl98),
  inference(superposition,[],[f185,f18712])).
fof(f18880,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(f(s(bool,X57)),X58,bool)) | s(bool,'F_0') = s(bool,X57)) ) | $spl98),
  inference(superposition,[],[f706,f18712])).
fof(f19000,plain,(
  ( ! [X41,X42,X40] : (s(bool,X41) = s(bool,f(s(bool,X40))) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X40)) ) | $spl98),
  inference(subsumption_resolution,[],[f18872,f128])).
fof(f18872,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | s(bool,X41) = s(bool,f(s(bool,X40))) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X40)) ) | $spl98),
  inference(superposition,[],[f511,f18712])).
fof(f18999,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,f(s(bool,X36))) | s(bool,'T_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X36)) ) | $spl98),
  inference(subsumption_resolution,[],[f18870,f128])).
fof(f18870,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X37) != s(bool,f(s(bool,X36))) | s(bool,'T_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X36)) ) | $spl98),
  inference(superposition,[],[f222,f18712])).
fof(f18998,plain,(
  ( ! [X28,X29] : (~p(s(bool,X29)) | s(bool,X29) = s(bool,f(s(bool,X28))) | s(bool,'F_0') = s(bool,X28)) ) | $spl98),
  inference(subsumption_resolution,[],[f18867,f128])).
fof(f18867,plain,(
  ( ! [X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | s(bool,X29) = s(bool,f(s(bool,X28))) | s(bool,'F_0') = s(bool,X28)) ) | $spl98),
  inference(superposition,[],[f193,f18712])).
fof(f18816,plain,(
  ( ! [X60] : (s(bool,'T_0') = s(bool,f(s(bool,X60))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X60)),bool))) ) | $spl98),
  inference(superposition,[],[f18712,f894])).
fof(f18757,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,X0)))),bool)) | s(bool,'F_0') = s(bool,X0)) ) | $spl98),
  inference(condensation,[],[f18756])).
fof(f18756,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,X19)))),bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl98),
  inference(subsumption_resolution,[],[f18698,f135])).
fof(f18698,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') != s(bool,X20) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,f(s(bool,X19)))),bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl98),
  inference(superposition,[],[f18342,f958])).
fof(f18682,plain,(
  ( ! [X59] : (s(bool,'F_0') != s(bool,f(s(bool,X59))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl98),
  inference(superposition,[],[f18342,f894])).
fof(f11172,plain,(
  ( ! [X17,X16] : (s(bool,X17) != s(bool,f(s(bool,X16))) | s(bool,'F_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool))) ) | $spl90),
  inference(subsumption_resolution,[],[f11149,f208])).
fof(f11149,plain,(
  ( ! [X17,X16] : (s(bool,X17) != s(bool,f(s(bool,X16))) | s(bool,'F_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl90),
  inference(superposition,[],[f10003,f958])).
fof(f11141,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl90),
  inference(superposition,[],[f10003,f135])).
fof(f21343,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f2982,f21314])).
fof(f21314,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21313,f21311])).
fof(f21313,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) ) | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f2810,f21312])).
fof(f21312,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl52 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f15676,f21250,f15610,f21251,f3028,f21311,f3027])).
fof(f21346,plain,(
  $false | ($spl52 | $spl74 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f10073,f21344])).
fof(f21345,plain,(
  $false | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f18633,f21344])).
fof(f21336,plain,(
  $false | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f525,f21314])).
fof(f21335,plain,(
  $false | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21334,f21311])).
fof(f21334,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl52 | $spl90 | $spl98)),
  inference(condensation,[],[f21333])).
fof(f21333,plain,(
  ( ! [X21,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | ($spl52 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f534,f21314])).
fof(f21306,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) ) | ($spl15 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(subsumption_resolution,[],[f5012,f20927])).
fof(f20927,plain,(
  ( ! [X187,X186] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187)))) ) | ($spl15 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20921,f20926])).
fof(f20926,plain,(
  ( ! [X187,X186] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X186) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'T_0') = s(bool,X187)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f3347,f20906])).
fof(f20921,plain,(
  ( ! [X196,X194,X195,X193] : (s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194)) ) | ($spl15 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920])).
fof(f20920,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f20919,f20906])).
fof(f20919,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(X195,f(s(bool,X196))) != s(X195,g(s(bool,X196))) | s(fun(bool,X195),X193) = s(fun(bool,X195),X194) | s(bool,'T_0') = s(bool,X196)) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f3350,f20901])).
fof(f20906,plain,(
  ( ! [X43] : (s(bool,'F_0') = s(bool,X43)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f20905,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571])).
fof(f20905,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f20014,f20901])).
fof(f20901,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,g(s(bool,'F_0')))) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574])).
fof(f21269,plain,(
  $false | ($spl15 | $spl22 | $spl52 | $spl56 | $spl58 | $spl90 | $spl98 | $spl108)),
  inference(subsumption_resolution,[],[f21268,f7715])).
fof(f21268,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl52 | $spl56 | $spl58 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f5576,f20906])).
fof(f21256,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20926,f20946,f20947,f20967,f20968,f21024,f21025,f21036,f21037,f21132,f21133,f21234,f21238,f21239,f15676,f21250,f15610,f21251,f21254,f21255])).
fof(f21255,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X6)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15611,f15612,f15616,f15673,f15674,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20926,f20946,f20947,f20967,f20968,f21024,f21025,f21036,f21037,f21132,f21133,f21234,f21238,f21239,f15676,f21250,f15610,f21251,f21254])).
fof(f21254,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(subsumption_resolution,[],[f21253,f20968])).
fof(f21253,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f21252,f20906])).
fof(f21252,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,g(s(bool,'F_0')))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f13997,f20901])).
fof(f21239,plain,(
  ( ! [X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f21238])).
fof(f21238,plain,(
  ( ! [X185,X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21237,f20901])).
fof(f21237,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,g(s(bool,'F_0'))) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f3421,f20901])).
fof(f21133,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(X0,X2) != s(X0,X3)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20926,f20946,f20947,f20967,f20968,f21024,f21025,f21036,f21037,f21132])).
fof(f21132,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(subsumption_resolution,[],[f21131,f20968])).
fof(f21131,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f21130,f20906])).
fof(f21130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,g(s(bool,'F_0')))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f752,f20901])).
fof(f21036,plain,(
  ( ! [X405,X403,X404] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X403)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21035,f20901])).
fof(f21035,plain,(
  ( ! [X405,X403,X404] : (s(bool,X405) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X403)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f19802,f20901])).
fof(f21024,plain,(
  ( ! [X428,X430,X432,X429,X431] : (s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,'F_0'))))) | s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X428)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f21023,f20906])).
fof(f21023,plain,(
  ( ! [X428,X430,X432,X429,X431] : (s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,g(s(bool,'F_0'))))))) | s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X428)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f19810,f20901])).
fof(f20968,plain,(
  ~p(s(bool,'F_0')) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f20967,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f14643,f12920,f12919,f12918])).
fof(f20967,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(forward_demodulation,[],[f20966,f20906])).
fof(f20966,plain,(
  ( ! [X0] : (~p(s(bool,g(s(bool,'F_0')))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f5114,f20901])).
fof(f20946,plain,(
  ( ! [X231,X229,X230] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f20945,f20901])).
fof(f20945,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,g(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f5343,f20901])).
fof(f19881,plain,(
  ( ! [X154,X153] : (s(bool,X154) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X153),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X153,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X154)) ) | ($spl0 | $spl90)),
  inference(superposition,[],[f10003,f1106])).
fof(f19909,plain,(
  ( ! [X216,X217] : (s(bool,'F_0') != s(bool,f(s(bool,X217))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X216),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X216,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X217)) ) | ($spl0 | $spl98)),
  inference(superposition,[],[f18342,f1106])).
fof(f21235,plain,(
  ( ! [X261,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | $spl184),
  inference(cnf_transformation,[],[f21235_D])).
fof(f21235_D,plain,(
  ( ! [X261,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f21234,plain,(
  ( ! [X261,X263,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f21233,f20901])).
fof(f21233,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,g(s(bool,'F_0'))) != s(bool,f(s(X260,sK8(X261,X262,bool,X260)))) | s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(forward_demodulation,[],[f5352,f20901])).
fof(f21027,plain,(
  ( ! [X429] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1)))) ) | $spl180),
  inference(cnf_transformation,[],[f21027_D])).
fof(f21027_D,plain,(
  ( ! [X429] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f21037,plain,(
  ( ! [X405,X403,X404] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X404,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405)))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20946,f20947,f21036])).
fof(f21032,plain,(
  ( ! [X422,X424] : (s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424)) ) | $spl182),
  inference(cnf_transformation,[],[f21032_D])).
fof(f21032_D,plain,(
  ( ! [X422,X424] : (s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424)) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f21031,plain,(
  ( ! [X422,X424,X423] : (s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X423,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424)) ) | ($spl0 | $spl15 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5480,f5466,f5482,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5499,f5436,f5501,f5503,f5504,f5506,f5433,f5513,f5514,f5515,f5516,f5524,f5528,f5533,f5535,f5536,f5539,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f1676,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20921,f20926,f20927,f20946,f20947,f20967,f20968,f21024,f21025,f21030])).
fof(f21030,plain,(
  ( ! [X422,X424,X423] : (s(bool,X422) = s(bool,sK6(X424,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X424) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X423,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X422)) ) | ($spl0 | $spl15 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(subsumption_resolution,[],[f19808,f20927])).
fof(f21026,plain,(
  ( ! [X428,X430,X432,X431] : (s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,'F_0')))))) ) | $spl178),
  inference(cnf_transformation,[],[f21026_D])).
fof(f21026_D,plain,(
  ( ! [X428,X430,X432,X431] : (s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,'F_0')))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f21025,plain,(
  ( ! [X428,X430,X432,X429,X431] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X429,'type.option.option'(sK1))) | s('type.option.option'(X430),X431) = s('type.option.option'(X430),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X428))),s(fun(bool,'type.option.option'(X430)),X432))) | s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),X431))) != s('type.option.option'('type.option.option'(X430)),'const.option.SOME_1'(s('type.option.option'(X430),happ(s(fun(bool,'type.option.option'(X430)),X432),s(bool,'F_0')))))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98 | $spl108)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20905,f20906,f20920,f20926,f20946,f20947,f20967,f20968,f21024])).
fof(f20947,plain,(
  ( ! [X231,X229,X230] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1))) ) | ($spl0 | $spl52 | $spl56 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f10003,f11141,f11172,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909,f20126,f19881,f20099,f20097,f20135,f20083,f19820,f20079,f20022,f19977,f20140,f19999,f19997,f20143,f16292,f15691,f20156,f14644,f20158,f14639,f14638,f14636,f12922,f12915,f20183,f14643,f12920,f12919,f12918,f20193,f5571,f5574,f20901,f20946])).
fof(f20898,plain,(
  $false | ($spl45 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f5565,f20313])).
fof(f20313,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,X21)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312])).
fof(f20312,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool)) | s(bool,'T_0') = s(bool,X21)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20234,f909])).
fof(f20234,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool)) | s(bool,'T_0') = s(bool,X21)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20230,f1279])).
fof(f20230,plain,(
  ( ! [X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20199,f208])).
fof(f20199,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20198,f1144])).
fof(f20198,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20197,f960])).
fof(f20197,plain,(
  ( ! [X28] : (s(bool,'F_0') != s(bool,X28) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20196,f20166])).
fof(f20196,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl64 | $spl66 | $spl90)),
  inference(condensation,[],[f20195])).
fof(f20195,plain,(
  ( ! [X78] : (s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,f(s(bool,'F_0')))) ) | ($spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f11671,f11565])).
fof(f11671,plain,(
  ( ! [X78] : (s(bool,X78) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,f(s(bool,'F_0')))) ) | ($spl64 | $spl66 | $spl90)),
  inference(superposition,[],[f10003,f11565])).
fof(f20182,plain,(
  ( ! [X52,X53] : (s(bool,X52) = s(bool,X53) | s(bool,'F_0') = s(bool,X53) | s(bool,'F_0') = s(bool,X52)) ) | $spl66),
  inference(subsumption_resolution,[],[f20181,f128])).
fof(f20181,plain,(
  ( ! [X52,X53] : (~p(s(bool,'T_0')) | s(bool,X52) = s(bool,X53) | s(bool,'F_0') = s(bool,X53) | s(bool,'F_0') = s(bool,X52)) ) | $spl66),
  inference(forward_demodulation,[],[f12152,f5815])).
fof(f12152,plain,(
  ( ! [X52,X53] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,X52) = s(bool,X53) | s(bool,'F_0') = s(bool,X53) | s(bool,'F_0') = s(bool,X52)) ) | $spl66),
  inference(superposition,[],[f1061,f11567])).
fof(f20180,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,happ(s(fun(X87,bool),X88),s(X87,X90)))) | s(X87,X89) != s(X87,X90) | s(bool,'F_0') = s(bool,happ(s(fun(X87,bool),X88),s(X87,X89)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20179,f128])).
fof(f20179,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X87,bool),X88),s(X87,X90)))) | s(X87,X89) != s(X87,X90) | s(bool,'F_0') = s(bool,happ(s(fun(X87,bool),X88),s(X87,X89)))) ) | $spl66),
  inference(forward_demodulation,[],[f12186,f5815])).
fof(f12186,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun(X87,bool),X88),s(X87,X90)))) | s(X87,X89) != s(X87,X90) | s(bool,'F_0') = s(bool,happ(s(fun(X87,bool),X88),s(X87,X89)))) ) | $spl66),
  inference(superposition,[],[f187,f11567])).
fof(f20178,plain,(
  ( ! [X92,X93,X91] : (s(X91,X93) = s(X91,sK7(X93,X92,X91)) | s(bool,'F_0') = s(bool,happ(s(fun(X91,bool),X92),s(X91,X93)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20177,f128])).
fof(f20177,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'T_0')) | s(X91,X93) = s(X91,sK7(X93,X92,X91)) | s(bool,'F_0') = s(bool,happ(s(fun(X91,bool),X92),s(X91,X93)))) ) | $spl66),
  inference(forward_demodulation,[],[f12187,f5815])).
fof(f12187,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,g(s(bool,'T_0')))) | s(X91,X93) = s(X91,sK7(X93,X92,X91)) | s(bool,'F_0') = s(bool,happ(s(fun(X91,bool),X92),s(X91,X93)))) ) | $spl66),
  inference(superposition,[],[f188,f11567])).
fof(f20176,plain,(
  ( ! [X97,X98] : (s(bool,'F_0') = s(bool,sK7('F_0',X97,bool)) | s(bool,'T_0') = s(bool,X98) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X97),s(bool,X98)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20175,f128])).
fof(f20175,plain,(
  ( ! [X97,X98] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X97,bool)) | s(bool,'T_0') = s(bool,X98) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X97),s(bool,X98)))) ) | $spl66),
  inference(forward_demodulation,[],[f12189,f5815])).
fof(f12189,plain,(
  ( ! [X97,X98] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK7('F_0',X97,bool)) | s(bool,'T_0') = s(bool,X98) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X97),s(bool,X98)))) ) | $spl66),
  inference(superposition,[],[f613,f11567])).
fof(f20174,plain,(
  ( ! [X99,X100] : (s(bool,X100) = s(bool,sK7(X100,X99,bool)) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X99),s(bool,'F_0')))) ) | $spl66),
  inference(subsumption_resolution,[],[f20173,f128])).
fof(f20173,plain,(
  ( ! [X99,X100] : (~p(s(bool,'T_0')) | s(bool,X100) = s(bool,sK7(X100,X99,bool)) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X99),s(bool,'F_0')))) ) | $spl66),
  inference(forward_demodulation,[],[f12190,f5815])).
fof(f12190,plain,(
  ( ! [X99,X100] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,X100) = s(bool,sK7(X100,X99,bool)) | s(bool,'T_0') = s(bool,X100) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X99),s(bool,'F_0')))) ) | $spl66),
  inference(superposition,[],[f618,f11567])).
fof(f12352,plain,(
  ( ! [X123,X122] : (~p(s(bool,happ(s(fun(bool,bool),X123),s(bool,'T_0')))) | s(bool,X122) = s(bool,sK7(X122,X123,bool)) | s(bool,'F_0') = s(bool,X122)) ) | $spl66),
  inference(forward_demodulation,[],[f12205,f5815])).
fof(f12205,plain,(
  ( ! [X123,X122] : (~p(s(bool,happ(s(fun(bool,bool),X123),s(bool,g(s(bool,'T_0')))))) | s(bool,X122) = s(bool,sK7(X122,X123,bool)) | s(bool,'F_0') = s(bool,X122)) ) | $spl66),
  inference(superposition,[],[f188,f11567])).
fof(f12354,plain,(
  ( ! [X134,X136,X135] : (s(bool,'T_0') != s(bool,f(s(X134,sK8(X135,X136,bool,X134)))) | s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,'F_0') = s(bool,g(s(X134,sK8(X135,X136,bool,X134))))) ) | $spl66),
  inference(forward_demodulation,[],[f12210,f5815])).
fof(f12210,plain,(
  ( ! [X134,X136,X135] : (s(bool,g(s(bool,'T_0'))) != s(bool,f(s(X134,sK8(X135,X136,bool,X134)))) | s(fun(X134,bool),X135) = s(fun(X134,bool),X136) | s(bool,'F_0') = s(bool,g(s(X134,sK8(X135,X136,bool,X134))))) ) | $spl66),
  inference(superposition,[],[f196,f11567])).
fof(f12357,plain,(
  ( ! [X140,X139] : (p(s(bool,happ(s(fun(bool,bool),X140),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X140),s(bool,X139)))) | s(bool,'F_0') = s(bool,sK7(X139,X140,bool))) ) | $spl66),
  inference(forward_demodulation,[],[f12213,f5815])).
fof(f12213,plain,(
  ( ! [X140,X139] : (p(s(bool,happ(s(fun(bool,bool),X140),s(bool,g(s(bool,'T_0')))))) | ~p(s(bool,happ(s(fun(bool,bool),X140),s(bool,X139)))) | s(bool,'F_0') = s(bool,sK7(X139,X140,bool))) ) | $spl66),
  inference(superposition,[],[f189,f11567])).
fof(f12358,plain,(
  ( ! [X142,X143,X141] : (s(X143,f(s(bool,'T_0'))) != s(X143,g(s(bool,'T_0'))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,'F_0') = s(bool,sK8(X141,X142,X143,bool))) ) | $spl66),
  inference(forward_demodulation,[],[f12214,f5815])).
fof(f12214,plain,(
  ( ! [X142,X143,X141] : (s(X143,f(s(bool,g(s(bool,'T_0'))))) != s(X143,g(s(bool,g(s(bool,'T_0'))))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,'F_0') = s(bool,sK8(X141,X142,X143,bool))) ) | $spl66),
  inference(superposition,[],[f196,f11567])).
fof(f12382,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X90) != s(bool,X91) | s(bool,'F_0') = s(bool,X90)) ) | $spl66),
  inference(forward_demodulation,[],[f12269,f5815])).
fof(f12269,plain,(
  ( ! [X90,X91] : (s(bool,X90) != s(bool,X91) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X90)) ) | $spl66),
  inference(superposition,[],[f186,f11567])).
fof(f12383,plain,(
  ( ! [X94,X92,X93] : (s(bool,'T_0') != s(bool,X94) | ~p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X92)))) | p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X94)))) | s(bool,'F_0') = s(bool,X92)) ) | $spl66),
  inference(forward_demodulation,[],[f12270,f5815])).
fof(f12270,plain,(
  ( ! [X94,X92,X93] : (~p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X92)))) | p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X94)))) | s(bool,X94) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X92)) ) | $spl66),
  inference(superposition,[],[f187,f11567])).
fof(f12573,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X36),s(bool,sK7(X35,X36,bool)))) | s(bool,'F_0') = s(bool,X35)) ) | $spl66),
  inference(forward_demodulation,[],[f12526,f5815])).
fof(f12526,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,g(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X36),s(bool,sK7(X35,X36,bool)))) | s(bool,'F_0') = s(bool,X35)) ) | $spl66),
  inference(superposition,[],[f716,f11567])).
fof(f20170,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,sK7(X46,X45,X44)))) | s(bool,'F_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,X46)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20169,f128])).
fof(f20169,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,sK7(X46,X45,X44)))) | s(bool,'F_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,X46)))) ) | $spl66),
  inference(forward_demodulation,[],[f12564,f5815])).
fof(f12564,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,g(s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,sK7(X46,X45,X44)))) | s(bool,'F_0') = s(bool,happ(s(fun(X44,bool),X45),s(X44,X46)))) ) | $spl66),
  inference(superposition,[],[f716,f11567])).
fof(f12698,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X33,bool)) | s(bool,'F_0') = s(bool,X32)) ) | $spl66),
  inference(forward_demodulation,[],[f12657,f5815])).
fof(f12657,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,g(s(bool,'T_0')))))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X33,bool)) | s(bool,'F_0') = s(bool,X32)) ) | $spl66),
  inference(superposition,[],[f706,f11567])).
fof(f20168,plain,(
  ( ! [X33,X32] : (p(s(bool,happ(s(fun(bool,bool),X32),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X33,X32,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20167,f128])).
fof(f20167,plain,(
  ( ! [X33,X32] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X33,X32,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) ) | $spl66),
  inference(forward_demodulation,[],[f12689,f5815])).
fof(f12689,plain,(
  ( ! [X33,X32] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X33,X32,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) ) | $spl66),
  inference(superposition,[],[f706,f11567])).
fof(f20165,plain,(
  ( ! [X61,X62,X60,X63] : (s('type.option.option'(X60),'const.option.NONE_0') = s('type.option.option'(X60),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X62),'const.option.NONE_0'),s(fun(X62,'type.option.option'(X60)),X63)),X61,'type.option.option'(X60))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X60),bool),X61),s('type.option.option'(X60),'const.option.NONE_0')))) ) | $spl66),
  inference(subsumption_resolution,[],[f20164,f128])).
fof(f20164,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,'T_0')) | s('type.option.option'(X60),'const.option.NONE_0') = s('type.option.option'(X60),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X62),'const.option.NONE_0'),s(fun(X62,'type.option.option'(X60)),X63)),X61,'type.option.option'(X60))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X60),bool),X61),s('type.option.option'(X60),'const.option.NONE_0')))) ) | $spl66),
  inference(forward_demodulation,[],[f13546,f5815])).
fof(f13546,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,g(s(bool,'T_0')))) | s('type.option.option'(X60),'const.option.NONE_0') = s('type.option.option'(X60),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X62),'const.option.NONE_0'),s(fun(X62,'type.option.option'(X60)),X63)),X61,'type.option.option'(X60))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X60),bool),X61),s('type.option.option'(X60),'const.option.NONE_0')))) ) | $spl66),
  inference(superposition,[],[f628,f11567])).
fof(f20163,plain,(
  ( ! [X47,X48,X49] : (p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X49)))) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20162,f128])).
fof(f20162,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X49)))) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) ) | $spl66),
  inference(forward_demodulation,[],[f13780,f5815])).
fof(f13780,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X49)))) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) ) | $spl66),
  inference(superposition,[],[f734,f11567])).
fof(f20161,plain,(
  ( ! [X47,X48,X49] : (p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) | s(bool,X48) != s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) ) | $spl66),
  inference(subsumption_resolution,[],[f20160,f128])).
fof(f20160,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) | s(bool,X48) != s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) ) | $spl66),
  inference(forward_demodulation,[],[f13993,f5815])).
fof(f13993,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) | s(bool,X48) != s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) ) | $spl66),
  inference(superposition,[],[f739,f11567])).
fof(f14416,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(X72),happ(s(fun(bool,'type.option.option'(X72)),X73),s(bool,'T_0'))) = s('type.option.option'(X72),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X71),s(fun(bool,'type.option.option'(X72)),X73))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X71) | s(bool,'F_0') = s(bool,sK6(X71,bool))) ) | $spl66),
  inference(forward_demodulation,[],[f14384,f5815])).
fof(f14384,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(X72),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X71),s(fun(bool,'type.option.option'(X72)),X73))) = s('type.option.option'(X72),happ(s(fun(bool,'type.option.option'(X72)),X73),s(bool,g(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X71) | s(bool,'F_0') = s(bool,sK6(X71,bool))) ) | $spl66),
  inference(superposition,[],[f796,f11567])).
fof(f20155,plain,(
  ( ! [X47,X48,X49] : (s('type.option.option'(X47),'const.option.SOME_1'(s(X47,sK6(X49,X47)))) = s('type.option.option'(X47),sK7('const.option.SOME_1'(s(X47,sK6(X49,X47))),X48,'type.option.option'(X47))) | s('type.option.option'(X47),'const.option.NONE_0') = s('type.option.option'(X47),X49) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X47),bool),X48),s('type.option.option'(X47),X49)))) ) | $spl66),
  inference(subsumption_resolution,[],[f20154,f128])).
fof(f20154,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s('type.option.option'(X47),'const.option.SOME_1'(s(X47,sK6(X49,X47)))) = s('type.option.option'(X47),sK7('const.option.SOME_1'(s(X47,sK6(X49,X47))),X48,'type.option.option'(X47))) | s('type.option.option'(X47),'const.option.NONE_0') = s('type.option.option'(X47),X49) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X47),bool),X48),s('type.option.option'(X47),X49)))) ) | $spl66),
  inference(forward_demodulation,[],[f15463,f5815])).
fof(f15463,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,g(s(bool,'T_0')))) | s('type.option.option'(X47),'const.option.SOME_1'(s(X47,sK6(X49,X47)))) = s('type.option.option'(X47),sK7('const.option.SOME_1'(s(X47,sK6(X49,X47))),X48,'type.option.option'(X47))) | s('type.option.option'(X47),'const.option.NONE_0') = s('type.option.option'(X47),X49) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X47),bool),X48),s('type.option.option'(X47),X49)))) ) | $spl66),
  inference(superposition,[],[f652,f11567])).
fof(f16025,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),X72) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X73),s('type.option.option'(bool),X72)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X73),s('type.option.option'(bool),X71)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X71) | s(bool,'F_0') = s(bool,sK6(X71,bool))) ) | $spl66),
  inference(forward_demodulation,[],[f16004,f5815])).
fof(f16004,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),X72) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0'))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X73),s('type.option.option'(bool),X72)))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X73),s('type.option.option'(bool),X71)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X71) | s(bool,'F_0') = s(bool,sK6(X71,bool))) ) | $spl66),
  inference(superposition,[],[f731,f11567])).
fof(f20151,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77))) = s('type.option.option'(X73),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X75),'const.option.SOME_1'(s(X75,X77))),s(fun(X75,'type.option.option'(X73)),X76)),X74,'type.option.option'(X73))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X73),bool),X74),s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77)))))) ) | $spl66),
  inference(subsumption_resolution,[],[f20150,f128])).
fof(f20150,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,'T_0')) | s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77))) = s('type.option.option'(X73),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X75),'const.option.SOME_1'(s(X75,X77))),s(fun(X75,'type.option.option'(X73)),X76)),X74,'type.option.option'(X73))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X73),bool),X74),s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77)))))) ) | $spl66),
  inference(forward_demodulation,[],[f16269,f5815])).
fof(f16269,plain,(
  ( ! [X76,X74,X77,X75,X73] : (~p(s(bool,g(s(bool,'T_0')))) | s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77))) = s('type.option.option'(X73),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X75),'const.option.SOME_1'(s(X75,X77))),s(fun(X75,'type.option.option'(X73)),X76)),X74,'type.option.option'(X73))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X73),bool),X74),s('type.option.option'(X73),happ(s(fun(X75,'type.option.option'(X73)),X76),s(X75,X77)))))) ) | $spl66),
  inference(superposition,[],[f819,f11567])).
fof(f16282,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,'T_0'))) = s('type.option.option'(X97),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X97)),X99)),X98,'type.option.option'(X97))) | ~p(s(bool,happ(s(fun('type.option.option'(X97),bool),X98),s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,X96)))))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f16225,f8336])).
fof(f16225,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,happ(s(fun('type.option.option'(X97),bool),X98),s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,X96)))))) | s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,f(s(bool,'T_0'))))) = s('type.option.option'(X97),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,'T_0'))))),s(fun(bool,'type.option.option'(X97)),X99)),X98,'type.option.option'(X97))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f819,f11565])).
fof(f15678,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.option.option'(X97),X98) = s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,'T_0'))) | s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),X98))) != s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,X96))))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f15677,f195])).
fof(f15677,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.option.option'(X97),X98) = s('type.option.option'(X97),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X97)),X99))) | s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),X98))) != s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,X96))))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f15630,f8336])).
fof(f15630,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),X98))) != s('type.option.option'('type.option.option'(X97)),'const.option.SOME_1'(s('type.option.option'(X97),happ(s(fun(bool,'type.option.option'(X97)),X99),s(bool,X96))))) | s('type.option.option'(X97),X98) = s('type.option.option'(X97),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,'T_0'))))),s(fun(bool,'type.option.option'(X97)),X99))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f799,f11565])).
fof(f12701,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,X55)))) | p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(g(s(bool,'T_0')),X56,bool))) ) | $spl66),
  inference(subsumption_resolution,[],[f12668,f187])).
fof(f12668,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,X55)))) | p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(g(s(bool,'T_0')),X56,bool)) | s(bool,'F_0') = s(bool,X55)) ) | $spl66),
  inference(superposition,[],[f706,f11567])).
fof(f12700,plain,(
  ( ! [X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X45)))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(f(s(bool,'T_0')),X46,bool))) ) | ($spl64 | $spl66)),
  inference(subsumption_resolution,[],[f12662,f187])).
fof(f12662,plain,(
  ( ! [X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X45)))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(f(s(bool,'T_0')),X46,bool)) | s(bool,'F_0') = s(bool,X45)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f706,f11565])).
fof(f12538,plain,(
  ( ! [X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X60),s(bool,sK7(g(s(bool,'T_0')),X60,bool))))) ) | $spl66),
  inference(superposition,[],[f716,f5815])).
fof(f12537,plain,(
  ( ! [X59,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X58)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X59),s(bool,sK7(g(s(bool,'T_0')),X59,bool)))) | s(bool,'F_0') = s(bool,X58)) ) | $spl66),
  inference(superposition,[],[f716,f11567])).
fof(f12532,plain,(
  ( ! [X50] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X50),s(bool,sK7(f(s(bool,'T_0')),X50,bool))))) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f716,f8336])).
fof(f12531,plain,(
  ( ! [X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X48)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,sK7(f(s(bool,'T_0')),X49,bool)))) | s(bool,'F_0') = s(bool,X48)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f716,f11565])).
fof(f12384,plain,(
  ( ! [X95,X96] : (s(bool,'T_0') = s(bool,sK7(g(s(bool,'T_0')),X96,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X95)))) | s(bool,'F_0') = s(bool,X95)) ) | $spl66),
  inference(forward_demodulation,[],[f12271,f5815])).
fof(f12271,plain,(
  ( ! [X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X95)))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X96,bool)) | s(bool,'F_0') = s(bool,X95)) ) | $spl66),
  inference(superposition,[],[f188,f11567])).
fof(f12101,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,g(s(bool,X3))) | s(bool,'F_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl66),
  inference(superposition,[],[f11567,f220])).
fof(f12100,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl66),
  inference(superposition,[],[f11567,f958])).
fof(f11880,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') = s(bool,sK7(f(s(bool,'T_0')),X97,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X97),s(bool,X96)))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f11768,f8336])).
fof(f11768,plain,(
  ( ! [X97,X96] : (~p(s(bool,happ(s(fun(bool,bool),X97),s(bool,X96)))) | s(bool,f(s(bool,'T_0'))) = s(bool,sK7(f(s(bool,'T_0')),X97,bool)) | s(bool,'F_0') = s(bool,X96)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f188,f11565])).
fof(f11597,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,f(s(bool,X3))) | s(bool,'F_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f11565,f220])).
fof(f11596,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f11565,f958])).
fof(f11567,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X49)) ) | $spl66),
  inference(subsumption_resolution,[],[f11543,f128])).
fof(f11543,plain,(
  ( ! [X49] : (~p(s(bool,'T_0')) | s(bool,X49) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X49)) ) | $spl66),
  inference(superposition,[],[f1061,f5815])).
fof(f11565,plain,(
  ( ! [X41] : (s(bool,X41) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X41)) ) | ($spl64 | $spl66)),
  inference(subsumption_resolution,[],[f11538,f128])).
fof(f11538,plain,(
  ( ! [X41] : (~p(s(bool,'T_0')) | s(bool,X41) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X41)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f1061,f8336])).
fof(f10996,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl66),
  inference(superposition,[],[f8985,f220])).
fof(f10995,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl66),
  inference(superposition,[],[f8985,f958])).
fof(f8985,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl66),
  inference(subsumption_resolution,[],[f8491,f128])).
fof(f8491,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl66),
  inference(superposition,[],[f222,f5815])).
fof(f8430,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,sK7(f(s(bool,'T_0')),X20,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'T_0'))))) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f8385,f8336])).
fof(f8385,plain,(
  ( ! [X20] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'T_0')))) | s(bool,f(s(bool,'T_0'))) = s(bool,sK7(f(s(bool,'T_0')),X20,bool))) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f188,f8336])).
fof(f8984,plain,(
  ( ! [X8,X7] : (s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl66),
  inference(subsumption_resolution,[],[f8493,f128])).
fof(f8493,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s(bool,X7) = s(bool,g(s(bool,'T_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl66),
  inference(superposition,[],[f511,f5815])).
fof(f8974,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,sK7(g(s(bool,'T_0')),X20,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'T_0'))))) ) | $spl66),
  inference(forward_demodulation,[],[f8506,f5815])).
fof(f8506,plain,(
  ( ! [X20] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'T_0')))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X20,bool))) ) | $spl66),
  inference(superposition,[],[f188,f5815])).
fof(f8467,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,g(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl66),
  inference(superposition,[],[f5815,f220])).
fof(f8466,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl66),
  inference(superposition,[],[f5815,f958])).
fof(f8416,plain,(
  ( ! [X8,X7] : (s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | ($spl64 | $spl66)),
  inference(subsumption_resolution,[],[f8372,f128])).
fof(f8372,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s(bool,X7) = s(bool,f(s(bool,'T_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f511,f8336])).
fof(f8346,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,f(s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f8336,f220])).
fof(f8345,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f8336,f958])).
fof(f8338,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,sK7(g(s(bool,'T_0')),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))))) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f8337,f8336])).
fof(f8337,plain,(
  ( ! [X23] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,f(s(bool,'T_0'))) = s(bool,sK7(g(s(bool,'T_0')),X23,bool))) ) | ($spl64 | $spl66)),
  inference(backward_demodulation,[],[f8336,f8334])).
fof(f8336,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl64 | $spl66)),
  inference(backward_demodulation,[],[f5815,f5772])).
fof(f20878,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90 | $spl118)),
  inference(global_subsumption,[],[f20877,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814,f20281,f20847,f20860])).
fof(f20860,plain,(
  ( ! [X70] : (s(bool,'F_0') = s(bool,X70)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20859,f20313])).
fof(f20859,plain,(
  ( ! [X70] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X70)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(forward_demodulation,[],[f11777,f20313])).
fof(f11777,plain,(
  ( ! [X70] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X70)) ) | ($spl64 | $spl66 | $spl90)),
  inference(duplicate_literal_removal,[],[f11662])).
fof(f11662,plain,(
  ( ! [X70] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl64 | $spl66 | $spl90)),
  inference(superposition,[],[f10003,f11565])).
fof(f20847,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'T_0'))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(forward_demodulation,[],[f20846,f20313])).
fof(f20846,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(forward_demodulation,[],[f20845,f20230])).
fof(f20845,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20844,f128])).
fof(f20844,plain,(
  ( ! [X167,X165,X166,X168] : (~p(s(bool,'T_0')) | s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(forward_demodulation,[],[f20295,f20313])).
fof(f20295,plain,(
  ( ! [X167,X165,X166,X168] : (s('type.option.option'(bool),X165) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ~p(s(bool,happ(s(fun('type.option.option'(X166),bool),X167),s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,'T_0')))))) | s('type.option.option'(X166),happ(s(fun(bool,'type.option.option'(X166)),X168),s(bool,sK6(X165,bool)))) = s('type.option.option'(X166),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X165,bool)))),s(fun(bool,'type.option.option'(X166)),X168)),X167,'type.option.option'(X166))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X165)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20230,f16243])).
fof(f20281,plain,(
  ( ! [X23,X21,X22] : (s('type.option.option'(bool),X21) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(X22),happ(s(fun(bool,'type.option.option'(X22)),X23),s(bool,'T_0'))) = s('type.option.option'(X22),'const.option.OPTION_BIND_2'(s('type.option.option'(bool),X21),s(fun(bool,'type.option.option'(X22)),X23))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X21)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20230,f14405])).
fof(f20814,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20638,f128])).
fof(f20638,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f628])).
fof(f20812,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20636,f128])).
fof(f20636,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5610])).
fof(f20807,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20630,f128])).
fof(f20630,plain,(
  ( ! [X198,X204,X202,X200,X199,X203,X201] : (~p(s(bool,'T_0')) | s('type.option.option'(X202),happ(s(fun('type.option.option'(X198),'type.option.option'(X202)),X204),s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))) = s('type.option.option'(X202),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X198)),'const.option.SOME_1'(s('type.option.option'(X198),happ(s(fun(X199,'type.option.option'(X198)),X200),s(X199,sK6(X201,X199)))))),s(fun('type.option.option'(X198),'type.option.option'(X202)),X204)),X203,'type.option.option'(X202))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f16250])).
fof(f20805,plain,(
  ( ! [X196,X194,X197,X195,X193] : (s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20629,f128])).
fof(f20629,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,'T_0')) | s('type.option.option'(X195),happ(s(fun('type.option.option'(X193),'type.option.option'(X195)),X197),s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))) = s('type.option.option'(X195),sK7('const.option.OPTION_BIND_2'(s('type.option.option'('type.option.option'(X193)),'const.option.SOME_1'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,sK6(X194,X193)))))),s(fun('type.option.option'(X193),'type.option.option'(X195)),X197)),X196,'type.option.option'(X195))) | s('type.option.option'(X193),'const.option.NONE_0') = s('type.option.option'(X193),X194)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f16249])).
fof(f20803,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20625,f128])).
fof(f20625,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),happ(s(fun(X2,'type.option.option'(X0)),X3),s(X2,X4))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X4))),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f16202])).
fof(f20801,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20624,f128])).
fof(f20624,plain,(
  ( ! [X6,X10,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X8))) | s('type.option.option'(X6),'const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6)))) = s('type.option.option'(X6),sK7('const.option.SOME_1'(s(X6,sK6('const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(fun(X7,'type.option.option'(X6)),X9)),X6))),X10,'type.option.option'(X6)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f15465])).
fof(f20799,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20622,f128])).
fof(f20622,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f819])).
fof(f20790,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20581,f128])).
fof(f20581,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s('type.option.option'(X48),happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49)))) = s('type.option.option'(X48),sK7(happ(s(fun(X49,'type.option.option'(X48)),X50),s(X49,sK6(X51,X49))),X52,'type.option.option'(X48))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f14399])).
fof(f20788,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20579,f128])).
fof(f20579,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,'T_0')) | s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17)))) = s('type.option.option'(X17),sK7('const.option.SOME_1'(s(X17,sK6(happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18))),X17))),X21,'type.option.option'(X17))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),happ(s(fun(X18,'type.option.option'(X17)),X19),s(X18,sK6(X20,X18)))) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),X20)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f15448])).
fof(f20786,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20578,f128])).
fof(f20578,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X2),s(X1,sK6(X3,X1)))) = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,sK6(X3,X1)))),s(fun(X1,'type.option.option'(X0)),X2)),X4,'type.option.option'(X0))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f16254])).
fof(f20778,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20564,f128])).
fof(f20564,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.option.option'(X22),'const.option.NONE_0') = s('type.option.option'(X22),X23) | s('type.option.option'(X22),'const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22)))) = s('type.option.option'(X22),sK7('const.option.SOME_1'(s(X22,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X22),X23)),'type.option.option'(X22)),X22))),X24,'type.option.option'(X22)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f15471])).
fof(f20776,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20563,f128])).
fof(f20563,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X0)))) = s('type.option.option'(X0),sK7('const.option.SOME_1'(s(X0,sK6(X2,X0))),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f15441])).
fof(f20772,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20559,f128])).
fof(f20559,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f652])).
fof(f20768,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20553,f128])).
fof(f20553,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f1001])).
fof(f20766,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20552,f128])).
fof(f20552,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f987])).
fof(f20762,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20548,f128])).
fof(f20548,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f188])).
fof(f20731,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(duplicate_literal_removal,[],[f20391])).
fof(f20391,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f4783])).
fof(f20749,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20390,f20230])).
fof(f20390,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f4772])).
fof(f20746,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20375,f20313])).
fof(f20375,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') != s(bool,X56)) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f3028])).
fof(f20743,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20368,f20230])).
fof(f20368,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f2898])).
fof(f20733,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20314,f20313])).
fof(f20314,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f141])).
fof(f20877,plain,(
  ( ! [X97] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1)))) ) | ($spl54 | $spl64 | $spl66 | $spl90 | $spl118)),
  inference(subsumption_resolution,[],[f20025,f20313])).
fof(f20873,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90 | $spl122)),
  inference(global_subsumption,[],[f20872,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814,f20281,f20847,f20860])).
fof(f20872,plain,(
  ( ! [X126] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1)))) ) | ($spl54 | $spl64 | $spl66 | $spl90 | $spl122)),
  inference(subsumption_resolution,[],[f20032,f20313])).
fof(f20868,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f11116,f20313])).
fof(f11116,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl90),
  inference(unit_resulting_resolution,[],[f208,f10003])).
fof(f20861,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814,f20281,f20847,f20860])).
fof(f20848,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814,f20281,f20847])).
fof(f20841,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814,f20281])).
fof(f20828,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20672,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20672,plain,(
  ( ! [X206,X204,X207,X205] : (s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207)))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20666])).
fof(f20666,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),X206))) != s('type.option.option'('type.option.option'(X205)),'const.option.SOME_1'(s('type.option.option'(X205),happ(s(fun(sK1,'type.option.option'(X205)),X207),s(sK1,sK2))))) | s('type.option.option'(X205),X206) = s('type.option.option'(X205),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X204,sK1)))),s(fun(sK1,'type.option.option'(X205)),X207)))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f15656])).
fof(f20827,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20674,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20674,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20664])).
fof(f20664,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5605])).
fof(f20826,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20825,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20825,plain,(
  ( ! [X17,X16] : (s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20824,f128])).
fof(f20824,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(forward_demodulation,[],[f20675,f20313])).
fof(f20675,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20663])).
fof(f20663,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5602])).
fof(f20823,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20676,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20676,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20662])).
fof(f20662,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5599])).
fof(f20822,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20677,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20677,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20661])).
fof(f20661,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5597])).
fof(f20821,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20678,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20678,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20659])).
fof(f20659,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5502])).
fof(f20819,plain,(
  $false | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20818,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20818,plain,(
  ( ! [X0] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20641,f128])).
fof(f20641,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5114])).
fof(f20817,plain,(
  $false | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20816,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20816,plain,(
  ( ! [X6] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20639,f128])).
fof(f20639,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f5048])).
fof(f20815,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812,f20814])).
fof(f20813,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807,f20812])).
fof(f20811,plain,(
  $false | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20810,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807])).
fof(f20810,plain,(
  ( ! [X210,X208,X211,X209] : (s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209)))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20809,f20313])).
fof(f20809,plain,(
  ( ! [X210,X208,X211,X209] : (s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X208),s(sK1,sK2)))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20631,f128])).
fof(f20631,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,'T_0')) | s('type.option.option'(X209),happ(s(fun(sK1,'type.option.option'(X209)),X211),s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))) = s('type.option.option'(X209),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X208,sK1)))),s(fun(sK1,'type.option.option'(X209)),X211)),X210,'type.option.option'(X209))) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X208),s(sK1,sK2)))) ) | ($spl38 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f16252])).
fof(f20808,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805,f20807])).
fof(f20806,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803,f20805])).
fof(f20804,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801,f20803])).
fof(f20802,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799,f20801])).
fof(f20800,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790,f20799])).
fof(f20795,plain,(
  $false | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20794,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790])).
fof(f20794,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20583,f128])).
fof(f20583,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f1100])).
fof(f20793,plain,(
  $false | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f20792,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790])).
fof(f20792,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20582,f128])).
fof(f20582,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f868])).
fof(f20791,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788,f20790])).
fof(f20789,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786,f20788])).
fof(f20787,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778,f20786])).
fof(f20779,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776,f20778])).
fof(f20777,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772,f20776])).
fof(f20773,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768,f20772])).
fof(f20769,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766,f20768])).
fof(f20767,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762,f20766])).
fof(f20763,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731,f20762])).
fof(f20761,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90 | $spl98)),
  inference(global_subsumption,[],[f20760,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731])).
fof(f20760,plain,(
  ( ! [X502] : (s(bool,'F_0') = s(bool,X502)) ) | ($spl54 | $spl64 | $spl66 | $spl90 | $spl98)),
  inference(subsumption_resolution,[],[f20471,f20313])).
fof(f20471,plain,(
  ( ! [X502] : (s(bool,'T_0') != s(bool,f(s(bool,X502))) | s(bool,'F_0') = s(bool,X502)) ) | ($spl54 | $spl64 | $spl66 | $spl90 | $spl98)),
  inference(backward_demodulation,[],[f20313,f18342])).
fof(f20758,plain,(
  $false | ($spl15 | $spl22 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20435,f20313])).
fof(f20435,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl22 | $spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f7715])).
fof(f20751,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749,f20731])).
fof(f20750,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746,f20749])).
fof(f20747,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743,f20746])).
fof(f20744,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733,f20743])).
fof(f20735,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(subsumption_resolution,[],[f20316,f128])).
fof(f20316,plain,(
  ~p(s(bool,'T_0')) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f207])).
fof(f20734,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5573,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f5772,f7724,f7725,f8264,f8265,f8266,f8267,f8268,f8272,f8280,f8281,f8282,f8283,f8293,f8294,f8334,f5815,f8336,f8338,f8345,f8346,f8416,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f8430,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f3575,f3421,f3346,f1359,f881,f879,f8255,f8254,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10003,f10995,f10996,f11141,f11172,f11565,f11567,f11596,f11597,f11880,f12100,f12101,f12384,f12531,f12532,f12537,f12538,f12700,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15678,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16282,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f20151,f16292,f16025,f15691,f20155,f20156,f14644,f20158,f14639,f14638,f14636,f14416,f20161,f20163,f20165,f12922,f20166,f12915,f20168,f12698,f20170,f12573,f12383,f12382,f12358,f12357,f12354,f12352,f20174,f20176,f20178,f20180,f20182,f14643,f12937,f20188,f12920,f12919,f12918,f20191,f12337,f20193,f20196,f20198,f20230,f20312,f20313,f20733])).
fof(f20732,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20317])).
fof(f20317,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20313,f525])).
fof(f20311,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20231])).
fof(f20231,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20230,f597])).
fof(f20310,plain,(
  $false | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(trivial_inequality_removal,[],[f20233])).
fof(f20233,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl54 | $spl64 | $spl66 | $spl90)),
  inference(backward_demodulation,[],[f20230,f1254])).
fof(f20194,plain,(
  ( ! [X72] : (s(bool,'F_0') = s(bool,sK6(X72,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | $spl172),
  inference(cnf_transformation,[],[f20194_D])).
fof(f20194_D,plain,(
  ( ! [X72] : (s(bool,'F_0') = s(bool,sK6(X72,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f5572,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(cnf_transformation,[],[f5572_D])).
fof(f5572_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f20193,plain,(
  ( ! [X72] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6(X72,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | $spl90),
  inference(subsumption_resolution,[],[f12011,f648])).
fof(f12011,plain,(
  ( ! [X72] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6(X72,bool)) | s('type.option.option'(bool),X72) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | $spl90),
  inference(superposition,[],[f10003,f647])).
fof(f20184,plain,(
  ( ! [X102] : (s(bool,'F_0') = s(bool,X102)) ) | $spl166),
  inference(cnf_transformation,[],[f20184_D])).
fof(f20184_D,plain,(
  ( ! [X102] : (s(bool,'F_0') = s(bool,X102)) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f12337,plain,(
  ( ! [X70] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X70)) ) | ($spl66 | $spl90)),
  inference(forward_demodulation,[],[f12281,f5815])).
fof(f12281,plain,(
  ( ! [X70] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X70)) ) | ($spl66 | $spl90)),
  inference(duplicate_literal_removal,[],[f12167])).
fof(f12167,plain,(
  ( ! [X70] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl66 | $spl90)),
  inference(superposition,[],[f10003,f11567])).
fof(f20192,plain,(
  ( ! [X75] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X75)) ) | ($spl20 | $spl90)),
  inference(subsumption_resolution,[],[f12818,f4342])).
fof(f12818,plain,(
  ( ! [X75] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X75)),bool)) | s(bool,'F_0') = s(bool,X75)) ) | $spl90),
  inference(superposition,[],[f10003,f960])).
fof(f20187,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl170),
  inference(cnf_transformation,[],[f20187_D])).
fof(f20187_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f5567,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl46),
  inference(cnf_transformation,[],[f5567_D])).
fof(f5567_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f20188,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,sK8(X35,X36,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | ($spl64 | $spl66)),
  inference(forward_demodulation,[],[f12925,f8336])).
fof(f12925,plain,(
  ( ! [X35,X36] : (s(bool,f(s(bool,'T_0'))) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,sK8(X35,X36,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | ($spl64 | $spl66)),
  inference(superposition,[],[f878,f11565])).
fof(f12937,plain,(
  ( ! [X37,X38] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,sK8(X37,X38,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl66),
  inference(forward_demodulation,[],[f12926,f5815])).
fof(f12926,plain,(
  ( ! [X37,X38] : (s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,sK8(X37,X38,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl66),
  inference(superposition,[],[f878,f11567])).
fof(f20185,plain,(
  ( ! [X21,X20] : (s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X20,X21,bool,bool))),bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X20,X21,bool,bool))))) ) | $spl168),
  inference(cnf_transformation,[],[f20185_D])).
fof(f20185_D,plain,(
  ( ! [X21,X20] : (s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X20,X21,bool,bool))),bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X20,X21,bool,bool))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f20159,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) | $spl164),
  inference(cnf_transformation,[],[f20159_D])).
fof(f20159_D,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f14643,plain,(
  ( ! [X21,X22,X20] : (s(bool,'F_0') != s(bool,f(s(bool,X22))) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X20,X21,bool,bool)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X20,X21,bool,bool))),bool)) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f883,f958])).
fof(f20183,plain,(
  ( ! [X102] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X102)) ) | ($spl90 | $spl98)),
  inference(subsumption_resolution,[],[f18911,f18342])).
fof(f18911,plain,(
  ( ! [X102] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,f(s(bool,X102))) | s(bool,'F_0') = s(bool,X102)) ) | ($spl90 | $spl98)),
  inference(superposition,[],[f10003,f18712])).
fof(f5566,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl44),
  inference(cnf_transformation,[],[f5566_D])).
fof(f5566_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f5569,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl49),
  inference(cnf_transformation,[],[f5569_D])).
fof(f5569_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f12915,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK8(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f878,f135])).
fof(f20136,plain,(
  ( ! [X469,X470] : (s(fun(bool,bool),X469) = s(fun(bool,bool),X470) | s(bool,'T_0') = s(bool,sK8(X469,X470,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X469,X470,bool,bool))))) ) | $spl158),
  inference(cnf_transformation,[],[f20136_D])).
fof(f20136_D,plain,(
  ( ! [X469,X470] : (s(fun(bool,bool),X469) = s(fun(bool,bool),X470) | s(bool,'T_0') = s(bool,sK8(X469,X470,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X469,X470,bool,bool))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f14636,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X0,X1,bool,bool)))) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool))) )),
  inference(superposition,[],[f883,f135])).
fof(f14638,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,f(s(bool,X7))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK8(X5,X6,bool,bool))) )),
  inference(superposition,[],[f883,f220])).
fof(f14639,plain,(
  ( ! [X10,X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X8,X9,bool,bool)))) | s(bool,'T_0') = s(bool,sK8(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f883,f220])).
fof(f20158,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,sK8(X14,X15,bool,bool))) )),
  inference(forward_demodulation,[],[f14641,f894])).
fof(f14641,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,sK6('const.option.SOME_1'(s(bool,X16)),bool)))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,sK8(X14,X15,bool,bool))) )),
  inference(superposition,[],[f883,f956])).
fof(f20157,plain,(
  ( ! [X25] : (s(bool,'F_0') != s(bool,f(s(bool,X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool))) ) | $spl162),
  inference(cnf_transformation,[],[f20157_D])).
fof(f20157_D,plain,(
  ( ! [X25] : (s(bool,'F_0') != s(bool,f(s(bool,X25))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f14644,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(bool,X25))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X23,X24,bool,bool)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool)) | s(bool,'T_0') = s(bool,sK8(X23,X24,bool,bool))) )),
  inference(superposition,[],[f883,f958])).
fof(f20156,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X26,X27,bool,bool)))) | s(bool,'T_0') = s(bool,sK8(X26,X27,bool,bool))) )),
  inference(forward_demodulation,[],[f14645,f894])).
fof(f14645,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') != s(bool,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X26,X27,bool,bool)))) | s(bool,'T_0') = s(bool,sK8(X26,X27,bool,bool))) )),
  inference(superposition,[],[f883,f1437])).
fof(f20128,plain,(
  ( ! [X216] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X216),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X216,'type.option.option'(sK1)))) ) | $spl156),
  inference(cnf_transformation,[],[f20128_D])).
fof(f20128_D,plain,(
  ( ! [X216] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X216),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X216,'type.option.option'(sK1)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f19997,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19589])).
fof(f19589,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1106,f135])).
fof(f19999,plain,(
  ( ! [X30,X29] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X30),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X30,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(forward_demodulation,[],[f19987,f894])).
fof(f19987,plain,(
  ( ! [X30,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X30),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X30,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19599])).
fof(f19599,plain,(
  ( ! [X30,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X30),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X30,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f1106,f1437])).
fof(f20140,plain,(
  ( ! [X99,X100] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X100),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X100,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X99)) ) | $spl0),
  inference(subsumption_resolution,[],[f19618,f7725])).
fof(f19618,plain,(
  ( ! [X99,X100] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X100),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X100,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X99)),bool)) | s(bool,'T_0') = s(bool,X99)) ) | $spl0),
  inference(superposition,[],[f1106,f1445])).
fof(f20139,plain,(
  ( ! [X50,X51] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X50,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X51) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X50),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | ($spl0 | $spl64 | $spl66 | $spl74)),
  inference(subsumption_resolution,[],[f19643,f5821])).
fof(f19643,plain,(
  ( ! [X50,X51] : (s(bool,X51) = s(bool,f(s(bool,'T_0'))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X50,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X51) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X50),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | ($spl0 | $spl64 | $spl66)),
  inference(superposition,[],[f1106,f11565])).
fof(f20138,plain,(
  ( ! [X52,X53] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X52,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X53) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X52),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | ($spl0 | $spl66)),
  inference(subsumption_resolution,[],[f19644,f8985])).
fof(f19644,plain,(
  ( ! [X52,X53] : (s(bool,X53) = s(bool,g(s(bool,'T_0'))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X52,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X53) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X52),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))) ) | ($spl0 | $spl66)),
  inference(superposition,[],[f1106,f11567])).
fof(f19977,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19672])).
fof(f19672,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X0) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f135,f1106])).
fof(f20022,plain,(
  ( ! [X92,X93] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X93),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X92) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X93,'type.option.option'(sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f19958,f894])).
fof(f19958,plain,(
  ( ! [X92,X93] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X93),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X92) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X93,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19704])).
fof(f19704,plain,(
  ( ! [X92,X93] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X93),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X92) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X93,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X92)) ) | $spl0),
  inference(superposition,[],[f1437,f1106])).
fof(f20079,plain,(
  ( ! [X382,X381] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X382),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X381) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X382,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19795,f7725])).
fof(f19795,plain,(
  ( ! [X382,X381] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X382),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X381) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X382,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X381)),bool))) ) | $spl0),
  inference(superposition,[],[f1445,f1106])).
fof(f20137,plain,(
  ( ! [X471] : (s(bool,'F_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X471),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X471,'type.option.option'(sK1)))) ) | $spl160),
  inference(cnf_transformation,[],[f20137_D])).
fof(f20137_D,plain,(
  ( ! [X471] : (s(bool,'F_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X471),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X471,'type.option.option'(sK1)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f19820,plain,(
  ( ! [X469,X471,X470] : (s(bool,'F_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X471),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(fun(bool,bool),X469) = s(fun(bool,bool),X470) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X469,X470,bool,bool)))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X471,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK8(X469,X470,bool,bool))) ) | $spl0),
  inference(superposition,[],[f883,f1106])).
fof(f20083,plain,(
  ( ! [X21,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X21),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X21,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19831,f137])).
fof(f19831,plain,(
  ( ! [X21,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X21),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X21,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f142,f1106])).
fof(f20135,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f20134])).
fof(f20134,plain,(
  ( ! [X59,X57,X58] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X57),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X57,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl0),
  inference(subsumption_resolution,[],[f19843,f1489])).
fof(f19843,plain,(
  ( ! [X59,X57,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X57),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X57,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f529,f1106])).
fof(f20097,plain,(
  ( ! [X101,X100] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X100),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X100,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X101)) ) | $spl0),
  inference(subsumption_resolution,[],[f19857,f7725])).
fof(f19857,plain,(
  ( ! [X101,X100] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X101)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X100),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X100,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X101)) ) | $spl0),
  inference(superposition,[],[f960,f1106])).
fof(f20099,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f20098])).
fof(f20098,plain,(
  ( ! [X116,X117,X115] : (s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X115),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X115,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X116)) ) | $spl0),
  inference(subsumption_resolution,[],[f19864,f220])).
fof(f19864,plain,(
  ( ! [X116,X117,X115] : (s(bool,X116) != s(bool,X117) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X115),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X115,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f4325,f1106])).
fof(f20133,plain,(
  ( ! [X121,X122] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl0 | $spl20)),
  inference(subsumption_resolution,[],[f19866,f1445])).
fof(f19866,plain,(
  ( ! [X121,X122] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X122)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X121),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X121,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl0 | $spl20)),
  inference(superposition,[],[f4342,f1106])).
fof(f20132,plain,(
  ( ! [X123,X124] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X123),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X123,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X124)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f19867,f1437])).
fof(f19867,plain,(
  ( ! [X123,X124] : (s(bool,X124) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X123),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X123,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X124)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4560,f1106])).
fof(f20131,plain,(
  ( ! [X154,X153] : (s(bool,'T_0') = s(bool,X154) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X153),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X153,'type.option.option'(sK1)))) ) | ($spl0 | $spl66 | $spl90)),
  inference(global_subsumption,[],[f19881,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f5815,f8466,f8467,f8974,f8984,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f8985,f10995,f10996,f11567,f12100,f12101,f12384,f12537,f12538,f12701,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20036,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f20129])).
fof(f20130,plain,(
  ( ! [X196,X197] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X197)) ) | ($spl0 | $spl64 | $spl66 | $spl74)),
  inference(subsumption_resolution,[],[f19899,f5821])).
fof(f19899,plain,(
  ( ! [X196,X197] : (s(bool,X197) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X197)) ) | ($spl0 | $spl64 | $spl66)),
  inference(superposition,[],[f11565,f1106])).
fof(f20129,plain,(
  ( ! [X198,X199] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X198),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X198,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X199)) ) | ($spl0 | $spl66)),
  inference(subsumption_resolution,[],[f19900,f8985])).
fof(f19900,plain,(
  ( ! [X198,X199] : (s(bool,X199) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X198),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X198,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X199)) ) | ($spl0 | $spl66)),
  inference(superposition,[],[f11567,f1106])).
fof(f20127,plain,(
  ( ! [X217] : (s(bool,'F_0') != s(bool,f(s(bool,X217)))) ) | $spl154),
  inference(cnf_transformation,[],[f20127_D])).
fof(f20127_D,plain,(
  ( ! [X217] : (s(bool,'F_0') != s(bool,f(s(bool,X217)))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f20126,plain,(
  ( ! [X216,X217] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(sK1),bool),X216),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X216,'type.option.option'(sK1))) | s(bool,'F_0') != s(bool,f(s(bool,X217)))) ) | ($spl0 | $spl98)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f200,f823,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5016,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5025,f5026,f5027,f5476,f5478,f5466,f5457,f5448,f5447,f5446,f5439,f5496,f5497,f5436,f5504,f5433,f5515,f5516,f5524,f5528,f5535,f5536,f5541,f5424,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5980,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f629,f3936,f7724,f7725,f3350,f1451,f4997,f4993,f4693,f3347,f5110,f5108,f1001,f987,f752,f188,f187,f5051,f5097,f1012,f716,f189,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5422,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f868,f1100,f1106,f3937,f5083,f5530,f5518,f5471,f5421,f5418,f5417,f5415,f5413,f5356,f5355,f5353,f5350,f5349,f5346,f5345,f5343,f5341,f5269,f5268,f5265,f5264,f5262,f5260,f5219,f5217,f5147,f5145,f5144,f5128,f5126,f5114,f5085,f5048,f5352,f3575,f3421,f3346,f1359,f881,f879,f6001,f5385,f5293,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f13997,f14407,f14408,f14405,f14372,f14373,f14377,f14385,f14387,f14418,f14419,f14392,f14394,f14396,f14398,f14399,f14402,f14403,f14650,f14667,f14688,f14970,f14956,f14976,f14958,f14962,f14963,f14964,f14966,f15135,f15121,f15141,f15123,f15124,f15126,f15128,f15129,f15130,f15131,f15441,f15465,f15448,f15471,f15472,f15474,f15600,f15602,f15605,f15606,f15610,f15611,f15612,f15616,f15673,f15674,f15676,f15647,f15648,f15652,f15653,f15654,f15658,f15659,f15977,f15981,f15982,f16015,f16016,f16011,f15992,f15993,f16005,f16009,f16202,f16205,f16206,f16207,f16281,f16222,f16243,f16244,f16248,f16249,f16250,f16254,f16255,f16300,f16302,f18342,f18682,f18712,f18757,f18816,f18998,f18999,f19000,f18880,f18941,f18943,f18945,f18946,f18949,f18950,f18951,f18952,f19037,f19038,f19040,f19992,f19988,f19624,f19649,f19650,f19651,f19652,f19653,f19654,f19655,f19656,f19659,f19661,f19663,f19664,f19667,f19668,f19669,f19670,f19968,f19967,f19966,f19694,f19965,f19964,f19957,f20024,f20026,f20028,f19955,f19950,f20081,f19800,f19802,f19804,f19805,f19808,f19809,f19810,f19811,f19813,f19814,f19815,f19816,f19818,f19819,f20082,f20085,f20091,f20094,f19849,f20101,f19913,f19915,f19917,f19918,f19921,f19922,f19923,f19924,f19926,f19909])).
fof(f20124,plain,(
  ( ! [X202] : (s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X202,'type.option.option'(sK1)))) ) | $spl152),
  inference(cnf_transformation,[],[f20124_D])).
fof(f20124_D,plain,(
  ( ! [X202] : (s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X202,'type.option.option'(sK1)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f20123,plain,(
  ( ! [X202,X203] : (p(s(bool,X203)) | s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X202,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19902,f137])).
fof(f19902,plain,(
  ( ! [X202,X203] : (p(s(bool,X203)) | s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X202),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X202,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X203)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f12624,f1106])).
fof(f12624,plain,(
  ( ! [X31] : (p(s(bool,X31)) | s(bool,f(s(bool,X31))) = s(bool,f(s(bool,f(s(bool,X31)))))) ) | $spl53),
  inference(subsumption_resolution,[],[f12603,f137])).
fof(f12603,plain,(
  ( ! [X31] : (p(s(bool,X31)) | s(bool,f(s(bool,X31))) = s(bool,f(s(bool,f(s(bool,X31))))) | s(bool,'T_0') = s(bool,X31)) ) | $spl53),
  inference(superposition,[],[f12389,f8023])).
fof(f8023,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f7948,f135])).
fof(f7948,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f128,f208,f5572,f511])).
fof(f12389,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,f(s(bool,X0)))) ) | $spl53),
  inference(factoring,[],[f10274])).
fof(f10274,plain,(
  ( ! [X8,X9] : (p(s(bool,X8)) | p(s(bool,X9)) | s(bool,X9) = s(bool,f(s(bool,X8)))) ) | $spl53),
  inference(subsumption_resolution,[],[f10211,f137])).
fof(f10211,plain,(
  ( ! [X8,X9] : (p(s(bool,X8)) | p(s(bool,X9)) | s(bool,X9) = s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,X8)) ) | $spl53),
  inference(superposition,[],[f190,f8023])).
fof(f20035,plain,(
  ( ! [X132] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X132,'type.option.option'(sK1)))) ) | $spl126),
  inference(cnf_transformation,[],[f20035_D])).
fof(f20035_D,plain,(
  ( ! [X132] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X132,'type.option.option'(sK1)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f20122,plain,(
  ( ! [X200,X201] : (p(s(bool,X201)) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X200,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19901,f137])).
fof(f19901,plain,(
  ( ! [X200,X201] : (p(s(bool,X201)) | s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X200,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X201)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f12389,f1106])).
fof(f20121,plain,(
  ( ! [X194] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) | $spl150),
  inference(cnf_transformation,[],[f20121_D])).
fof(f20121_D,plain,(
  ( ! [X194] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f20120,plain,(
  ( ! [X194,X195] : (p(s(bool,X195)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19898,f137])).
fof(f19898,plain,(
  ( ! [X194,X195] : (p(s(bool,X195)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X195)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11484,f1106])).
fof(f11484,plain,(
  ( ! [X28] : (p(s(bool,X28)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,X28)))))))) ) | $spl53),
  inference(subsumption_resolution,[],[f11457,f137])).
fof(f11457,plain,(
  ( ! [X28] : (p(s(bool,X28)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,X28))))))) | s(bool,'T_0') = s(bool,X28)) ) | $spl53),
  inference(superposition,[],[f10538,f8023])).
fof(f10538,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X26)))))) ) | $spl53),
  inference(subsumption_resolution,[],[f10520,f137])).
fof(f10520,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X26))))) | s(bool,'T_0') = s(bool,X26)) ) | $spl53),
  inference(superposition,[],[f10273,f8023])).
fof(f10273,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7)))) ) | $spl53),
  inference(subsumption_resolution,[],[f10210,f137])).
fof(f10210,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl53),
  inference(superposition,[],[f142,f8023])).
fof(f20119,plain,(
  ( ! [X192] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) | $spl148),
  inference(cnf_transformation,[],[f20119_D])).
fof(f20119_D,plain,(
  ( ! [X192] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f20118,plain,(
  ( ! [X192,X193] : (p(s(bool,X193)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19897,f137])).
fof(f19897,plain,(
  ( ! [X192,X193] : (p(s(bool,X193)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X193)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11433,f1106])).
fof(f11433,plain,(
  ( ! [X28] : (p(s(bool,X28)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X28)))))))) ) | $spl53),
  inference(subsumption_resolution,[],[f11407,f137])).
fof(f11407,plain,(
  ( ! [X28] : (p(s(bool,X28)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X28))))))) | s(bool,'T_0') = s(bool,X28)) ) | $spl53),
  inference(superposition,[],[f10382,f8023])).
fof(f10382,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X26)))))) ) | $spl53),
  inference(subsumption_resolution,[],[f10366,f137])).
fof(f10366,plain,(
  ( ! [X26] : (p(s(bool,X26)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X26))))) | s(bool,'T_0') = s(bool,X26)) ) | $spl53),
  inference(superposition,[],[f10271,f8023])).
fof(f10271,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'T_0') != s(bool,f(s(bool,X4)))) ) | $spl53),
  inference(subsumption_resolution,[],[f10207,f137])).
fof(f10207,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'T_0') != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | $spl53),
  inference(superposition,[],[f137,f8023])).
fof(f20055,plain,(
  ( ! [X178] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X178),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X178,'type.option.option'(sK1)))) ) | $spl136),
  inference(cnf_transformation,[],[f20055_D])).
fof(f20055_D,plain,(
  ( ! [X178] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X178),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X178,'type.option.option'(sK1)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f20111,plain,(
  ( ! [X175,X174] : (p(s(bool,X175)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X174),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X174,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19890,f137])).
fof(f19890,plain,(
  ( ! [X175,X174] : (p(s(bool,X175)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X174),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X174,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X175)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10538,f1106])).
fof(f20054,plain,(
  ( ! [X176] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X176),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X176,'type.option.option'(sK1)))) ) | $spl134),
  inference(cnf_transformation,[],[f20054_D])).
fof(f20054_D,plain,(
  ( ! [X176] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X176),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X176,'type.option.option'(sK1)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f20110,plain,(
  ( ! [X173,X172] : (p(s(bool,X173)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X172),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X172,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19889,f137])).
fof(f19889,plain,(
  ( ! [X173,X172] : (p(s(bool,X173)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X172),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X172,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X173)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10382,f1106])).
fof(f20045,plain,(
  ( ! [X158] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X158),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X158,'type.option.option'(sK1)))) ) | $spl132),
  inference(cnf_transformation,[],[f20045_D])).
fof(f20045_D,plain,(
  ( ! [X158] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X158),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X158,'type.option.option'(sK1)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f20104,plain,(
  ( ! [X159,X160] : (p(s(bool,X160)) | s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X159),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X159,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19884,f137])).
fof(f19884,plain,(
  ( ! [X159,X160] : (p(s(bool,X160)) | s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X159),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X159,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X160)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10273,f1106])).
fof(f20033,plain,(
  ( ! [X128] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X128),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X128,'type.option.option'(sK1)))) ) | $spl124),
  inference(cnf_transformation,[],[f20033_D])).
fof(f20033_D,plain,(
  ( ! [X128] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X128),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X128,'type.option.option'(sK1)))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f20103,plain,(
  ( ! [X156,X155] : (p(s(bool,X156)) | s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X155),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X155,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19882,f137])).
fof(f19882,plain,(
  ( ! [X156,X155] : (p(s(bool,X156)) | s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X155),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X155,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X156)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10271,f1106])).
fof(f20102,plain,(
  ( ! [X127,X129] : (s(bool,happ(s(fun(sK1,bool),X129),s(sK1,sK2))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X127),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X127,'type.option.option'(sK1))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X129,sK1))) ) | $spl146),
  inference(cnf_transformation,[],[f20102_D])).
fof(f20102_D,plain,(
  ( ! [X127,X129] : (s(bool,happ(s(fun(sK1,bool),X129),s(sK1,sK2))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X127),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X127,'type.option.option'(sK1))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X129,sK1))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f20101,plain,(
  ( ! [X127,X128,X129] : (p(s(bool,X128)) | s(bool,happ(s(fun(sK1,bool),X129),s(sK1,sK2))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X127),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X129,sK1)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X127,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19869,f137])).
fof(f19869,plain,(
  ( ! [X127,X128,X129] : (p(s(bool,X128)) | s(bool,happ(s(fun(sK1,bool),X129),s(sK1,sK2))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X127),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X129,sK1)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X127,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f5518,f1106])).
fof(f20023,plain,(
  ( ! [X95] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X95),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X95,'type.option.option'(sK1)))) ) | $spl116),
  inference(cnf_transformation,[],[f20023_D])).
fof(f20023_D,plain,(
  ( ! [X95] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X95),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X95,'type.option.option'(sK1)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f20100,plain,(
  ( ! [X125,X126] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X125),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X125,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X126)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f19868,f135])).
fof(f19868,plain,(
  ( ! [X125,X126] : (s(bool,'F_0') != s(bool,X126) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X125),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X125,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X126)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4899,f1106])).
fof(f20092,plain,(
  ( ! [X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl144),
  inference(cnf_transformation,[],[f20092_D])).
fof(f20092_D,plain,(
  ( ! [X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f20091,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X1),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X1,'type.option.option'(sK1)))) ) | $spl0),
  inference(condensation,[],[f20090])).
fof(f20090,plain,(
  ( ! [X68,X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X68) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(subsumption_resolution,[],[f19846,f220])).
fof(f19846,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X68) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f568,f1106])).
fof(f20025,plain,(
  ( ! [X97] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X97),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1)))) ) | $spl118),
  inference(cnf_transformation,[],[f20025_D])).
fof(f20025_D,plain,(
  ( ! [X97] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X97),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1)))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f20082,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X15),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X15,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19828,f137])).
fof(f19828,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X15),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X15,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f137,f1106])).
fof(f20081,plain,(
  ( ! [X385,X386] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X386),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X385) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X386,'type.option.option'(sK1)))) ) | $spl0),
  inference(subsumption_resolution,[],[f19797,f7725])).
fof(f19797,plain,(
  ( ! [X385,X386] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X386),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X385) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X386,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X385)),bool))) ) | $spl0),
  inference(superposition,[],[f7725,f1106])).
fof(f20075,plain,(
  ( ! [X294,X293] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X294),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X293) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X294,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19770,f11325])).
fof(f11325,plain,(
  ( ! [X73] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X73))))) | s(bool,'T_0') = s(bool,X73)) ) | $spl53),
  inference(subsumption_resolution,[],[f11270,f207])).
fof(f11270,plain,(
  ( ! [X73] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X73))))) | s(bool,'T_0') = s(bool,X73)) ) | $spl53),
  inference(superposition,[],[f10271,f10278])).
fof(f10278,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(condensation,[],[f10277])).
fof(f10277,plain,(
  ( ! [X45,X44] : (s(bool,'T_0') = s(bool,X45) | s(bool,'F_0') = s(bool,f(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | $spl53),
  inference(subsumption_resolution,[],[f10230,f220])).
fof(f10230,plain,(
  ( ! [X45,X44] : (s(bool,X44) != s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'F_0') = s(bool,f(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | $spl53),
  inference(superposition,[],[f4325,f8023])).
fof(f19770,plain,(
  ( ! [X294,X293] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X294),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X293) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X294,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,f(s(bool,f(s(bool,X293)))))) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11325,f1106])).
fof(f20041,plain,(
  ( ! [X145] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X145),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X145,'type.option.option'(sK1)))) ) | $spl130),
  inference(cnf_transformation,[],[f20041_D])).
fof(f20041_D,plain,(
  ( ! [X145] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X145),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X145,'type.option.option'(sK1)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f20070,plain,(
  ( ! [X273,X272] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X273),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'T_0') = s(bool,X272) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X273,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19763,f7953])).
fof(f7953,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f5572,f135])).
fof(f19763,plain,(
  ( ! [X273,X272] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X273),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'T_0') = s(bool,X272) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X273,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,f(s(bool,X272)))) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f14288,f1106])).
fof(f14288,plain,(
  ( ! [X9] : (~p(s(bool,f(s(bool,f(s(bool,X9)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl53),
  inference(trivial_inequality_removal,[],[f14211])).
fof(f14211,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,f(s(bool,f(s(bool,X9)))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl53),
  inference(superposition,[],[f141,f11328])).
fof(f11328,plain,(
  ( ! [X75] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X75))))) | s(bool,'T_0') = s(bool,X75)) ) | $spl53),
  inference(subsumption_resolution,[],[f11272,f207])).
fof(f11272,plain,(
  ( ! [X75] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X75))))) | s(bool,'T_0') = s(bool,X75)) ) | $spl53),
  inference(superposition,[],[f10273,f10278])).
fof(f20069,plain,(
  ( ! [X271,X270] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X271),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X271,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19762,f7953])).
fof(f19762,plain,(
  ( ! [X271,X270] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X271),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X270) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X271,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,f(s(bool,X270)))) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11328,f1106])).
fof(f20068,plain,(
  ( ! [X269,X268] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X269),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X268) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X269,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19761,f7953])).
fof(f19761,plain,(
  ( ! [X269,X268] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X269),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X268) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X269,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,f(s(bool,X268)))) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11325,f1106])).
fof(f20064,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X261),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X260) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X261,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(subsumption_resolution,[],[f19757,f7953])).
fof(f19757,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X261),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X260) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X261,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,f(s(bool,X260)))) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f7953,f1106])).
fof(f20063,plain,(
  ( ! [X200,X199] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X199) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X200,'type.option.option'(sK1)))) ) | ($spl0 | $spl95)),
  inference(forward_demodulation,[],[f19935,f14724])).
fof(f14724,plain,(
  s(bool,'T_0') = s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | $spl95),
  inference(unit_resulting_resolution,[],[f128,f208,f14682,f511])).
fof(f19935,plain,(
  ( ! [X200,X199] : (s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X199) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X200,'type.option.option'(sK1)))) ) | ($spl0 | $spl95)),
  inference(duplicate_literal_removal,[],[f19752])).
fof(f19752,plain,(
  ( ! [X200,X199] : (s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X200),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X199) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X200,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X199)) ) | ($spl0 | $spl95)),
  inference(superposition,[],[f14923,f1106])).
fof(f14923,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl95),
  inference(subsumption_resolution,[],[f14832,f128])).
fof(f14832,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X5)) ) | $spl95),
  inference(superposition,[],[f222,f14724])).
fof(f20062,plain,(
  ( ! [X196] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1)))) ) | $spl142),
  inference(cnf_transformation,[],[f20062_D])).
fof(f20062_D,plain,(
  ( ! [X196] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f19938,plain,(
  ( ! [X196,X195] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X195) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1)))) ) | ($spl0 | $spl95)),
  inference(duplicate_literal_removal,[],[f19750])).
fof(f19750,plain,(
  ( ! [X196,X195] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X196),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X195) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X196,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X195)) ) | ($spl0 | $spl95)),
  inference(superposition,[],[f14729,f1106])).
fof(f14729,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl95),
  inference(superposition,[],[f14682,f135])).
fof(f20061,plain,(
  ( ! [X194] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) | $spl140),
  inference(cnf_transformation,[],[f20061_D])).
fof(f20061_D,plain,(
  ( ! [X194] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f19939,plain,(
  ( ! [X194,X193] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X193) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19749])).
fof(f19749,plain,(
  ( ! [X194,X193] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X194),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X193) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X194,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X193)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f14315,f1106])).
fof(f14315,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,f(s(bool,f(s(bool,X25))))) | s(bool,'T_0') = s(bool,X25)) ) | $spl53),
  inference(subsumption_resolution,[],[f14149,f208])).
fof(f14149,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,f(s(bool,f(s(bool,X25))))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X25)) ) | $spl53),
  inference(superposition,[],[f11328,f135])).
fof(f20060,plain,(
  ( ! [X192] : (~p(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) | $spl138),
  inference(cnf_transformation,[],[f20060_D])).
fof(f20060_D,plain,(
  ( ! [X192] : (~p(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f19940,plain,(
  ( ! [X191,X192] : (~p(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))))) | s(bool,'T_0') = s(bool,X191) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19748])).
fof(f19748,plain,(
  ( ! [X191,X192] : (~p(s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X192),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))))) | s(bool,'T_0') = s(bool,X191) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X192,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X191)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f14288,f1106])).
fof(f19941,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X178),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X177) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X178,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19741])).
fof(f19741,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X178),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X177) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X178,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X177)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11328,f1106])).
fof(f19942,plain,(
  ( ! [X175,X176] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X176),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X175) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X176,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19740])).
fof(f19740,plain,(
  ( ! [X175,X176] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X176),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))))) | s(bool,'T_0') = s(bool,X175) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X176,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X175)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f11325,f1106])).
fof(f19943,plain,(
  ( ! [X158,X157] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X158),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X157) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X158,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19733])).
fof(f19733,plain,(
  ( ! [X158,X157] : (s(bool,'F_0') = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X158),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X157) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X158,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X157)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10278,f1106])).
fof(f19944,plain,(
  ( ! [X144,X145] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X145),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'T_0') = s(bool,X144) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X145,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19728])).
fof(f19728,plain,(
  ( ! [X144,X145] : (~p(s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X145),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'T_0') = s(bool,X144) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X145,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X144)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f10272,f1106])).
fof(f10272,plain,(
  ( ! [X6] : (~p(s(bool,f(s(bool,X6)))) | s(bool,'T_0') = s(bool,X6)) ) | $spl53),
  inference(subsumption_resolution,[],[f10209,f135])).
fof(f10209,plain,(
  ( ! [X6] : (s(bool,'F_0') != s(bool,X6) | ~p(s(bool,f(s(bool,X6)))) | s(bool,'T_0') = s(bool,X6)) ) | $spl53),
  inference(superposition,[],[f141,f8023])).
fof(f20039,plain,(
  ( ! [X139] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,g(s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X139,'type.option.option'(sK1)))) ) | $spl128),
  inference(cnf_transformation,[],[f20039_D])).
fof(f20039_D,plain,(
  ( ! [X139] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,g(s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X139,'type.option.option'(sK1)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f19945,plain,(
  ( ! [X138,X139] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,g(s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X138) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X139,'type.option.option'(sK1)))) ) | ($spl0 | $spl44)),
  inference(duplicate_literal_removal,[],[f19725])).
fof(f19725,plain,(
  ( ! [X138,X139] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s(bool,g(s(bool,happ(s(fun('type.option.option'(sK1),bool),X139),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X138) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X139,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X138)) ) | ($spl0 | $spl44)),
  inference(superposition,[],[f9673,f1106])).
fof(f9673,plain,(
  ( ! [X20] : (s(bool,X20) != s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X20)) ) | $spl44),
  inference(subsumption_resolution,[],[f9629,f208])).
fof(f9629,plain,(
  ( ! [X20] : (s(bool,X20) != s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X20)) ) | $spl44),
  inference(superposition,[],[f5919,f135])).
fof(f5919,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl44),
  inference(subsumption_resolution,[],[f5857,f128])).
fof(f5857,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl44),
  inference(superposition,[],[f222,f5566])).
fof(f20036,plain,(
  ( ! [X134,X133] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X134),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X133) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X134,'type.option.option'(sK1)))) ) | ($spl0 | $spl66)),
  inference(forward_demodulation,[],[f19946,f5815])).
fof(f19946,plain,(
  ( ! [X134,X133] : (s(bool,g(s(bool,'T_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X134),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X133) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X134,'type.option.option'(sK1)))) ) | ($spl0 | $spl66)),
  inference(duplicate_literal_removal,[],[f19723])).
fof(f19723,plain,(
  ( ! [X134,X133] : (s(bool,g(s(bool,'T_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X134),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X133) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X134,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X133)) ) | ($spl0 | $spl66)),
  inference(superposition,[],[f8985,f1106])).
fof(f19947,plain,(
  ( ! [X132,X131] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X131) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X132,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19722])).
fof(f19722,plain,(
  ( ! [X132,X131] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X132),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X131) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X132,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X131)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f8023,f1106])).
fof(f19949,plain,(
  ( ! [X127,X128] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X128),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X127) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X128,'type.option.option'(sK1)))) ) | ($spl0 | $spl53)),
  inference(duplicate_literal_removal,[],[f19720])).
fof(f19720,plain,(
  ( ! [X127,X128] : (s(bool,'T_0') != s(bool,f(s(bool,happ(s(fun('type.option.option'(sK1),bool),X128),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'T_0') = s(bool,X127) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X128,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X127)) ) | ($spl0 | $spl53)),
  inference(superposition,[],[f7953,f1106])).
fof(f20032,plain,(
  ( ! [X126] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X126),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1)))) ) | $spl122),
  inference(cnf_transformation,[],[f20032_D])).
fof(f20032_D,plain,(
  ( ! [X126] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X126),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f19950,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X126),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X125) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19719])).
fof(f19719,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X126),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X125) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X126,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f7725,f1106])).
fof(f20031,plain,(
  ( ! [X121,X122] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X122),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X121) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X122,'type.option.option'(sK1)))) ) | ($spl0 | $spl44)),
  inference(forward_demodulation,[],[f19951,f5566])).
fof(f19951,plain,(
  ( ! [X121,X122] : (s(bool,g(s(bool,'F_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X122),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X121) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X122,'type.option.option'(sK1)))) ) | ($spl0 | $spl44)),
  inference(duplicate_literal_removal,[],[f19717])).
fof(f19717,plain,(
  ( ! [X121,X122] : (s(bool,g(s(bool,'F_0'))) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X122),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X121) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X122,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X121)) ) | ($spl0 | $spl44)),
  inference(superposition,[],[f5919,f1106])).
fof(f20030,plain,(
  ( ! [X118,X117] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X118),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X117) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X118,'type.option.option'(sK1)))) ) | ($spl0 | $spl64 | $spl66 | $spl74)),
  inference(forward_demodulation,[],[f19954,f8336])).
fof(f20029,plain,(
  ( ! [X107,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X106),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X106,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X107)) ) | $spl120),
  inference(cnf_transformation,[],[f20029_D])).
fof(f20029_D,plain,(
  ( ! [X107,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X106),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X106,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X107)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f19955,plain,(
  ( ! [X107,X105,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X106),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X105) | s(bool,'F_0') = s(bool,X107) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X106,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19710])).
fof(f19710,plain,(
  ( ! [X107,X105,X106] : (s(bool,X107) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X106),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X105) | s(bool,'F_0') = s(bool,X107) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X106,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X105)) ) | $spl0),
  inference(superposition,[],[f4325,f1106])).
fof(f20028,plain,(
  ( ! [X101,X100] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X101),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X101,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(forward_demodulation,[],[f20027,f894])).
fof(f20027,plain,(
  ( ! [X101,X100] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X101),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X101,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(subsumption_resolution,[],[f19708,f7725])).
fof(f19708,plain,(
  ( ! [X101,X100] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X101),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X101,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f4053,f1106])).
fof(f20026,plain,(
  ( ! [X99,X98] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X99),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X98) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X99,'type.option.option'(sK1)))) ) | $spl0),
  inference(forward_demodulation,[],[f19956,f894])).
fof(f19956,plain,(
  ( ! [X99,X98] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X99),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X98) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X99,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19707])).
fof(f19707,plain,(
  ( ! [X99,X98] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X99),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X98) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X99,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f3602,f1106])).
fof(f20024,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X97),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X96)) ) | $spl0),
  inference(subsumption_resolution,[],[f19706,f7725])).
fof(f19706,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(sK1),bool),X97),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X96)),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X97,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f2943,f1106])).
fof(f19957,plain,(
  ( ! [X94,X95] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X95),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X94) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X95,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19705])).
fof(f19705,plain,(
  ( ! [X94,X95] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X95),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))),bool)) | s(bool,'T_0') = s(bool,X94) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X95,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f1445,f1106])).
fof(f20017,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1))) | s(bool,'F_0') != s(bool,X68) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X68))))) ) | $spl114),
  inference(cnf_transformation,[],[f20017_D])).
fof(f20017_D,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1))) | s(bool,'F_0') != s(bool,X68) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X68))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f19965,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X68)))) | s(bool,'F_0') != s(bool,X68) | s(bool,'T_0') = s(bool,X65) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19695])).
fof(f19695,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,happ(s(fun('type.option.option'(sK1),bool),X66),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X68)))) | s(bool,'F_0') != s(bool,X68) | s(bool,'T_0') = s(bool,X65) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X66,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f734,f1106])).
fof(f20016,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun('type.option.option'(sK1),bool),X60),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X60,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool))) ) | $spl112),
  inference(cnf_transformation,[],[f20016_D])).
fof(f20016_D,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun('type.option.option'(sK1),bool),X60),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X60,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f19966,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun('type.option.option'(sK1),bool),X60),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X60,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19693])).
fof(f19693,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun('type.option.option'(sK1),bool),X60),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2)))))))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X59) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X60,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f613,f1106])).
fof(f20015,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X51),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl110),
  inference(cnf_transformation,[],[f20015_D])).
fof(f20015_D,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X51),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f19967,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X51),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19690])).
fof(f19690,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,happ(s(fun('type.option.option'(sK1),bool),X51),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X51,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f568,f1106])).
fof(f20014,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X42),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X43)) ) | $spl108),
  inference(cnf_transformation,[],[f20014_D])).
fof(f20014_D,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X42),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'F_0') = s(bool,X43)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f19968,plain,(
  ( ! [X43,X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X42),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19687])).
fof(f19687,plain,(
  ( ! [X43,X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(sK1),bool),X42),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X42,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f529,f1106])).
fof(f19998,plain,(
  ( ! [X28,X27] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X27),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X28),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X27,'type.option.option'(sK1))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X28,'type.option.option'(sK1)))) ) | $spl106),
  inference(cnf_transformation,[],[f19998_D])).
fof(f19998_D,plain,(
  ( ! [X28,X27] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X27),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X28),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X27,'type.option.option'(sK1))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X28,'type.option.option'(sK1)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f19988,plain,(
  ( ! [X28,X26,X27] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X27),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X28),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X28,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X26) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X27,'type.option.option'(sK1)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f19598])).
fof(f19598,plain,(
  ( ! [X28,X26,X27] : (s(bool,happ(s(fun('type.option.option'(sK1),bool),X27),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s(bool,happ(s(fun('type.option.option'(sK1),bool),X28),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X28,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X26) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X27,'type.option.option'(sK1))) | s(bool,'T_0') = s(bool,X26)) ) | $spl0),
  inference(superposition,[],[f1106,f1106])).
fof(f18442,plain,(
  ( ! [X54,X52] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'F_0') = s(bool,X54) | s(bool,X52) = s(bool,X54)) ) | $spl100),
  inference(cnf_transformation,[],[f18442_D])).
fof(f18442_D,plain,(
  ( ! [X54,X52] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'F_0') = s(bool,X54) | s(bool,X52) = s(bool,X54)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f18560,plain,(
  ( ! [X54,X52,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(subsumption_resolution,[],[f17769,f135])).
fof(f17769,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') != s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(superposition,[],[f568,f10727])).
fof(f10727,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f5929,f5929])).
fof(f5929,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X22)) ) | $spl44),
  inference(subsumption_resolution,[],[f5873,f128])).
fof(f5873,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X22)) ) | $spl44),
  inference(superposition,[],[f1061,f5566])).
fof(f18517,plain,(
  ( ! [X371] : (s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X371)) ) | $spl102),
  inference(cnf_transformation,[],[f18517_D])).
fof(f18517_D,plain,(
  ( ! [X371] : (s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X371)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f18518,plain,(
  ( ! [X370] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool))) ) | $spl104),
  inference(cnf_transformation,[],[f18518_D])).
fof(f18518_D,plain,(
  ( ! [X370] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f18516,plain,(
  ( ! [X370,X371] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool)) | s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X371)) ) | $spl44),
  inference(subsumption_resolution,[],[f17613,f960])).
fof(f17613,plain,(
  ( ! [X370,X371] : (s(bool,'F_0') != s(bool,X370) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X370)),bool)) | s(bool,X371) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X371)) ) | $spl44),
  inference(superposition,[],[f4053,f10727])).
fof(f18441,plain,(
  ( ! [X54,X52,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(subsumption_resolution,[],[f17479,f135])).
fof(f17479,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') != s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X53) | s(bool,X52) = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(superposition,[],[f568,f10727])).
fof(f18341,plain,(
  ( ! [X500,X501] : (s(fun(bool,bool),X500) = s(fun(bool,bool),X501) | s(bool,'F_0') = s(bool,sK8(X500,X501,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X500,X501,bool,bool))))) ) | $spl96),
  inference(cnf_transformation,[],[f18341_D])).
fof(f18341_D,plain,(
  ( ! [X500,X501] : (s(fun(bool,bool),X500) = s(fun(bool,bool),X501) | s(bool,'F_0') = s(bool,sK8(X500,X501,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X500,X501,bool,bool))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f18342,plain,(
  ( ! [X502] : (s(bool,'F_0') != s(bool,f(s(bool,X502))) | s(bool,'F_0') = s(bool,X502)) ) | $spl98),
  inference(cnf_transformation,[],[f18342_D])).
fof(f18342_D,plain,(
  ( ! [X502] : (s(bool,'F_0') != s(bool,f(s(bool,X502))) | s(bool,'F_0') = s(bool,X502)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f17351,plain,(
  ( ! [X500,X502,X501] : (s(bool,'F_0') != s(bool,f(s(bool,X502))) | s(fun(bool,bool),X500) = s(fun(bool,bool),X501) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X500,X501,bool,bool)))) | s(bool,'F_0') = s(bool,sK8(X500,X501,bool,bool)) | s(bool,'F_0') = s(bool,X502)) ) | $spl44),
  inference(superposition,[],[f883,f10727])).
fof(f17152,plain,(
  ( ! [X500,X502,X501] : (s(bool,'F_0') != s(bool,f(s(bool,X502))) | s(fun(bool,bool),X500) = s(fun(bool,bool),X501) | s(bool,'T_0') = s(bool,g(s(bool,sK8(X500,X501,bool,bool)))) | s(bool,'F_0') = s(bool,X502) | s(bool,'F_0') = s(bool,sK8(X500,X501,bool,bool))) ) | $spl44),
  inference(superposition,[],[f883,f10727])).
fof(f14680,plain,(
  ( ! [X37,X36] : (s(fun('type.option.option'(bool),bool),X36) = s(fun('type.option.option'(bool),bool),X37) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(sK8(X36,X37,bool,'type.option.option'(bool)),bool)) | s(bool,'T_0') = s(bool,g(s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool)))))) ) | $spl92),
  inference(cnf_transformation,[],[f14680_D])).
fof(f14680_D,plain,(
  ( ! [X37,X36] : (s(fun('type.option.option'(bool),bool),X36) = s(fun('type.option.option'(bool),bool),X37) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(sK8(X36,X37,bool,'type.option.option'(bool)),bool)) | s(bool,'T_0') = s(bool,g(s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool)))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f14682,plain,(
  s(bool,'F_0') != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | $spl95),
  inference(cnf_transformation,[],[f14682_D])).
fof(f14682_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) <=> ~$spl95),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl95])])).
fof(f14650,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') != s(bool,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(fun('type.option.option'(bool),bool),X36) = s(fun('type.option.option'(bool),bool),X37) | s(bool,'T_0') = s(bool,g(s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(sK8(X36,X37,bool,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X36,X37,bool,'type.option.option'(bool)))) )),
  inference(superposition,[],[f883,f647])).
fof(f10003,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) | $spl90),
  inference(cnf_transformation,[],[f10003_D])).
fof(f10003_D,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X44)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f9949,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X44)) ) | $spl53),
  inference(duplicate_literal_removal,[],[f9863])).
fof(f9863,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) ) | $spl53),
  inference(superposition,[],[f4325,f7972])).
fof(f7972,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(trivial_inequality_removal,[],[f7963])).
fof(f7963,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f5572,f220])).
fof(f8969,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954,f8956,f8958,f8960,f8965,f8968])).
fof(f8968,plain,(
  ( ! [X19] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19)))) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f8967,f5815])).
fof(f8967,plain,(
  ( ! [X19] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0')))))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8505,f8538])).
fof(f8505,plain,(
  ( ! [X19] : (s(bool,'T_0') != s(bool,X19) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0')))))) ) | $spl66),
  inference(superposition,[],[f186,f5815])).
fof(f8965,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f8964,f5815])).
fof(f8964,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0')))))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8504,f8538])).
fof(f8504,plain,(
  ( ! [X18] : (s(bool,'T_0') != s(bool,X18) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'T_0')))))) ) | $spl66),
  inference(superposition,[],[f186,f5815])).
fof(f8960,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8825,f128])).
fof(f8825,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f1001])).
fof(f8958,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8824,f128])).
fof(f8824,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f987])).
fof(f8956,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8822,f128])).
fof(f8822,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f188])).
fof(f8954,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8818,f128])).
fof(f8818,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f628])).
fof(f8952,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8816,f128])).
fof(f8816,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5610])).
fof(f8950,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8813,f128])).
fof(f8813,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f819])).
fof(f8948,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8811,f128])).
fof(f8811,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f652])).
fof(f8873,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f8657])).
fof(f8657,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f4783])).
fof(f8903,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f8902,f8538])).
fof(f8902,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8654,f8538])).
fof(f8654,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f4774])).
fof(f8653,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f4772])).
fof(f8896,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8622,f8538])).
fof(f8622,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') != s(bool,X56)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f3028])).
fof(f8894,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8621,f915])).
fof(f8621,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f3027])).
fof(f8613,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f2898])).
fof(f8887,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8594,f186])).
fof(f8594,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f1669])).
fof(f8877,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8539,f8538])).
fof(f8539,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f141])).
fof(f8538,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,X5)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8537,f128])).
fof(f8537,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X5)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8491,f5818])).
fof(f8966,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954,f8956,f8958,f8960,f8965])).
fof(f8961,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954,f8956,f8958,f8960])).
fof(f8959,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954,f8956,f8958])).
fof(f8957,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954,f8956])).
fof(f8955,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952,f8954])).
fof(f8953,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950,f8952])).
fof(f8951,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948,f8950])).
fof(f8949,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873,f8948])).
fof(f8947,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8946,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8946,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8789,f128])).
fof(f8789,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f868])).
fof(f8945,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8944,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8944,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8788,f128])).
fof(f8788,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f1100])).
fof(f8943,plain,(
  $false | ($spl38 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8852,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8852,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8783])).
fof(f8783,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5605])).
fof(f8942,plain,(
  $false | ($spl38 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8941,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8941,plain,(
  ( ! [X17,X16] : (s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8940,f128])).
fof(f8940,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f8853,f8538])).
fof(f8853,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8782])).
fof(f8782,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5602])).
fof(f8936,plain,(
  $false | ($spl38 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8855,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8855,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8780])).
fof(f8780,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5599])).
fof(f8935,plain,(
  $false | ($spl38 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8856,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8856,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8779])).
fof(f8779,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5597])).
fof(f8934,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8933,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8933,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8778,f186])).
fof(f8778,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5530])).
fof(f8932,plain,(
  $false | ($spl38 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8857,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8857,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8776])).
fof(f8776,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5502])).
fof(f8928,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8927,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8927,plain,(
  ( ! [X0] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8746,f128])).
fof(f8746,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5114])).
fof(f8926,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8925,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8925,plain,(
  ( ! [X6] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8744,f128])).
fof(f8744,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5048])).
fof(f8924,plain,(
  $false | ($spl15 | $spl22 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8729,f8538])).
fof(f8729,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl22 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f7715])).
fof(f8918,plain,(
  $false | ($spl53 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8715,f8538])).
fof(f8715,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl53 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f5572])).
fof(f8911,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903,f8873])).
fof(f8904,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653,f8903])).
fof(f8901,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896,f8653])).
fof(f8899,plain,(
  $false | ($spl20 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8898,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896])).
fof(f8898,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) | ($spl20 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8631,f8538])).
fof(f8631,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | ($spl20 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f4342])).
fof(f8897,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894,f8896])).
fof(f8895,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613,f8894])).
fof(f8891,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887,f8613])).
fof(f8890,plain,(
  $false | ($spl18 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f8889,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887])).
fof(f8889,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl18 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f8598,f8538])).
fof(f8598,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl18 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f1720])).
fof(f8888,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877,f8887])).
fof(f8879,plain,(
  $false | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f8541,f128])).
fof(f8541,plain,(
  ~p(s(bool,'T_0')) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f207])).
fof(f8878,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f7110,f7123,f7134,f4066,f7173,f7175,f7177,f7179,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f629,f3936,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f7724,f7725,f5818,f5815,f8466,f8467,f8538,f8877])).
fof(f8876,plain,(
  $false | ($spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8542])).
fof(f8542,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f525])).
fof(f8875,plain,(
  $false | ($spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8547])).
fof(f8547,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f597])).
fof(f8874,plain,(
  $false | ($spl66 | $spl70)),
  inference(trivial_inequality_removal,[],[f8586])).
fof(f8586,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f8538,f1254])).
fof(f5815,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl66),
  inference(cnf_transformation,[],[f5815_D])).
fof(f5815_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f8329,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X18)) ) | $spl88),
  inference(cnf_transformation,[],[f8329_D])).
fof(f8329_D,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X18)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f8294,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X18)) ) | $spl64),
  inference(superposition,[],[f4325,f5772])).
fof(f8328,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl86),
  inference(cnf_transformation,[],[f8328_D])).
fof(f8328_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f5821,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl74),
  inference(cnf_transformation,[],[f5821_D])).
fof(f5821_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f8293,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f4325,f5772])).
fof(f5818,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl70),
  inference(cnf_transformation,[],[f5818_D])).
fof(f5818_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5819,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl72),
  inference(cnf_transformation,[],[f5819_D])).
fof(f5819_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f8283,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl64),
  inference(superposition,[],[f220,f5772])).
fof(f8307,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl84),
  inference(cnf_transformation,[],[f8307_D])).
fof(f8307_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f8282,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl64),
  inference(superposition,[],[f220,f5772])).
fof(f8281,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f220,f5772])).
fof(f8280,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f220,f5772])).
fof(f5816,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl68),
  inference(cnf_transformation,[],[f5816_D])).
fof(f5816_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f8272,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl64),
  inference(superposition,[],[f135,f5772])).
fof(f8268,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f5772,f220])).
fof(f8267,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f5772,f220])).
fof(f8266,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f5772,f220])).
fof(f8265,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl64),
  inference(superposition,[],[f5772,f220])).
fof(f8264,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl64),
  inference(superposition,[],[f5772,f135])).
fof(f7686,plain,(
  $false | ($spl12 | $spl22 | $spl38)),
  inference(global_subsumption,[],[f7685,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7597,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'F_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | $spl12),
  inference(forward_demodulation,[],[f7596,f894])).
fof(f7596,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | $spl12),
  inference(forward_demodulation,[],[f628,f1674])).
fof(f7591,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f7590,f894])).
fof(f7590,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | $spl12),
  inference(forward_demodulation,[],[f5610,f1674])).
fof(f7586,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'F_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | $spl12),
  inference(forward_demodulation,[],[f7585,f894])).
fof(f7585,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | $spl12),
  inference(forward_demodulation,[],[f819,f1674])).
fof(f7580,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'F_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | $spl12),
  inference(forward_demodulation,[],[f7579,f894])).
fof(f7579,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | $spl12),
  inference(forward_demodulation,[],[f652,f1674])).
fof(f7476,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'F_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl12),
  inference(forward_demodulation,[],[f7475,f894])).
fof(f7475,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl12),
  inference(forward_demodulation,[],[f1001,f1674])).
fof(f7473,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'F_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | $spl12),
  inference(forward_demodulation,[],[f7472,f894])).
fof(f7472,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | $spl12),
  inference(forward_demodulation,[],[f987,f1674])).
fof(f7460,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl12),
  inference(forward_demodulation,[],[f7459,f894])).
fof(f7459,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl12),
  inference(forward_demodulation,[],[f188,f1674])).
fof(f7447,plain,(
  ( ! [X171,X169,X172,X170] : (s(fun(X169,bool),X170) = s(fun(X169,bool),X171) | s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X172)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f7446,f1674])).
fof(f7446,plain,(
  ( ! [X171,X169,X172,X170] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X169,bool),X170) = s(fun(X169,bool),X171) | s(bool,X172) = s(bool,g(s(X169,sK8(X170,X171,bool,X169)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X172)),bool))) ) | $spl12),
  inference(forward_demodulation,[],[f3575,f1674])).
fof(f7444,plain,(
  ( ! [X185,X182,X184,X183] : (s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | $spl12),
  inference(subsumption_resolution,[],[f7443,f1674])).
fof(f7443,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X185) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X182,bool),X183) = s(fun(X182,bool),X184) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X185)),bool)) | s(bool,'T_0') = s(bool,g(s(X182,sK8(X183,X184,bool,X182))))) ) | $spl12),
  inference(forward_demodulation,[],[f3421,f1674])).
fof(f7436,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl12),
  inference(condensation,[],[f7435])).
fof(f7435,plain,(
  ( ! [X123,X121,X124,X122] : (s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK8(X122,X123,bool,X121))))) ) | $spl12),
  inference(subsumption_resolution,[],[f7434,f1674])).
fof(f7434,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(fun(X121,bool),X122) = s(fun(X121,bool),X123) | s(bool,'T_0') = s(bool,X124) | s(bool,'T_0') = s(bool,g(s(X121,sK8(X122,X123,bool,X121))))) ) | $spl12),
  inference(forward_demodulation,[],[f1359,f1674])).
fof(f7432,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl12),
  inference(condensation,[],[f7431])).
fof(f7431,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK8(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | $spl12),
  inference(subsumption_resolution,[],[f7430,f1674])).
fof(f7430,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK8(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | $spl12),
  inference(forward_demodulation,[],[f881,f1674])).
fof(f7428,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl12),
  inference(subsumption_resolution,[],[f7427,f1674])).
fof(f7427,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK8(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl12),
  inference(forward_demodulation,[],[f879,f1674])).
fof(f7311,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl12 | $spl22)),
  inference(forward_demodulation,[],[f4774,f7111])).
fof(f7271,plain,(
  ( ! [X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f2810,f1674])).
fof(f7269,plain,(
  ( ! [X28,X27] : (~p(s(bool,'F_0')) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X27)),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | $spl12),
  inference(forward_demodulation,[],[f7268,f894])).
fof(f7268,plain,(
  ( ! [X28,X27] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X27))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X27)),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | $spl12),
  inference(forward_demodulation,[],[f2650,f1674])).
fof(f7259,plain,(
  ( ! [X28,X27] : (~p(s(bool,'F_0')) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | $spl12),
  inference(forward_demodulation,[],[f7258,f894])).
fof(f7258,plain,(
  ( ! [X28,X27] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X28,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,X27)) ) | $spl12),
  inference(forward_demodulation,[],[f2630,f1674])).
fof(f7242,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,'T_0') = s(bool,X59)) ) | $spl12),
  inference(subsumption_resolution,[],[f1554,f1674])).
fof(f7236,plain,(
  ( ! [X17,X18,X16] : (s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK8(X17,X18,bool,X16))))) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f883,f7111])).
fof(f7215,plain,(
  ( ! [X21,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f573,f7111])).
fof(f7209,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f141,f7111])).
fof(f7169,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f7168,f1674])).
fof(f7168,plain,(
  ( ! [X17] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) )),
  inference(subsumption_resolution,[],[f4107,f2943])).
fof(f4107,plain,(
  ( ! [X17] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f4053,f1437])).
fof(f7166,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f7165,f7111])).
fof(f7165,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl12 | $spl22)),
  inference(condensation,[],[f7164])).
fof(f7164,plain,(
  ( ! [X10,X9] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) ) | ($spl12 | $spl22)),
  inference(forward_demodulation,[],[f7163,f7111])).
fof(f7161,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f7160,f7111])).
fof(f7160,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(subsumption_resolution,[],[f4098,f2943])).
fof(f4098,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4053,f135])).
fof(f7158,plain,(
  ( ! [X26] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) ) | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f7157,f7111])).
fof(f7157,plain,(
  ( ! [X26] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool))) )),
  inference(subsumption_resolution,[],[f4014,f2943])).
fof(f4014,plain,(
  ( ! [X26] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f3602,f1445])).
fof(f7155,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f7154,f1674])).
fof(f7154,plain,(
  ( ! [X18] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool))) )),
  inference(subsumption_resolution,[],[f4008,f2943])).
fof(f4008,plain,(
  ( ! [X18] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool))) )),
  inference(superposition,[],[f3602,f1504])).
fof(f7139,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f3069,f1674])).
fof(f3069,plain,(
  ( ! [X12] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) )),
  inference(duplicate_literal_removal,[],[f3049])).
fof(f3049,plain,(
  ( ! [X12] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool))) )),
  inference(superposition,[],[f2943,f1504])).
fof(f7137,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f7136,f1674])).
fof(f7136,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool))) )),
  inference(subsumption_resolution,[],[f3048,f2943])).
fof(f3048,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f2943,f1437])).
fof(f7130,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(subsumption_resolution,[],[f7129,f138])).
fof(f7129,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X9))) ) | $spl12),
  inference(forward_demodulation,[],[f7128,f894])).
fof(f7128,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool))) ) | $spl12),
  inference(subsumption_resolution,[],[f2829,f1674])).
fof(f2829,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool))) )),
  inference(superposition,[],[f137,f1504])).
fof(f7115,plain,(
  ( ! [X5] : (p(s(bool,X5))) ) | $spl12),
  inference(subsumption_resolution,[],[f7105,f1674])).
fof(f7105,plain,(
  ( ! [X5] : (p(s(bool,X5)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(subsumption_resolution,[],[f2206,f137])).
fof(f2206,plain,(
  ( ! [X5] : (p(s(bool,X5)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f137,f1437])).
fof(f7111,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110])).
fof(f7685,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f7684,f1674])).
fof(f7684,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f5605,f1674])).
fof(f7683,plain,(
  $false | ($spl12 | $spl22 | $spl38)),
  inference(global_subsumption,[],[f7682,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7682,plain,(
  ( ! [X17,X16] : (~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f7681,f1674])).
fof(f7681,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f7680,f1674])).
fof(f7680,plain,(
  ( ! [X17,X16] : (~p(s(bool,'F_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2)))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f7679,f894])).
fof(f7679,plain,(
  ( ! [X17,X16] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X16),s(sK1,sK2)))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f5602,f1674])).
fof(f7674,plain,(
  $false | ($spl12 | $spl22 | $spl38)),
  inference(global_subsumption,[],[f7673,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7673,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f7672,f1674])).
fof(f7672,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f5599,f1674])).
fof(f7671,plain,(
  $false | ($spl12 | $spl22 | $spl38)),
  inference(global_subsumption,[],[f7670,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7670,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f7669,f1674])).
fof(f7669,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f5597,f1674])).
fof(f7668,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7667,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7667,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7666,f894])).
fof(f7666,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5530,f1674])).
fof(f7664,plain,(
  $false | ($spl12 | $spl22 | $spl38)),
  inference(global_subsumption,[],[f7663,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7663,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f7662,f1674])).
fof(f7662,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f5502,f1674])).
fof(f7657,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7656,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7656,plain,(
  ( ! [X151,X149,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) != s(bool,X151) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X149,sK1)) | s(bool,'T_0') = s(bool,X150)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7655,f894])).
fof(f7655,plain,(
  ( ! [X151,X149,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X150) != s(bool,X151) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X149,sK1)) | s(bool,'T_0') = s(bool,X150)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5415,f1674])).
fof(f7653,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7652,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7652,plain,(
  ( ! [X271,X273,X272,X274] : (s(X273,f(s(bool,'F_0'))) != s(X273,g(s(bool,'F_0'))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X274,sK1)) | s(bool,'T_0') = s(bool,sK8(X271,X272,X273,bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7651,f894])).
fof(f7651,plain,(
  ( ! [X271,X273,X272,X274] : (s(X273,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X273,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X274,sK1)) | s(bool,'T_0') = s(bool,sK8(X271,X272,X273,bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5356,f1674])).
fof(f7650,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7649,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7649,plain,(
  ( ! [X265,X264] : (s('type.option.option'(bool),X264) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X264) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X265,sK1)) | s(bool,'T_0') = s(bool,sK6(X264,bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7648,f894])).
fof(f7648,plain,(
  ( ! [X265,X264] : (s('type.option.option'(bool),X264) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X264) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X265,sK1)) | s(bool,'T_0') = s(bool,sK6(X264,bool))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5353,f1674])).
fof(f7647,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7646,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7646,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),X250) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X248) = s(bool,sK6(X250,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X250) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X249,sK1)) | s(bool,'T_0') = s(bool,X248)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7645,f894])).
fof(f7645,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),X250) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X248) = s(bool,sK6(X250,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X250) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X249,sK1)) | s(bool,'T_0') = s(bool,X248)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5349,f1674])).
fof(f7644,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7643,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7643,plain,(
  ( ! [X231,X229,X230] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f7642,f1674])).
fof(f7642,plain,(
  ( ! [X231,X229,X230] : (s(bool,X231) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X231))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X230,sK1)) | s(bool,'T_0') = s(bool,X229)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5343,f1674])).
fof(f7641,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7640,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7640,plain,(
  ( ! [X225,X223,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) | s(bool,X223) = s(bool,X225) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X224,sK1)) | s(bool,'T_0') = s(bool,X223)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7639,f894])).
fof(f7639,plain,(
  ( ! [X225,X223,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X223) = s(bool,X225) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X224,sK1)) | s(bool,'T_0') = s(bool,X223)) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5341,f1674])).
fof(f7618,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7617,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7617,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7616,f894])).
fof(f7616,plain,(
  ( ! [X0] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5114,f1674])).
fof(f7612,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7611,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7611,plain,(
  ( ! [X6] : (~p(s(bool,'F_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7610,f894])).
fof(f7610,plain,(
  ( ! [X6] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5048,f1674])).
fof(f7609,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7608,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7608,plain,(
  ( ! [X6] : (~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7607,f894])).
fof(f7607,plain,(
  ( ! [X6] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f868,f1674])).
fof(f7606,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7605,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7605,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7604,f894])).
fof(f7604,plain,(
  ( ! [X0] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f1100,f1674])).
fof(f7598,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591,f7597])).
fof(f7592,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586,f7591])).
fof(f7587,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580,f7586])).
fof(f7581,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476,f7580])).
fof(f7477,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473,f7476])).
fof(f7474,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460,f7473])).
fof(f7461,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629,f7460])).
fof(f7458,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936,f629])).
fof(f7457,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447,f3936])).
fof(f7451,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7450,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447])).
fof(f7450,plain,(
  ( ! [X261,X263,X260,X262] : (s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f7449,f1674])).
fof(f7449,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X260,sK8(X261,X262,bool,X260)))) | s(fun(X260,bool),X261) = s(fun(X260,bool),X262) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X263,sK1)) | s(bool,'T_0') = s(bool,g(s(X260,sK8(X261,X262,bool,X260))))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f5352,f1674])).
fof(f7448,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444,f7447])).
fof(f7445,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436,f7444])).
fof(f7437,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432,f7436])).
fof(f7433,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428,f7432])).
fof(f7429,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022,f7428])).
fof(f7414,plain,(
  $false | ($spl12 | $spl22 | $spl44)),
  inference(global_subsumption,[],[f5920,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022])).
fof(f5920,plain,(
  ( ! [X8,X7] : (s(bool,X7) = s(bool,g(s(bool,'F_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl44),
  inference(subsumption_resolution,[],[f5859,f128])).
fof(f5859,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s(bool,X7) = s(bool,g(s(bool,'F_0'))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl44),
  inference(superposition,[],[f511,f5566])).
fof(f7413,plain,(
  $false | ($spl12 | $spl22 | $spl44)),
  inference(global_subsumption,[],[f5919,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022])).
fof(f7409,plain,(
  $false | ($spl12 | $spl22 | $spl44)),
  inference(global_subsumption,[],[f5566,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022])).
fof(f7407,plain,(
  $false | ($spl12 | $spl22 | $spl30)),
  inference(global_subsumption,[],[f7406,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022])).
fof(f7406,plain,(
  ( ! [X52,X51] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl12 | $spl30)),
  inference(subsumption_resolution,[],[f7405,f1674])).
fof(f7405,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | ($spl12 | $spl30)),
  inference(forward_demodulation,[],[f5490,f1674])).
fof(f7332,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977,f5022])).
fof(f7329,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972,f4977])).
fof(f7328,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968,f4972])).
fof(f7326,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819,f4968])).
fof(f7325,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818,f4819])).
fof(f7324,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805,f4818])).
fof(f7322,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804,f4805])).
fof(f7321,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783,f4804])).
fof(f7320,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311,f4783])).
fof(f7312,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772,f7311])).
fof(f7310,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709,f4772])).
fof(f7302,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692,f4709])).
fof(f7299,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689,f4692])).
fof(f7294,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688,f4689])).
fof(f7293,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679,f4688])).
fof(f7284,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475,f4679])).
fof(f7283,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473,f4475])).
fof(f7282,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982,f4473])).
fof(f7273,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271,f2982])).
fof(f7272,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269,f7271])).
fof(f7270,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647,f7269])).
fof(f7263,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645,f2647])).
fof(f7262,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639,f2645])).
fof(f7261,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259,f2639])).
fof(f7260,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627,f7259])).
fof(f7253,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625,f2627])).
fof(f7252,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620,f2625])).
fof(f7251,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350,f2620])).
fof(f7249,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711,f2350])).
fof(f7248,plain,(
  $false | ($spl12 | $spl18 | $spl22)),
  inference(global_subsumption,[],[f7247,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711])).
fof(f7247,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl12 | $spl18)),
  inference(subsumption_resolution,[],[f1720,f1674])).
fof(f7246,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693,f1711])).
fof(f7245,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669,f1693])).
fof(f7244,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242,f1669])).
fof(f7243,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280,f7242])).
fof(f7241,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279,f1280])).
fof(f7240,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254,f1279])).
fof(f7239,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913,f1254])).
fof(f7238,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236,f913])).
fof(f7237,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878,f7236])).
fof(f7235,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647,f878])).
fof(f7221,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597,f647])).
fof(f7217,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215,f597])).
fof(f7216,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568,f7215])).
fof(f7214,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534,f568])).
fof(f7213,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525,f534])).
fof(f7212,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207,f525])).
fof(f7211,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209,f207])).
fof(f7210,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179,f7209])).
fof(f7208,plain,(
  $false | ($spl12 | $spl22 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f7207,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179])).
fof(f7207,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | ($spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6560,f2943])).
fof(f6560,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | ($spl44 | $spl56)),
  inference(forward_demodulation,[],[f5574,f5566])).
fof(f7190,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7189,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179])).
fof(f7189,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f7188,f1674])).
fof(f7188,plain,(
  ( ! [X112,X113] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7187,f1674])).
fof(f7187,plain,(
  ( ! [X112,X113] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun(sK1,bool),X113),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5313,f2943])).
fof(f5313,plain,(
  ( ! [X112,X113] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun(sK1,bool),X113),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1)) | s(bool,'T_0') = s(bool,X112)) ) | $spl0),
  inference(superposition,[],[f4053,f5126])).
fof(f7186,plain,(
  $false | ($spl0 | $spl12 | $spl22)),
  inference(global_subsumption,[],[f7185,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179])).
fof(f7185,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X109,sK1))) ) | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f7184,f1674])).
fof(f7184,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X109,sK1))) ) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f7183,f1674])).
fof(f7183,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X109),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X109,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5311,f2943])).
fof(f5311,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X109),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X109,sK1)) | s(bool,'T_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f2943,f5126])).
fof(f7180,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177,f7179])).
fof(f7178,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175,f7177])).
fof(f7176,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173,f7175])).
fof(f7174,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169,f7173])).
fof(f7172,plain,(
  $false | ($spl12 | $spl22)),
  inference(subsumption_resolution,[],[f4566,f1674])).
fof(f4566,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | $spl22),
  inference(unit_resulting_resolution,[],[f208,f4560])).
fof(f7170,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166,f7169])).
fof(f7167,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161,f7166])).
fof(f7162,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158,f7161])).
fof(f7159,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155,f7158])).
fof(f7156,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066,f7155])).
fof(f7153,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139,f4066])).
fof(f7140,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137,f7139])).
fof(f7138,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134,f7137])).
fof(f7135,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130,f7134])).
fof(f7131,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123,f7130])).
fof(f7124,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115,f7123])).
fof(f7116,plain,(
  $false | ($spl12 | $spl22)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f3575,f3421,f3346,f1359,f881,f879,f6001,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4899,f4864,f4855,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4588,f4560,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f1674,f7110,f7111,f7115])).
fof(f7108,plain,(
  $false | ($spl44 | $spl50 | $spl53)),
  inference(subsumption_resolution,[],[f5572,f6982])).
fof(f6982,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,X4)) ) | ($spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570])).
fof(f5896,plain,(
  ( ! [X41] : (~p(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,sK7(g(s(bool,'F_0')),X41,bool))))) ) | $spl44),
  inference(superposition,[],[f716,f5566])).
fof(f5938,plain,(
  ( ! [X37] : (s(bool,'T_0') = s(bool,sK7(g(s(bool,'F_0')),X37,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0'))))) ) | $spl44),
  inference(forward_demodulation,[],[f5892,f5566])).
fof(f5892,plain,(
  ( ! [X37] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0')))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK7(g(s(bool,'F_0')),X37,bool))) ) | $spl44),
  inference(superposition,[],[f188,f5566])).
fof(f5913,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,g(s(bool,X8))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool))) ) | $spl44),
  inference(subsumption_resolution,[],[f5841,f208])).
fof(f5841,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,g(s(bool,X8))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl44),
  inference(superposition,[],[f5566,f958])).
fof(f5867,plain,(
  ( ! [X16] : (~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(g(s(bool,'F_0')),X16,bool))) ) | $spl44),
  inference(superposition,[],[f706,f5566])).
fof(f5833,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f5566,f135])).
fof(f7107,plain,(
  $false | ($spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570,f6982,f7001,f7003,f7005,f7013,f7015,f7018,f7044,f7058,f7061,f7062,f7063,f7099,f7106])).
fof(f7106,plain,(
  ( ! [X5] : (p(s(bool,X5))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7105,f6982])).
fof(f7099,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7098,f6982])).
fof(f7098,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f141,f6982])).
fof(f7063,plain,(
  ( ! [X52,X51] : (s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570,f6982,f7001,f7003,f7005,f7013,f7015,f7018,f7044,f7058,f7061,f7062])).
fof(f7062,plain,(
  ( ! [X52,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570,f6982,f7001,f7003,f7005,f7013,f7015,f7018,f7044,f7058,f7061])).
fof(f7061,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f2898,f6982])).
fof(f7058,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f7057,f6982])).
fof(f7057,plain,(
  ( ! [X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f3028,f6982])).
fof(f7044,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl44 | $spl50)),
  inference(duplicate_literal_removal,[],[f7043])).
fof(f7043,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f4783,f6982])).
fof(f7018,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7017,f128])).
fof(f7017,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f188,f6982])).
fof(f7015,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7014,f128])).
fof(f7014,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f987,f6982])).
fof(f7013,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7012,f128])).
fof(f7012,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f1001,f6982])).
fof(f7005,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7004,f128])).
fof(f7004,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f652,f6982])).
fof(f7003,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7002,f128])).
fof(f7002,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f819,f6982])).
fof(f7001,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7000,f128])).
fof(f7000,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f628,f6982])).
fof(f7104,plain,(
  $false | ($spl22 | $spl44 | $spl50)),
  inference(subsumption_resolution,[],[f4566,f6982])).
fof(f7100,plain,(
  $false | ($spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570,f6982,f7001,f7003,f7005,f7013,f7015,f7018,f7044,f7058,f7061,f7062,f7063,f7099])).
fof(f7096,plain,(
  $false | ($spl44 | $spl50)),
  inference(subsumption_resolution,[],[f7095,f128])).
fof(f7095,plain,(
  ~p(s(bool,'T_0')) | ($spl44 | $spl50)),
  inference(forward_demodulation,[],[f207,f6982])).
fof(f7094,plain,(
  $false | ($spl18 | $spl44 | $spl50)),
  inference(subsumption_resolution,[],[f525,f7065])).
fof(f7065,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl18 | $spl44 | $spl50)),
  inference(forward_demodulation,[],[f7064,f6982])).
fof(f7064,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl18 | $spl44 | $spl50)),
  inference(subsumption_resolution,[],[f1720,f7063])).
fof(f7093,plain,(
  $false | ($spl18 | $spl44 | $spl50)),
  inference(trivial_inequality_removal,[],[f7092])).
fof(f7092,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl18 | $spl44 | $spl50)),
  inference(forward_demodulation,[],[f597,f7065])).
fof(f7075,plain,(
  $false | ($spl18 | $spl44 | $spl50)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4306,f4325,f4532,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1720,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f5570,f6982,f7001,f7003,f7005,f7013,f7015,f7018,f7044,f7058,f7061,f7062,f7063,f7065,f7074])).
fof(f7074,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl18 | $spl44 | $spl50)),
  inference(condensation,[],[f7073])).
fof(f7073,plain,(
  ( ! [X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X4)) ) | ($spl18 | $spl44 | $spl50)),
  inference(subsumption_resolution,[],[f1164,f7065])).
fof(f7067,plain,(
  $false | ($spl18 | $spl44 | $spl50)),
  inference(trivial_inequality_removal,[],[f7066])).
fof(f7066,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl18 | $spl44 | $spl50)),
  inference(forward_demodulation,[],[f1254,f7065])).
fof(f6981,plain,(
  $false | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6853,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6957,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6805,f128])).
fof(f6805,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f628])).
fof(f6955,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6803,f128])).
fof(f6803,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5610])).
fof(f6953,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6800,f128])).
fof(f6800,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f819])).
fof(f6951,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6798,f128])).
fof(f6798,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f652])).
fof(f6947,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6767,f128])).
fof(f6767,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1001])).
fof(f6945,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6766,f128])).
fof(f6766,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f987])).
fof(f6941,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6762,f128])).
fof(f6762,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f188])).
fof(f6890,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl15 | $spl44 | $spl56)),
  inference(duplicate_literal_removal,[],[f6681])).
fof(f6681,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f4783])).
fof(f6921,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl15 | $spl44 | $spl56)),
  inference(forward_demodulation,[],[f6920,f6561])).
fof(f6920,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6678,f6561])).
fof(f6678,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f4774])).
fof(f6677,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f4772])).
fof(f6914,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6646,f6561])).
fof(f6646,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') != s(bool,X56)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f3028])).
fof(f6912,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6645,f915])).
fof(f6645,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f3027])).
fof(f6637,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f2898])).
fof(f6904,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6617,f186])).
fof(f6617,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1669])).
fof(f6894,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6562,f6561])).
fof(f6562,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f141])).
fof(f6561,plain,(
  ( ! [X17] : (s(bool,'T_0') = s(bool,X17)) ) | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6560,f1954])).
fof(f6853,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6844])).
fof(f6844,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5605])).
fof(f6980,plain,(
  $false | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6979,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6979,plain,(
  ( ! [X17,X16] : (s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6978,f128])).
fof(f6978,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(forward_demodulation,[],[f6854,f6561])).
fof(f6854,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6843])).
fof(f6843,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5602])).
fof(f6974,plain,(
  $false | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6856,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6856,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6841])).
fof(f6841,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5599])).
fof(f6973,plain,(
  $false | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6857,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6857,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6840])).
fof(f6840,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5597])).
fof(f6972,plain,(
  $false | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6971,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6971,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6839,f186])).
fof(f6839,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5530])).
fof(f6970,plain,(
  $false | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6858,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6858,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6837])).
fof(f6837,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl15 | $spl38 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5502])).
fof(f6966,plain,(
  $false | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6965,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6965,plain,(
  ( ! [X0] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6813,f128])).
fof(f6813,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5114])).
fof(f6964,plain,(
  $false | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6963,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6963,plain,(
  ( ! [X6] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6811,f128])).
fof(f6811,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f5048])).
fof(f6962,plain,(
  $false | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6961,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6961,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6810,f128])).
fof(f6810,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f868])).
fof(f6960,plain,(
  $false | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6959,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6959,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6809,f128])).
fof(f6809,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1100])).
fof(f6958,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955,f6957])).
fof(f6956,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953,f6955])).
fof(f6954,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951,f6953])).
fof(f6952,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947,f6951])).
fof(f6948,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945,f6947])).
fof(f6946,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941,f6945])).
fof(f6942,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890,f6941])).
fof(f6929,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921,f6890])).
fof(f6922,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677,f6921])).
fof(f6919,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914,f6677])).
fof(f6917,plain,(
  $false | ($spl15 | $spl20 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6916,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914])).
fof(f6916,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) | ($spl15 | $spl20 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6655,f6561])).
fof(f6655,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | ($spl15 | $spl20 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f4342])).
fof(f6915,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912,f6914])).
fof(f6913,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637,f6912])).
fof(f6909,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904,f6637])).
fof(f6908,plain,(
  $false | ($spl15 | $spl18 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f6907,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904])).
fof(f6907,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl15 | $spl18 | $spl44 | $spl56)),
  inference(forward_demodulation,[],[f6622,f6561])).
fof(f6622,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl15 | $spl18 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1720])).
fof(f6906,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6619,f6561])).
fof(f6619,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1676])).
fof(f6905,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894,f6904])).
fof(f6896,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(subsumption_resolution,[],[f6564,f128])).
fof(f6564,plain,(
  ~p(s(bool,'T_0')) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f207])).
fof(f6895,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1954,f2727,f2943,f3036,f3252,f3253,f3337,f3339,f3875,f3414,f3422,f3425,f3896,f3897,f3905,f3464,f3477,f3921,f3503,f3936,f3566,f3568,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4337,f4343,f4345,f4347,f4306,f4325,f4532,f4561,f4644,f4694,f5013,f5014,f5017,f4973,f4975,f4979,f4980,f4984,f4985,f4986,f4989,f5001,f5007,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5833,f5867,f3350,f1451,f4997,f4993,f4693,f3347,f628,f5081,f5610,f5623,f5625,f819,f5082,f652,f731,f5080,f5067,f5053,f3909,f614,f5105,f5071,f5066,f5054,f1493,f740,f737,f735,f704,f702,f619,f616,f5110,f5108,f5097,f5051,f1012,f1001,f987,f752,f716,f189,f188,f187,f5913,f3575,f3421,f3346,f1359,f881,f879,f6001,f5938,f5929,f5920,f5919,f5896,f5566,f5197,f5196,f5195,f5187,f5175,f5174,f5171,f5167,f5166,f5154,f5153,f5107,f5106,f5084,f5079,f5078,f5077,f5076,f5075,f5074,f5069,f5052,f5023,f5022,f5012,f5011,f5005,f5003,f5000,f4996,f4995,f4994,f4977,f4972,f4971,f4970,f4969,f4968,f4828,f4819,f4818,f4817,f4805,f4804,f4783,f4777,f4776,f4774,f4772,f4712,f4711,f4709,f4707,f4702,f4692,f4691,f4689,f4688,f4684,f4683,f4681,f4679,f4536,f4534,f4507,f4475,f4473,f4450,f4332,f4330,f4255,f4253,f4200,f3929,f3901,f3476,f3028,f3027,f3026,f3023,f3022,f2994,f2989,f2988,f2982,f2898,f2857,f2810,f2650,f2649,f2647,f2645,f2639,f2630,f2629,f2627,f2625,f2620,f2381,f2350,f1711,f1693,f1676,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f5885,f6561,f6894])).
fof(f6893,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6565])).
fof(f6565,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f525])).
fof(f6892,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6570])).
fof(f6570,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f597])).
fof(f6891,plain,(
  $false | ($spl15 | $spl44 | $spl56)),
  inference(trivial_inequality_removal,[],[f6609])).
fof(f6609,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl15 | $spl44 | $spl56)),
  inference(backward_demodulation,[],[f6561,f1254])).
fof(f5885,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,'T_0') = s(bool,sK8(X29,X30,bool,bool))) ) | $spl44),
  inference(superposition,[],[f878,f5566])).
fof(f6559,plain,(
  $false | ($spl38 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6427,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6539,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6383,f128])).
fof(f6383,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f628])).
fof(f6537,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6381,f128])).
fof(f6381,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X2),'const.option.NONE_0'),s(fun(X2,'type.option.option'(X0)),X3)),sK6('const.option.SOME_1'(s(fun('type.option.option'(X0),bool),X1)),fun('type.option.option'(X0),bool)),'type.option.option'(X0)))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5610])).
fof(f6535,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6378,f128])).
fof(f6378,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f819])).
fof(f6529,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6371,f128])).
fof(f6371,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f652])).
fof(f6525,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6340,f128])).
fof(f6340,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1001])).
fof(f6523,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6339,f128])).
fof(f6339,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f987])).
fof(f6519,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6335,f128])).
fof(f6335,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f188])).
fof(f6465,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl53 | $spl54)),
  inference(duplicate_literal_removal,[],[f6250])).
fof(f6250,plain,(
  ( ! [X87] : (s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f4783])).
fof(f6498,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl53 | $spl54)),
  inference(forward_demodulation,[],[f6497,f6129])).
fof(f6497,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6247,f6129])).
fof(f6247,plain,(
  ( ! [X94,X95] : (s('type.option.option'(bool),X94) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X94,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X94)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f4774])).
fof(f6246,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X91) = s(bool,sK6(X90,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f4772])).
fof(f6489,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56)))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6214,f6129])).
fof(f6214,plain,(
  ( ! [X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') != s(bool,X56)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f3028])).
fof(f6487,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6213,f915])).
fof(f6213,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49)))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f3027])).
fof(f6205,plain,(
  ( ! [X52,X51] : (s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f2898])).
fof(f6479,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6185,f186])).
fof(f6185,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1669])).
fof(f6469,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6130,f6129])).
fof(f6130,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f141])).
fof(f6129,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6093,f5573])).
fof(f6093,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(trivial_inequality_removal,[],[f6084])).
fof(f6084,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f5572,f220])).
fof(f6128,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool))) ) | $spl53),
  inference(subsumption_resolution,[],[f6082,f208])).
fof(f6082,plain,(
  ( ! [X8] : (s(bool,'T_0') != s(bool,f(s(bool,X8))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X8)),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl53),
  inference(superposition,[],[f5572,f958])).
fof(f6074,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl53),
  inference(superposition,[],[f5572,f135])).
fof(f6072,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl53),
  inference(unit_resulting_resolution,[],[f128,f5572,f1061])).
fof(f6073,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,f(s(bool,'F_0'))))) | $spl53),
  inference(unit_resulting_resolution,[],[f5572,f185])).
fof(f6427,plain,(
  ( ! [X23,X22] : (s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6418])).
fof(f6418,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),X23) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s(sK1,sK6(X23,sK1)) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X22,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X23)) ) | ($spl38 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5605])).
fof(f6558,plain,(
  $false | ($spl38 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6557,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6557,plain,(
  ( ! [X17,X16] : (s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6556,f128])).
fof(f6556,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(forward_demodulation,[],[f6428,f6129])).
fof(f6428,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6417])).
fof(f6417,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun(sK1,bool),X17),s(sK1,sK2)))) | s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1)) = s(sK1,sK7(sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X16,sK1),X17,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5602])).
fof(f6552,plain,(
  $false | ($spl38 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6430,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6430,plain,(
  ( ! [X10,X9] : (s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6415])).
fof(f6415,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) != s(sK1,X10) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X10))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X9,sK1))))) ) | ($spl38 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5599])).
fof(f6551,plain,(
  $false | ($spl38 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6431,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6431,plain,(
  ( ! [X6,X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6414])).
fof(f6414,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X6))) | s(sK1,X6) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X5,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5597])).
fof(f6550,plain,(
  $false | ($spl0 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6549,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6549,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6413,f186])).
fof(f6413,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5530])).
fof(f6548,plain,(
  $false | ($spl38 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6432,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6432,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6411])).
fof(f6411,plain,(
  ( ! [X107] : (s(bool,'T_0') != s(bool,'T_0') | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl38 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5502])).
fof(f6544,plain,(
  $false | ($spl0 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6543,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6543,plain,(
  ( ! [X0] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6386,f128])).
fof(f6386,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),sK6('const.option.SOME_1'(s(fun(sK1,bool),X0)),fun(sK1,bool)),sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5114])).
fof(f6542,plain,(
  $false | ($spl0 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6541,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6541,plain,(
  ( ! [X6] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6384,f128])).
fof(f6384,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X6,sK1))) ) | ($spl0 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5048])).
fof(f6540,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537,f6539])).
fof(f6538,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535,f6537])).
fof(f6536,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529,f6535])).
fof(f6534,plain,(
  $false | ($spl0 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6533,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529])).
fof(f6533,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6376,f128])).
fof(f6376,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f868])).
fof(f6532,plain,(
  $false | ($spl0 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6531,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529])).
fof(f6531,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6375,f128])).
fof(f6375,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1100])).
fof(f6530,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525,f6529])).
fof(f6526,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523,f6525])).
fof(f6524,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519,f6523])).
fof(f6520,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465,f6519])).
fof(f6513,plain,(
  $false | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6308,f6129])).
fof(f6308,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f5572])).
fof(f6506,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498,f6465])).
fof(f6499,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246,f6498])).
fof(f6496,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489,f6246])).
fof(f6494,plain,(
  $false | ($spl20 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6493,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489])).
fof(f6493,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) | ($spl20 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6224,f6129])).
fof(f6224,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | ($spl20 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f4342])).
fof(f6490,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487,f6489])).
fof(f6488,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205,f6487])).
fof(f6484,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479,f6205])).
fof(f6483,plain,(
  $false | ($spl18 | $spl53 | $spl54)),
  inference(global_subsumption,[],[f6482,f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479])).
fof(f6482,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | ($spl18 | $spl53 | $spl54)),
  inference(forward_demodulation,[],[f6190,f6129])).
fof(f6190,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl18 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1720])).
fof(f6481,plain,(
  $false | ($spl15 | $spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6187,f6129])).
fof(f6187,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1676])).
fof(f6480,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469,f6479])).
fof(f6471,plain,(
  $false | ($spl53 | $spl54)),
  inference(subsumption_resolution,[],[f6132,f128])).
fof(f6132,plain,(
  ~p(s(bool,'T_0')) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f207])).
fof(f6470,plain,(
  $false | ($spl53 | $spl54)),
  inference(global_subsumption,[],[f127,f126,f125,f128,f135,f138,f137,f177,f182,f186,f185,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f523,f528,f530,f532,f569,f571,f574,f629,f640,f643,f645,f648,f653,f655,f712,f715,f796,f799,f874,f876,f894,f909,f911,f915,f956,f958,f1093,f1110,f1255,f1301,f1352,f1489,f1389,f1398,f1603,f1709,f1451,f819,f652,f731,f628,f614,f1493,f740,f737,f735,f704,f702,f619,f616,f1001,f987,f752,f188,f187,f1012,f189,f716,f879,f881,f1359,f1711,f1693,f1673,f1669,f1594,f1554,f1504,f1445,f1437,f1280,f1279,f1254,f1249,f1210,f1209,f1197,f1196,f1174,f1173,f1171,f1169,f1164,f1163,f1157,f1156,f1154,f1152,f1147,f1145,f1144,f1138,f1132,f1098,f1067,f1066,f1064,f1063,f1062,f1061,f1044,f960,f913,f883,f878,f739,f734,f706,f647,f618,f613,f597,f573,f568,f534,f529,f525,f207,f142,f141,f2350,f2381,f2620,f2625,f2627,f2629,f2630,f2639,f2645,f2647,f2649,f2650,f2727,f2943,f2982,f2810,f2988,f2989,f2994,f2857,f3022,f3023,f3026,f3027,f2898,f3028,f3036,f3252,f3253,f3337,f3339,f3346,f3347,f3350,f3875,f3414,f3421,f3422,f3425,f3896,f3897,f3901,f3905,f3464,f3909,f3476,f3477,f3921,f3503,f3929,f3936,f3566,f3568,f3575,f3576,f3579,f3602,f3590,f4053,f4020,f4120,f4121,f4200,f4253,f4255,f4337,f4332,f4330,f4343,f4306,f4325,f4450,f4473,f4475,f4507,f4536,f4534,f4532,f4804,f4805,f4644,f4679,f4681,f4683,f4684,f4688,f4689,f4691,f4692,f4693,f4694,f4702,f4707,f4709,f4711,f4712,f4817,f4818,f4819,f4828,f4783,f4772,f4774,f4776,f4777,f5011,f5012,f5013,f5014,f5017,f4968,f4969,f4970,f4971,f4972,f4973,f4975,f4977,f4979,f4980,f4984,f4985,f4986,f5022,f4989,f4993,f4994,f4995,f4996,f4997,f5023,f5000,f5001,f5003,f5005,f5007,f5097,f5051,f5052,f5053,f5054,f5105,f5066,f5067,f5106,f5069,f5071,f5107,f5074,f5075,f5076,f5077,f5078,f5079,f5080,f5081,f5082,f5084,f5108,f5110,f5187,f5153,f5154,f5166,f5167,f5195,f5171,f5196,f5174,f5175,f5197,f5557,f5558,f5559,f5560,f5561,f5562,f5563,f5564,f5610,f5623,f5625,f5573,f5572,f6001,f6073,f6072,f6074,f6128,f6129,f6469])).
fof(f6468,plain,(
  $false | ($spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6133])).
fof(f6133,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f525])).
fof(f6467,plain,(
  $false | ($spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6138])).
fof(f6138,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f597])).
fof(f6466,plain,(
  $false | ($spl53 | $spl54)),
  inference(trivial_inequality_removal,[],[f6177])).
fof(f6177,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl53 | $spl54)),
  inference(backward_demodulation,[],[f6129,f1254])).
fof(f5997,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2)))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'F_0') != s(bool,X44) | p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44))))) ) | $spl82),
  inference(cnf_transformation,[],[f5997_D])).
fof(f5997_D,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2)))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'F_0') != s(bool,X44) | p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f5980,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44)))) | s(bool,'F_0') != s(bool,X44) | s(bool,'T_0') = s(bool,X41) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5952])).
fof(f5952,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44)))) | s(bool,'F_0') != s(bool,X44) | s(bool,'T_0') = s(bool,X41) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f734,f5126])).
fof(f5825,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool))) ) | $spl80),
  inference(cnf_transformation,[],[f5825_D])).
fof(f5825_D,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f5811,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl65),
  inference(superposition,[],[f5773,f958])).
fof(f5824,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool)) | $spl78),
  inference(cnf_transformation,[],[f5824_D])).
fof(f5824_D,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool)) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f5810,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'T_0')))),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl65),
  inference(superposition,[],[f5773,f958])).
fof(f5822,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl76),
  inference(cnf_transformation,[],[f5822_D])).
fof(f5822_D,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f5820,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl73),
  inference(cnf_transformation,[],[f5820_D])).
fof(f5820_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f5809,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X5) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl65),
  inference(superposition,[],[f5773,f958])).
fof(f5808,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl65),
  inference(superposition,[],[f5773,f220])).
fof(f5807,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl65),
  inference(superposition,[],[f5773,f220])).
fof(f5806,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl65),
  inference(superposition,[],[f5773,f220])).
fof(f5805,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl65),
  inference(superposition,[],[f5773,f220])).
fof(f5817,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl69),
  inference(cnf_transformation,[],[f5817_D])).
fof(f5817_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f5804,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(superposition,[],[f5773,f135])).
fof(f5771,plain,(
  ( ! [X132,X131] : (s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) | $spl62),
  inference(cnf_transformation,[],[f5771_D])).
fof(f5771_D,plain,(
  ( ! [X132,X131] : (s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f5773,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(cnf_transformation,[],[f5773_D])).
fof(f5773_D,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f5736,plain,(
  ( ! [X132,X131] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f5723])).
fof(f5723,plain,(
  ( ! [X132,X131] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132)) ) | $spl46),
  inference(superposition,[],[f196,f5567])).
fof(f5577,plain,(
  ( ! [X21] : (s(bool,X21) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) | $spl60),
  inference(cnf_transformation,[],[f5577_D])).
fof(f5577_D,plain,(
  ( ! [X21] : (s(bool,X21) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f5564,plain,(
  ( ! [X23,X21,X22] : (s(bool,X21) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,sK8(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X21)),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f878,f958])).
fof(f5576,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | $spl58),
  inference(cnf_transformation,[],[f5576_D])).
fof(f5576_D,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f5573,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl54),
  inference(cnf_transformation,[],[f5573_D])).
fof(f5573_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f5563,plain,(
  ( ! [X19,X20,X18] : (s(bool,X18) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X19) = s(fun(bool,bool),X20) | s(bool,'T_0') = s(bool,sK8(X19,X20,bool,bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f878,f958])).
fof(f5574,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) | $spl56),
  inference(cnf_transformation,[],[f5574_D])).
fof(f5574_D,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f5562,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,'T_0') = s(bool,sK8(X15,X16,bool,bool)) | s(bool,X17) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool))) )),
  inference(superposition,[],[f878,f958])).
fof(f5570,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl50),
  inference(cnf_transformation,[],[f5570_D])).
fof(f5570_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f5561,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK8(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f878,f220])).
fof(f5560,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK8(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f878,f220])).
fof(f5559,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK8(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f878,f220])).
fof(f5558,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK8(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f878,f220])).
fof(f5557,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f878,f135])).
fof(f5477,plain,(
  ( ! [X1] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2)))) ) | $spl24),
  inference(cnf_transformation,[],[f5477_D])).
fof(f5477_D,plain,(
  ( ! [X1] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f5547,plain,(
  ( ! [X140,X139] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X139),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X139,sK1)) | s(bool,'T_0') = s(bool,X140)) ) | ($spl0 | $spl22)),
  inference(forward_demodulation,[],[f5546,f894])).
fof(f5546,plain,(
  ( ! [X140,X139] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X139),s(sK1,sK2)))),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X139,sK1)) | s(bool,'T_0') = s(bool,X140)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f5411,f135])).
fof(f5411,plain,(
  ( ! [X140,X139] : (s(bool,'F_0') != s(bool,X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X139),s(sK1,sK2)))),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X139,sK1)) | s(bool,'T_0') = s(bool,X140)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4899,f5126])).
fof(f5545,plain,(
  ( ! [X138,X137] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X137),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X137,sK1)) | s(bool,'T_0') = s(bool,X138)) ) | ($spl0 | $spl22)),
  inference(forward_demodulation,[],[f5544,f894])).
fof(f5544,plain,(
  ( ! [X138,X137] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X137),s(sK1,sK2)))),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X137,sK1)) | s(bool,'T_0') = s(bool,X138)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f5410,f1437])).
fof(f5410,plain,(
  ( ! [X138,X137] : (s(bool,X138) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X137),s(sK1,sK2)))),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X137,sK1)) | s(bool,'T_0') = s(bool,X138)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4588,f5126])).
fof(f5543,plain,(
  ( ! [X136,X135] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X135),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X135,sK1)) | s(bool,'T_0') = s(bool,X136)) ) | ($spl0 | $spl22)),
  inference(subsumption_resolution,[],[f5409,f1437])).
fof(f5409,plain,(
  ( ! [X136,X135] : (s(bool,X136) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X135),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X135,sK1)) | s(bool,'T_0') = s(bool,X136)) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f4560,f5126])).
fof(f5542,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X133),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X133,sK1)) | s(bool,'T_0') = s(bool,X134)) ) | ($spl0 | $spl20)),
  inference(subsumption_resolution,[],[f5408,f1445])).
fof(f5408,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X134)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X133),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X133,sK1)) | s(bool,'T_0') = s(bool,X134)) ) | ($spl0 | $spl20)),
  inference(superposition,[],[f4342,f5126])).
fof(f5541,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5540])).
fof(f5540,plain,(
  ( ! [X127,X128,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X127),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X127,sK1)) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(subsumption_resolution,[],[f5406,f220])).
fof(f5406,plain,(
  ( ! [X127,X128,X129] : (s(bool,X128) != s(bool,X129) | s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X127),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X127,sK1)) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f4325,f5126])).
fof(f5539,plain,(
  ( ! [X116,X115] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X115),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X115,sK1)) | s(bool,'T_0') = s(bool,X116)) ) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f5538,f894])).
fof(f5538,plain,(
  ( ! [X116,X115] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X115),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X115,sK1)) | s(bool,'T_0') = s(bool,X116)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5400,f1954])).
fof(f5400,plain,(
  ( ! [X116,X115] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X116)),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X115),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X115,sK1)) | s(bool,'T_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f1504,f5126])).
fof(f5537,plain,(
  ( ! [X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108)))) ) | $spl42),
  inference(cnf_transformation,[],[f5537_D])).
fof(f5537_D,plain,(
  ( ! [X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f5536,plain,(
  ( ! [X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5396,f186])).
fof(f5396,plain,(
  ( ! [X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1)) | s(bool,'T_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f1063,f5126])).
fof(f5535,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5534])).
fof(f5534,plain,(
  ( ! [X103,X101,X102] : (s(bool,'T_0') = s(bool,X103) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X101),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X101,sK1)) | s(bool,'T_0') = s(bool,X102)) ) | $spl0),
  inference(subsumption_resolution,[],[f5394,f956])).
fof(f5394,plain,(
  ( ! [X103,X101,X102] : (s(bool,X103) != s(bool,sK6('const.option.SOME_1'(s(bool,X102)),bool)) | s(bool,'T_0') = s(bool,X103) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X101),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X101,sK1)) | s(bool,'T_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f1062,f5126])).
fof(f5533,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X96),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X96,sK1)) | s(bool,'T_0') = s(bool,X97)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5392,f1954])).
fof(f5392,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X97)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X96),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X96,sK1)) | s(bool,'T_0') = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f960,f5126])).
fof(f5500,plain,(
  ( ! [X105] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X105),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X105,sK1))) ) | $spl36),
  inference(cnf_transformation,[],[f5500_D])).
fof(f5500_D,plain,(
  ( ! [X105] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X105),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X105,sK1))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f5528,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5527])).
fof(f5527,plain,(
  ( ! [X68,X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X66),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X68) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X66,sK1)) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(subsumption_resolution,[],[f5382,f220])).
fof(f5382,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) != s(bool,X68) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X66),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X68) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X66,sK1)) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f568,f5126])).
fof(f5524,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(condensation,[],[f5523])).
fof(f5523,plain,(
  ( ! [X59,X57,X58] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X57),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X59) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X57,sK1)) | s(bool,'T_0') = s(bool,X58)) ) | $spl0),
  inference(subsumption_resolution,[],[f5379,f1489])).
fof(f5379,plain,(
  ( ! [X59,X57,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X57),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X59) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X57,sK1)) | s(bool,'T_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f529,f5126])).
fof(f5516,plain,(
  ( ! [X21,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X21),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X21,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5367,f137])).
fof(f5367,plain,(
  ( ! [X21,X22] : (p(s(bool,X22)) | s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X21),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X21,sK1)) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f142,f5126])).
fof(f5502,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2)))) ) | $spl38),
  inference(cnf_transformation,[],[f5502_D])).
fof(f5502_D,plain,(
  ( ! [X107] : (s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f5515,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X15),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X15,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f5364,f137])).
fof(f5364,plain,(
  ( ! [X15,X16] : (p(s(bool,X16)) | s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X15),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X15,sK1)) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f137,f5126])).
fof(f5514,plain,(
  ( ! [X208,X209] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X209),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X208) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X209,sK1))) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5337,f1954])).
fof(f5337,plain,(
  ( ! [X208,X209] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X209),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X208) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X209,sK1)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X208)),bool))) ) | ($spl0 | $spl15)),
  inference(superposition,[],[f1954,f5126])).
fof(f5513,plain,(
  ( ! [X204,X205] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X205),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X204) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X205,sK1))) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5335,f1954])).
fof(f5335,plain,(
  ( ! [X204,X205] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X205),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X204) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X205,sK1)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X204)),bool))) ) | $spl0),
  inference(superposition,[],[f1445,f5126])).
fof(f5507,plain,(
  ( ! [X118,X119] : (s(bool,X119) != s(bool,happ(s(fun(sK1,bool),X118),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X118,sK1)) | s(bool,'F_0') = s(bool,X119)) ) | $spl40),
  inference(cnf_transformation,[],[f5507_D])).
fof(f5507_D,plain,(
  ( ! [X118,X119] : (s(bool,X119) != s(bool,happ(s(fun(sK1,bool),X118),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X118,sK1)) | s(bool,'F_0') = s(bool,X119)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f5433,plain,(
  ( ! [X118,X119,X117] : (s(bool,X119) != s(bool,happ(s(fun(sK1,bool),X118),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X119) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X118,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5315])).
fof(f5315,plain,(
  ( ! [X118,X119,X117] : (s(bool,X119) != s(bool,happ(s(fun(sK1,bool),X118),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X119) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X118,sK1)) | s(bool,'T_0') = s(bool,X117)) ) | $spl0),
  inference(superposition,[],[f4325,f5126])).
fof(f5506,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X113),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1)) | s(bool,'T_0') = s(bool,X112)) ) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f5505,f894])).
fof(f5505,plain,(
  ( ! [X112,X113] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun(sK1,bool),X113),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X113,sK1)) | s(bool,'T_0') = s(bool,X112)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5313,f1954])).
fof(f5504,plain,(
  ( ! [X111,X110] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X111),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X110) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X111,sK1))) ) | $spl0),
  inference(forward_demodulation,[],[f5434,f894])).
fof(f5434,plain,(
  ( ! [X111,X110] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun(sK1,bool),X111),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X110) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X111,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5312])).
fof(f5312,plain,(
  ( ! [X111,X110] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,happ(s(fun(sK1,bool),X111),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X110) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X111,sK1)) | s(bool,'T_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f3602,f5126])).
fof(f5503,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X109),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X109,sK1)) | s(bool,'T_0') = s(bool,X108)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5311,f1954])).
fof(f5501,plain,(
  ( ! [X107,X106] : (s(bool,'T_0') != s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X106) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f5435,f894])).
fof(f5435,plain,(
  ( ! [X107,X106] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2)))),bool)) | s(bool,'T_0') = s(bool,X106) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1))) ) | ($spl0 | $spl15)),
  inference(duplicate_literal_removal,[],[f5310])).
fof(f5310,plain,(
  ( ! [X107,X106] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X107),s(sK1,sK2)))),bool)) | s(bool,'T_0') = s(bool,X106) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X107,sK1)) | s(bool,'T_0') = s(bool,X106)) ) | ($spl0 | $spl15)),
  inference(superposition,[],[f1954,f5126])).
fof(f5436,plain,(
  ( ! [X105,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X105),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X104) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X105,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5309])).
fof(f5309,plain,(
  ( ! [X105,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X105),s(sK1,sK2))))) | s(bool,'T_0') = s(bool,X104) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X105,sK1)) | s(bool,'T_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f1669,f5126])).
fof(f5499,plain,(
  ( ! [X101,X100] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X101),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X101,sK1)) | s(bool,'T_0') = s(bool,X100)) ) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f5498,f894])).
fof(f5498,plain,(
  ( ! [X101,X100] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X101),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X101,sK1)) | s(bool,'T_0') = s(bool,X100)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5307,f1954])).
fof(f5307,plain,(
  ( ! [X101,X100] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X101),s(sK1,sK2))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X101,sK1)) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f1504,f5126])).
fof(f5497,plain,(
  ( ! [X99,X98] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X99),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X98) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X99,sK1))) ) | $spl0),
  inference(forward_demodulation,[],[f5437,f894])).
fof(f5437,plain,(
  ( ! [X99,X98] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X99),s(sK1,sK2)))),bool)) | s(bool,'T_0') = s(bool,X98) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X99,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5306])).
fof(f5306,plain,(
  ( ! [X99,X98] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X99),s(sK1,sK2)))),bool)) | s(bool,'T_0') = s(bool,X98) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X99,sK1)) | s(bool,'T_0') = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f1445,f5126])).
fof(f5496,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X97),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X96) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X97,sK1))) ) | $spl0),
  inference(forward_demodulation,[],[f5438,f894])).
fof(f5438,plain,(
  ( ! [X97,X96] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X97),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X96) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X97,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5305])).
fof(f5305,plain,(
  ( ! [X97,X96] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X97),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X96) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X97,sK1)) | s(bool,'T_0') = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f1437,f5126])).
fof(f5495,plain,(
  ( ! [X92,X93] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,happ(s(fun(sK1,bool),X92),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X92,sK1)) | s(bool,'F_0') = s(bool,X93)) ) | $spl34),
  inference(cnf_transformation,[],[f5495_D])).
fof(f5495_D,plain,(
  ( ! [X92,X93] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,happ(s(fun(sK1,bool),X92),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X92,sK1)) | s(bool,'F_0') = s(bool,X93)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f5439,plain,(
  ( ! [X92,X93,X91] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,happ(s(fun(sK1,bool),X92),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X91) | s(bool,'F_0') = s(bool,X93) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X92,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5303])).
fof(f5303,plain,(
  ( ! [X92,X93,X91] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,happ(s(fun(sK1,bool),X92),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X91) | s(bool,'F_0') = s(bool,X93) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X92,sK1)) | s(bool,'T_0') = s(bool,X91)) ) | $spl0),
  inference(superposition,[],[f1062,f5126])).
fof(f5491,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun(sK1,bool),X60),s(sK1,sK2)))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X60,sK1)) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool))) ) | $spl32),
  inference(cnf_transformation,[],[f5491_D])).
fof(f5491_D,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun(sK1,bool),X60),s(sK1,sK2)))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X60,sK1)) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f5446,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun(sK1,bool),X60),s(sK1,sK2)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X59) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X60,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5292])).
fof(f5292,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,happ(s(fun(sK1,bool),X60),s(sK1,sK2)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X59) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X60,sK1)) | s(bool,'T_0') = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f613,f5126])).
fof(f5490,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,happ(s(fun(sK1,bool),X51),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl30),
  inference(cnf_transformation,[],[f5490_D])).
fof(f5490_D,plain,(
  ( ! [X52,X51] : (s(bool,X52) != s(bool,happ(s(fun(sK1,bool),X51),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f5447,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,happ(s(fun(sK1,bool),X51),s(sK1,sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5289])).
fof(f5289,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) != s(bool,happ(s(fun(sK1,bool),X51),s(sK1,sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,'T_0') = s(bool,X50) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X51,sK1)) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f568,f5126])).
fof(f5489,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'F_0') = s(bool,X43)) ) | $spl28),
  inference(cnf_transformation,[],[f5489_D])).
fof(f5489_D,plain,(
  ( ! [X43,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2))))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'F_0') = s(bool,X43)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f5448,plain,(
  ( ! [X43,X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2))))) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5286])).
fof(f5286,plain,(
  ( ! [X43,X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(sK1,bool),X42),s(sK1,sK2))))) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X41) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X42,sK1)) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f529,f5126])).
fof(f5457,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5271])).
fof(f5271,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(bool,'T_0') = s(bool,X0) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f135,f5126])).
fof(f5482,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X50),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X50,sK1)) | s(bool,'T_0') = s(bool,X49)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5238,f1954])).
fof(f5238,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X50),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X50,sK1)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'T_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f5126,f1445])).
fof(f5481,plain,(
  ( ! [X31,X32] : (s(bool,happ(s(fun(sK1,bool),X31),s(sK1,sK2))) = s(bool,happ(s(fun(sK1,bool),X32),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X31,sK1)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X32,sK1))) ) | $spl26),
  inference(cnf_transformation,[],[f5481_D])).
fof(f5481_D,plain,(
  ( ! [X31,X32] : (s(bool,happ(s(fun(sK1,bool),X31),s(sK1,sK2))) = s(bool,happ(s(fun(sK1,bool),X32),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X31,sK1)) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X32,sK1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f5466,plain,(
  ( ! [X30,X31,X32] : (s(bool,happ(s(fun(sK1,bool),X31),s(sK1,sK2))) = s(bool,happ(s(fun(sK1,bool),X32),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X32,sK1)) | s(bool,'T_0') = s(bool,X30) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X31,sK1))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5234])).
fof(f5234,plain,(
  ( ! [X30,X31,X32] : (s(bool,happ(s(fun(sK1,bool),X31),s(sK1,sK2))) = s(bool,happ(s(fun(sK1,bool),X32),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X32,sK1)) | s(bool,'T_0') = s(bool,X30) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X31,sK1)) | s(bool,'T_0') = s(bool,X30)) ) | $spl0),
  inference(superposition,[],[f5126,f5126])).
fof(f5480,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X29),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X29,sK1)) | s(bool,'T_0') = s(bool,X28)) ) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f5479,f894])).
fof(f5479,plain,(
  ( ! [X28,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X29),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X29,sK1)) | s(bool,'T_0') = s(bool,X28)) ) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f5233,f1954])).
fof(f5233,plain,(
  ( ! [X28,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X29),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X29,sK1)) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f5126,f1504])).
fof(f5478,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X27),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X27,sK1)) | s(bool,'T_0') = s(bool,X26)) ) | $spl0),
  inference(forward_demodulation,[],[f5467,f894])).
fof(f5467,plain,(
  ( ! [X26,X27] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X27),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X27,sK1)) | s(bool,'T_0') = s(bool,X26)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5232])).
fof(f5232,plain,(
  ( ! [X26,X27] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(sK1,bool),X27),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X27,sK1)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) ) | $spl0),
  inference(superposition,[],[f5126,f1437])).
fof(f5476,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f5223])).
fof(f5223,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),X1),s(sK1,sK2))) | s(sK1,sK2) = s(sK1,sK7(sK6('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK1),X1,sK1)) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f5126,f135])).
fof(f4560,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X27)) ) | $spl22),
  inference(cnf_transformation,[],[f4560_D])).
fof(f4560_D,plain,(
  ( ! [X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X27)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f4561,plain,(
  ( ! [X28,X29] : (s(bool,X29) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X29)) ) | $spl15),
  inference(subsumption_resolution,[],[f4518,f1954])).
fof(f4518,plain,(
  ( ! [X28,X29] : (s(bool,X29) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X29) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) )),
  inference(superposition,[],[f4325,f1504])).
fof(f4532,plain,(
  ( ! [X26,X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27)) )),
  inference(duplicate_literal_removal,[],[f4517])).
fof(f4517,plain,(
  ( ! [X26,X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f4325,f1437])).
fof(f4342,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl20),
  inference(cnf_transformation,[],[f4342_D])).
fof(f4342_D,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f4347,plain,(
  ( ! [X43,X44] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) ) | $spl15),
  inference(subsumption_resolution,[],[f4278,f1954])).
fof(f4278,plain,(
  ( ! [X43,X44] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f1062,f1445])).
fof(f4345,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X29)) ) | $spl15),
  inference(forward_demodulation,[],[f4344,f894])).
fof(f4344,plain,(
  ( ! [X28,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X29)) ) | $spl15),
  inference(subsumption_resolution,[],[f4275,f1954])).
fof(f4275,plain,(
  ( ! [X28,X29] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool)) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,X29) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) )),
  inference(superposition,[],[f1062,f1504])).
fof(f4343,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27)) )),
  inference(forward_demodulation,[],[f4328,f894])).
fof(f4328,plain,(
  ( ! [X26,X27] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27)) )),
  inference(duplicate_literal_removal,[],[f4274])).
fof(f4274,plain,(
  ( ! [X26,X27] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f1062,f1437])).
fof(f4337,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f4265])).
fof(f4265,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1062,f135])).
fof(f1857,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f1856,f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846,f1848,f1850,f1852])).
fof(f1852,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | $spl16),
  inference(subsumption_resolution,[],[f1811,f128])).
fof(f1811,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.option.option'(X33),happ(s(fun(X34,'type.option.option'(X33)),X36),s(X34,X35))) = s('type.option.option'(X33),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X34),'const.option.SOME_1'(s(X34,X35))),s(fun(X34,'type.option.option'(X33)),X36)),X37,'type.option.option'(X33)))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f819])).
fof(f1850,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | $spl16),
  inference(subsumption_resolution,[],[f1810,f128])).
fof(f1810,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.option.option'(X9),'const.option.SOME_1'(s(X9,sK6(X10,X9)))) = s('type.option.option'(X9),sK7('const.option.SOME_1'(s(X9,sK6(X10,X9))),X11,'type.option.option'(X9))) | s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X10)) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f652])).
fof(f1848,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | $spl16),
  inference(subsumption_resolution,[],[f1808,f128])).
fof(f1808,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(X3),'const.option.NONE_0'),s(fun(X3,'type.option.option'(X2)),X4)),X5,'type.option.option'(X2)))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f628])).
fof(f1846,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(subsumption_resolution,[],[f1798,f128])).
fof(f1798,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f1001])).
fof(f1844,plain,(
  ( ! [X66,X64,X65] : (s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | $spl16),
  inference(subsumption_resolution,[],[f1797,f128])).
fof(f1797,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | s(X64,X66) = s(X64,sK7(X66,sK6('const.option.SOME_1'(s(fun(X64,bool),X65)),fun(X64,bool)),X64))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f987])).
fof(f1842,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f1795,f128])).
fof(f1795,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f188])).
fof(f1839,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44)))) ) | $spl16),
  inference(subsumption_resolution,[],[f1784,f186])).
fof(f1784,plain,(
  ( ! [X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X44)) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f1669])).
fof(f1829,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f1729,f1719])).
fof(f1729,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f1719,f141])).
fof(f1856,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f1814,f128])).
fof(f1814,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),X6,'type.option.option'(sK1)))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f1719,f868])).
fof(f1855,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f1854,f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846,f1848,f1850,f1852])).
fof(f1854,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f1813,f128])).
fof(f1813,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),sK7('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)),sK6('const.option.SOME_1'(s(fun('type.option.option'(sK1),bool),X0)),fun('type.option.option'(sK1),bool)),'type.option.option'(sK1)))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f1719,f1100])).
fof(f1853,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846,f1848,f1850,f1852])).
fof(f1851,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846,f1848,f1850])).
fof(f1849,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846,f1848])).
fof(f1847,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844,f1846])).
fof(f1845,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842,f1844])).
fof(f1843,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839,f1842])).
fof(f1841,plain,(
  $false | ($spl15 | $spl16)),
  inference(subsumption_resolution,[],[f1786,f1719])).
fof(f1786,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl15 | $spl16)),
  inference(backward_demodulation,[],[f1719,f1676])).
fof(f1840,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829,f1839])).
fof(f1831,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f1731,f128])).
fof(f1731,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(backward_demodulation,[],[f1719,f207])).
fof(f1830,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f127,f126,f125,f128,f207,f135,f138,f137,f142,f141,f177,f182,f186,f185,f189,f188,f187,f193,f190,f194,f195,f196,f208,f220,f222,f251,f288,f511,f512,f525,f523,f528,f529,f530,f532,f534,f568,f569,f571,f573,f574,f597,f628,f613,f614,f616,f618,f619,f629,f640,f643,f645,f647,f648,f652,f653,f655,f702,f704,f706,f712,f715,f716,f731,f734,f735,f737,f739,f740,f752,f796,f799,f819,f874,f876,f878,f879,f881,f883,f894,f909,f911,f913,f915,f956,f958,f960,f1001,f1012,f987,f1061,f1062,f1063,f1044,f1064,f1066,f1067,f1093,f1098,f1110,f1132,f1138,f1144,f1145,f1147,f1152,f1154,f1156,f1157,f1163,f1164,f1169,f1171,f1173,f1174,f1196,f1197,f1209,f1210,f1249,f1254,f1255,f1279,f1280,f1451,f1445,f1301,f1437,f1352,f1359,f1489,f1389,f1493,f1398,f1504,f1554,f1669,f1594,f1673,f1603,f1711,f1709,f1693,f1719,f1829])).
fof(f1828,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f1732])).
fof(f1732,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | $spl16),
  inference(backward_demodulation,[],[f1719,f525])).
fof(f1827,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f1737])).
fof(f1737,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | $spl16),
  inference(backward_demodulation,[],[f1719,f597])).
fof(f1826,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f1776])).
fof(f1776,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | $spl16),
  inference(backward_demodulation,[],[f1719,f1254])).
fof(f1720,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) | $spl18),
  inference(cnf_transformation,[],[f1720_D])).
fof(f1720_D,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1709,plain,(
  ( ! [X17,X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(duplicate_literal_removal,[],[f1686])).
fof(f1686,plain,(
  ( ! [X17,X18] : (s(bool,X18) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f568,f1437])).
fof(f1676,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | $spl15),
  inference(cnf_transformation,[],[f1676_D])).
fof(f1676_D,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f1603,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) )),
  inference(equality_factoring,[],[f1437])).
fof(f867,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f864,f831])).
fof(f831,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f820,f795])).
fof(f795,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),happ(s(fun(sK0,'type.option.option'(X0)),X1),s(sK0,sK5))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(X0)),X1)))) ) | $spl6),
  inference(superposition,[],[f195,f206])).
fof(f820,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) = s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))))) | $spl0),
  inference(unit_resulting_resolution,[],[f200,f186])).
fof(f864,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f846,f185])).
fof(f846,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f206,f202])).
fof(f866,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f865,f831])).
fof(f865,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f846,f185])).
fof(f861,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f852,f206])).
fof(f852,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f851])).
fof(f851,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | ($spl2 | $spl4)),
  inference(superposition,[],[f202,f204])).
fof(f860,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f859,f206])).
fof(f859,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f858,f723])).
fof(f723,plain,(
  s(sK0,sK5) = s(sK0,sK6('const.option.SOME_1'(s(sK0,sK5)),sK0)) | $spl6),
  inference(unit_resulting_resolution,[],[f182,f206,f651])).
fof(f651,plain,(
  ( ! [X8] : (s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),X8) | s(sK0,sK5) = s(sK0,sK6(X8,sK0)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X8)) ) | $spl6),
  inference(superposition,[],[f537,f177])).
fof(f537,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s(sK0,sK5) = s(sK0,X0)) ) | $spl6),
  inference(superposition,[],[f185,f206])).
fof(f858,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6('const.option.SOME_1'(s(sK0,sK5)),sK0)))) | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f850,f204])).
fof(f850,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6('const.option.SOME_1'(s(sK0,sK5)),sK0)))) | ($spl2 | $spl6)),
  inference(superposition,[],[f202,f723])).
fof(f857,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f856,f206])).
fof(f856,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f855,f658])).
fof(f658,plain,(
  s(sK0,sK5) = s(sK0,sK6(sK3,sK0)) | $spl6),
  inference(unit_resulting_resolution,[],[f641,f537])).
fof(f641,plain,(
  s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK3,sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f217,f177])).
fof(f217,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK3) | $spl6),
  inference(superposition,[],[f182,f206])).
fof(f855,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK3,sK0)))) | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f849,f204])).
fof(f849,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK3,sK0)))) | ($spl2 | $spl6)),
  inference(superposition,[],[f202,f658])).
fof(f854,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f846,f204])).
fof(f853,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f847,f206])).
fof(f847,plain,(
  s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f204,f202])).
fof(f848,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f206,f204,f202])).
fof(f814,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f813])).
fof(f813,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f810,f204])).
fof(f810,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f795,f522])).
fof(f522,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))))) | $spl1),
  inference(unit_resulting_resolution,[],[f201,f185])).
fof(f812,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f811])).
fof(f811,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f809,f204])).
fof(f809,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f795,f639])).
fof(f639,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f522,f185])).
fof(f713,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7(X10,X9,X8))))) ) | $spl8),
  inference(cnf_transformation,[],[f713_D])).
fof(f713_D,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7(X10,X9,X8))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f715,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X15)) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7(X14,X13,X12))))) )),
  inference(subsumption_resolution,[],[f710,f137])).
fof(f710,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X15)) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK7(X14,X13,X12))))) )),
  inference(superposition,[],[f189,f220])).
fof(f712,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7(X10,X9,X8))))) )),
  inference(subsumption_resolution,[],[f709,f137])).
fof(f709,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK7(X10,X9,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f189,f220])).
fof(f200,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) | $spl0),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f206,plain,(
  s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | $spl6),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f125,plain,(
  s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)))),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) | (s('type.option.option'(sK0),sK3) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5))) & s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))))) & (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) | ! [X5] : (s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X5))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f86])).
fof(f86,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ? [X6] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))))) & (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ! [X5] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5))))))),
  inference(rectify,[],[f85])).
fof(f85,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5))))) & (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ! [X5] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5))))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) <~> ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) <=> ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) <=> ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X9),s(fun(X6,'type.option.option'(X7)),X10))) <=> ? [X11] : (s('type.option.option'(X6),X9) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) & s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X10),s(X6,X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X9),s(fun(X6,'type.option.option'(X7)),X10))) <=> ? [X11] : (s('type.option.option'(X6),X9) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) & s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X10),s(X6,X11)))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|1','thm.option.OPTION_BIND_EQUALS_OPTION|split|1')).
fof(f204,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) | $spl4),
  inference(cnf_transformation,[],[f204_D])).
fof(f204_D,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f126,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK5))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)))),
  inference(cnf_transformation,[],[f87])).
fof(f201,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) | $spl1),
  inference(cnf_transformation,[],[f201_D])).
fof(f201_D,plain,(
  s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f202,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X5))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X5)))) ) | $spl2),
  inference(cnf_transformation,[],[f202_D])).
fof(f202_D,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X5))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X5)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f127,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X5))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X5))) | s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK2))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK4)))) )),
  inference(cnf_transformation,[],[f87])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 314
% Passive clauses: 3143
% Generated clauses: 38991
% Final active clauses: 107
% Final passive clauses: 720
% Input formulas: 34
% Initial clauses: 72
% 
% Duplicate literals: 1521
% Trivial inequalities: 385
% Fw subsumption resolutions: 2881
% Fw demodulations: 6555
% Bw demodulations: 1658
% Condensations: 2190
% Global subsumptions: 527
% 
% Simple tautologies: 628
% Equational tautologies: 394
% Forward subsumptions: 19761
% Fw demodulations to eq. taut.: 282
% Bw demodulations to eq. taut.: 33
% 
% Unit resulting resolution: 2550
% Factoring: 2
% Forward superposition: 7656
% Backward superposition: 7656
% Self superposition: 164
% Equality factoring: 109
% Equality resolution: 54
% 
% Split clauses: 198
% Split components: 407
% SAT solver clauses: 4598
% SAT solver unit clauses: 57
% SAT solver binary clauses: 487
% 
% Sat splits: 198
% Sat splitting refutations: 530
% 
% Memory used [KB]: 18166
% Time elapsed: 1.882 s
% ------------------------------
% ------------------------------
% Success in time 3.202 s
