Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (54150)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 95
% Passive clauses: 2339
% Generated clauses: 18972
% Final active clauses: 82
% Final passive clauses: 2042
% Input formulas: 9
% Initial clauses: 11
% 
% Duplicate literals: 1269
% Trivial inequalities: 255
% Fw subsumption resolutions: 2327
% Fw demodulations: 1393
% Bw demodulations: 8
% 
% Simple tautologies: 366
% Equational tautologies: 100
% Forward subsumptions: 8612
% 
% Binary resolution: 36
% Forward superposition: 7704
% Backward superposition: 5162
% Self superposition: 393
% Equality factoring: 278
% Equality resolution: 15
% 
% Split clauses: 1062
% Split components: 2149
% SAT solver clauses: 2508
% SAT solver unit clauses: 336
% SAT solver binary clauses: 708
% 
% Sat splits: 1062
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2467
% TWLsolver calls for satisfiability: 123
% 
% Memory used [KB]: 8315
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f500,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f496,f31,f46,f32,f48,f70,f72,f29,f42,f34,f50,f390,f397,f395,f317,f318,f30,f40,f56,f65,f416,f482,f483,f33,f49,f36,f52,f95,f96,f37,f53,f331,f333,f35,f51,f67,f69,f28,f44])).
fof(f44,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f28,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) & (p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f22])).
fof(f22,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ? [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_BUTLASTN','thm.rich_list.EXISTS_BUTLASTN')).
fof(f69,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl26),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f67,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f60,f48])).
fof(f60,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl12)),
  inference(superposition,[],[f44,f50])).
fof(f51,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f35,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X10,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X10),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num',X10))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.EXISTS_BUTLASTN','thm.rich_list.BUTLASTN_SEG')).
fof(f333,plain,(
  s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | $spl54),
  inference(cnf_transformation,[],[f333_D])).
fof(f333_D,plain,(
  s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f331,plain,(
  s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | ($spl6 | $spl14 | $spl26)),
  inference(subsumption_resolution,[],[f323,f46])).
fof(f323,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | ($spl14 | $spl26)),
  inference(superposition,[],[f51,f69])).
fof(f53,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))) ) | $spl18),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f37,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X7))),s('type.num.num',X10))))),
  file('thm.rich_list.EXISTS_BUTLASTN','thm.arithmetic.SUB_LESS_EQ')).
fof(f96,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) ) | $spl34),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f95,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) ) | ($spl9 | $spl12 | $spl18)),
  inference(subsumption_resolution,[],[f94,f48])).
fof(f94,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X0)))) ) | ($spl12 | $spl18)),
  inference(superposition,[],[f53,f50])).
fof(f52,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl16),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f36,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ! [X4] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X11,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X11))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X11),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_BUTLASTN','thm.rich_list.EXISTS_SEG')).
fof(f49,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl10),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f33,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.EXISTS_BUTLASTN','thm.arithmetic.ADD_|48|')).
fof(f483,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2))))) ) | $spl74),
  inference(cnf_transformation,[],[f483_D])).
fof(f483_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f482,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2))))) ) | ($spl6 | $spl10 | $spl16 | $spl34 | $spl54)),
  inference(subsumption_resolution,[],[f481,f46])).
fof(f481,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2))))) ) | ($spl10 | $spl16 | $spl34 | $spl54)),
  inference(forward_demodulation,[],[f480,f96])).
fof(f480,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2))))) ) | ($spl10 | $spl16 | $spl54)),
  inference(forward_demodulation,[],[f477,f49])).
fof(f477,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),X0),s('type.list.list'(sK0),sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl54)),
  inference(superposition,[],[f52,f333])).
fof(f416,plain,(
  $false | ($spl6 | $spl9 | $spl60)),
  inference(subsumption_resolution,[],[f405,f46])).
fof(f405,plain,(
  ~p(s(bool,'T_0')) | ($spl9 | $spl60)),
  inference(backward_demodulation,[],[f395,f48])).
fof(f65,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl22),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f56,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f50,f50])).
fof(f40,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f30,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))))),
  inference(cnf_transformation,[],[f26])).
fof(f318,plain,(
  ( ! [X11] : (s(bool,X11) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X11)) ) | $spl48),
  inference(cnf_transformation,[],[f318_D])).
fof(f318_D,plain,(
  ( ! [X11] : (s(bool,X11) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X11)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f317,plain,(
  ( ! [X11] : (s(bool,X11) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl6 | $spl22)),
  inference(subsumption_resolution,[],[f189,f46])).
fof(f189,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s(bool,X11) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl1 | $spl22)),
  inference(superposition,[],[f40,f65])).
fof(f395,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl60),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f397,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | $spl62),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f390,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl48)),
  inference(duplicate_literal_removal,[],[f343])).
fof(f343,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl48)),
  inference(superposition,[],[f318,f50])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f34,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.EXISTS_BUTLASTN',aHL_BOOL_CASES)).
fof(f42,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f29,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f26])).
fof(f72,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | $spl28),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f70,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f62,f48])).
fof(f62,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl12)),
  inference(superposition,[],[f42,f50])).
fof(f48,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.EXISTS_BUTLASTN',aHL_FALSITY)).
fof(f46,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f31,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.EXISTS_BUTLASTN',aHL_TRUTH)).
fof(f496,plain,(
  $false | ($spl6 | $spl9 | $spl28 | $spl62 | $spl74)),
  inference(subsumption_resolution,[],[f495,f48])).
fof(f495,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl28 | $spl62 | $spl74)),
  inference(forward_demodulation,[],[f494,f397])).
fof(f494,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | ($spl6 | $spl28 | $spl74)),
  inference(subsumption_resolution,[],[f487,f46])).
fof(f487,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | ($spl28 | $spl74)),
  inference(superposition,[],[f483,f72])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 54
% Generated clauses: 469
% Final active clauses: 18
% Final passive clauses: 11
% Input formulas: 9
% Initial clauses: 11
% 
% Duplicate literals: 59
% Trivial inequalities: 5
% Fw subsumption resolutions: 23
% Fw demodulations: 14
% Bw demodulations: 23
% Condensations: 46
% 
% Simple tautologies: 21
% Equational tautologies: 15
% Forward subsumptions: 172
% 
% Binary resolution: 1
% Forward superposition: 96
% Backward superposition: 80
% Self superposition: 25
% Equality factoring: 28
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 65
% SAT solver unit clauses: 18
% SAT solver binary clauses: 8
% SAT solver learnt clauses: 1
% 
% Sat splits: 4
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 64
% TWLsolver calls for satisfiability: 46
% 
% Memory used [KB]: 1023
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.628 s
