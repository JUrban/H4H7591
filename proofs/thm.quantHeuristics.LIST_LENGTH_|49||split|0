Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (77239)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 351
% Passive clauses: 5211
% Generated clauses: 28785
% Final active clauses: 252
% Final passive clauses: 4353
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 527
% Trivial inequalities: 425
% Fw subsumption resolutions: 1416
% Fw demodulations: 8508
% Bw demodulations: 77
% 
% Simple tautologies: 113
% Equational tautologies: 46
% Forward subsumptions: 12471
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 14
% 
% Binary resolution: 165
% Factoring: 1
% Forward superposition: 8751
% Backward superposition: 8466
% Self superposition: 144
% Equality factoring: 86
% Equality resolution: 22
% 
% Split clauses: 213
% Split components: 426
% SAT solver clauses: 448
% SAT solver unit clauses: 7
% SAT solver binary clauses: 56
% 
% Sat splits: 213
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 448
% TWLsolver calls for satisfiability: 65
% 
% Memory used [KB]: 17014
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (77256)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 266
% Passive clauses: 2862
% Generated clauses: 19904
% Final active clauses: 211
% Final passive clauses: 2070
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 120
% Trivial inequalities: 14
% Fw subsumption resolutions: 732
% Fw demodulations: 5308
% Bw demodulations: 562
% Condensations: 70
% 
% Simple tautologies: 26
% Equational tautologies: 18
% Forward subsumptions: 7609
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 326
% Factoring: 1
% Forward superposition: 5806
% Backward superposition: 3742
% Self superposition: 73
% Equality factoring: 26
% Equality resolution: 14
% 
% Split clauses: 67
% Split components: 134
% SAT solver clauses: 3183
% SAT solver unit clauses: 140
% SAT solver binary clauses: 59
% 
% Sat splits: 67
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 3183
% TWLsolver calls for satisfiability: 666
% 
% Memory used [KB]: 22003
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f10009,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f203,f310,f309,f202,f312,f308,f431,f436,f434,f456,f458,f457,f502,f562,f753,f762,f754,f765,f756,f766,f757,f767,f758,f770,f768,f759,f764,f772,f760,f776,f774,f854,f1883,f1908,f1906,f2292,f2297,f2295,f2682,f2719,f2717,f2904,f2938,f2908,f2906,f2881,f2959,f2957,f2969,f2971,f2974,f2975,f2979,f2980,f3009,f2981,f3012,f2983,f3014,f2984,f3015,f2985,f3016,f2986,f3017,f2987,f3018,f2988,f3008,f3007,f3019,f3010,f2992,f3021,f2995,f3024,f2997,f3026,f2998,f3027,f2999,f3028,f3000,f3029,f3001,f3030,f3002,f3031,f3003,f3032,f3004,f3033,f3005,f3011,f3034,f4366,f4370,f4375,f4378,f4379,f4380,f4381,f4382,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4401,f5124,f5183,f5181,f5370,f5374,f5376,f5378,f5379,f5381,f5394,f5395,f5372,f9013,f9020,f9022,f9025,f9028,f9031,f9035,f9038,f9041,f9044,f9047,f9050,f9053,f9061,f9870,f9971,f9974,f9978,f9981,f9982])).
fof(f9982,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9865,f9062])).
fof(f9062,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl1 | $spl28)),
  inference(forward_demodulation,[],[f309,f870])).
fof(f870,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f869,f207])).
fof(f207,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f39])).
fof(f39,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|13')).
fof(f869,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl28),
  inference(backward_demodulation,[],[f772,f206])).
fof(f206,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f41])).
fof(f41,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.prim_rec.PRE|split|0')).
fof(f9865,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f2322,f312,f259])).
fof(f259,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK4(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X2,X1,X0)),s('type.list.list'(X0),sK4(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> ? [X21,X22] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_CONS')).
fof(f2322,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2317,f238])).
fof(f238,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X7)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.APPEND|split|0')).
fof(f2317,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f238,f888])).
fof(f888,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f240])).
fof(f240,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_NIL_SYM')).
fof(f9981,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9980,f9062])).
fof(f9980,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9979,f2322])).
fof(f9979,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9866,f871])).
fof(f871,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f210])).
fof(f210,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.ADD|split|0')).
fof(f9866,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f871,f312,f259])).
fof(f9978,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9977,f9062])).
fof(f9977,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9976,f2322])).
fof(f9976,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9975,f871])).
fof(f9975,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9867,f289])).
fof(f289,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.ADD_SYM')).
fof(f9867,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f872,f312,f259])).
fof(f872,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f211])).
fof(f211,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|1')).
fof(f9974,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9973,f9062])).
fof(f9973,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9972,f2322])).
fof(f9972,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9868,f881])).
fof(f881,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f220])).
fof(f220,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|7')).
fof(f9868,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f881,f312,f259])).
fof(f9971,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9869,f2322])).
fof(f9869,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f9062,f312,f259])).
fof(f9870,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f2322,f9062,f312,f259])).
fof(f9061,plain,(
  $false | ($spl4 | $spl28 | $spl38 | $spl45)),
  inference(subsumption_resolution,[],[f9060,f873])).
fof(f873,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f212])).
fof(f212,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X10] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|26')).
fof(f9060,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl4 | $spl28 | $spl38 | $spl45)),
  inference(forward_demodulation,[],[f9059,f2322])).
fof(f9059,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl4 | $spl38 | $spl45)),
  inference(backward_demodulation,[],[f9058,f2719])).
fof(f9058,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | ($spl4 | $spl38)),
  inference(forward_demodulation,[],[f312,f2295])).
fof(f9053,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9052,f3035])).
fof(f3035,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f308,f870])).
fof(f9052,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9051,f909])).
fof(f909,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(backward_demodulation,[],[f869,f772])).
fof(f9051,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8995,f310])).
fof(f8995,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6003])).
fof(f6003,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5401,f887])).
fof(f887,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f239])).
fof(f239,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f5401,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5358,f909])).
fof(f5358,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5354])).
fof(f5354,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f909])).
fof(f4507,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4(X2,sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f257,f3035])).
fof(f257,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK4(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f174])).
fof(f258,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X2,X1,X0)),s('type.list.list'(X0),sK4(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f9050,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9049,f3035])).
fof(f9049,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9048,f883])).
fof(f883,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f227])).
fof(f227,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|9')).
fof(f9048,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8994,f310])).
fof(f8994,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8699])).
fof(f8699,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5397,f887])).
fof(f5397,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5360,f883])).
fof(f5360,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5351])).
fof(f5351,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f883])).
fof(f9047,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9046,f3035])).
fof(f9046,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9045,f882])).
fof(f882,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f223])).
fof(f223,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|10')).
fof(f9045,plain,(
  ( ! [X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8993,f310])).
fof(f8993,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8294])).
fof(f8294,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5396,f887])).
fof(f5396,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5361,f882])).
fof(f5361,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5350])).
fof(f5350,plain,(
  ( ! [X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f882])).
fof(f9044,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9043,f3035])).
fof(f9043,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9042,f1930])).
fof(f1930,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f883,f870])).
fof(f9042,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8992,f310])).
fof(f8992,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8092])).
fof(f8092,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5398,f887])).
fof(f5398,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5359,f1930])).
fof(f5359,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5352])).
fof(f5352,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f1930])).
fof(f9041,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9040,f3035])).
fof(f9040,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9039,f879])).
fof(f879,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f218])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|4')).
fof(f9039,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8991,f310])).
fof(f8991,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f7709])).
fof(f7709,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5391,f887])).
fof(f5391,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5362,f879])).
fof(f5362,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5347])).
fof(f5347,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f879])).
fof(f9038,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9037,f3035])).
fof(f9037,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9036,f878])).
fof(f878,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f217])).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.MULT|split|0')).
fof(f9036,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8990,f310])).
fof(f8990,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f7352])).
fof(f7352,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5390,f887])).
fof(f5390,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5363,f878])).
fof(f5363,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5346])).
fof(f5346,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f878])).
fof(f9035,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(trivial_inequality_removal,[],[f9034])).
fof(f9034,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9033,f869])).
fof(f9033,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9032,f3035])).
fof(f9032,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8989,f310])).
fof(f8989,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.num.|48|_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f5543])).
fof(f5543,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5389,f887])).
fof(f5389,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5364,f869])).
fof(f5364,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5345])).
fof(f5345,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f869])).
fof(f9031,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9030,f3035])).
fof(f9030,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9029,f880])).
fof(f880,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f219])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|6')).
fof(f9029,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8988,f310])).
fof(f8988,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6995])).
fof(f6995,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5387,f887])).
fof(f5387,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5365,f880])).
fof(f5365,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5343])).
fof(f5343,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f880])).
fof(f9028,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9027,f3035])).
fof(f9027,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9026,f875])).
fof(f875,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f214])).
fof(f214,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X11] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f9026,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8987,f310])).
fof(f8987,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6664])).
fof(f6664,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5386,f887])).
fof(f5386,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5366,f875])).
fof(f5366,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5342])).
fof(f5342,plain,(
  ( ! [X8] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f875])).
fof(f9025,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9024,f3035])).
fof(f9024,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9023,f911])).
fof(f911,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(backward_demodulation,[],[f869,f792])).
fof(f792,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f779,f220])).
fof(f779,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f220,f233])).
fof(f233,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|18')).
fof(f9023,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8986,f310])).
fof(f8986,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f5820])).
fof(f5820,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5375,f887])).
fof(f5375,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5367,f911])).
fof(f5367,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5334])).
fof(f5334,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f911])).
fof(f9022,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9021,f3035])).
fof(f9021,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8985,f310])).
fof(f8985,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f4530])).
fof(f4530,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f4481,f887])).
fof(f4481,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3035,f257])).
fof(f9020,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9019,f3035])).
fof(f9019,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9018,f2322])).
fof(f9018,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8984,f310])).
fof(f8984,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6186])).
fof(f6186,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5369,f887])).
fof(f5369,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5368,f2322])).
fof(f5368,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5332])).
fof(f5332,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f2322])).
fof(f9013,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9012,f310])).
fof(f9012,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f8979,f4530])).
fof(f8979,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3035,f258])).
fof(f5372,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl99),
  inference(cnf_transformation,[],[f5372_D])).
fof(f5372_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl99),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl99])])).
fof(f5395,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | $spl106),
  inference(cnf_transformation,[],[f5395_D])).
fof(f5395_D,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f5394,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5349,f891])).
fof(f891,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f313])).
fof(f313,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f224,f207])).
fof(f224,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|11')).
fof(f5349,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f891])).
fof(f5381,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | $spl104),
  inference(cnf_transformation,[],[f5381_D])).
fof(f5381_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f5379,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5336,f1393])).
fof(f1393,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f226,f911])).
fof(f226,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|14')).
fof(f5336,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f1393])).
fof(f5378,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | $spl102),
  inference(cnf_transformation,[],[f5378_D])).
fof(f5378_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f5376,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5335,f870])).
fof(f5335,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f870])).
fof(f5374,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | $spl100),
  inference(cnf_transformation,[],[f5374_D])).
fof(f5374_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f5370,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5333,f3035])).
fof(f5333,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4507,f3035])).
fof(f5181,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl94),
  inference(cnf_transformation,[],[f5181_D])).
fof(f5181_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f5183,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl97),
  inference(cnf_transformation,[],[f5183_D])).
fof(f5183_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f5124,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(equality_factoring,[],[f4355])).
fof(f4355,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f4343,f208])).
fof(f208,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0',aHL_FALSITY)).
fof(f4343,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f455,f4312])).
fof(f4312,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f208,f4291,f301])).
fof(f301,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.bool.IMP_ANTISYM_AX')).
fof(f4291,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4290,f3687])).
fof(f3687,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f3646,f3645])).
fof(f3645,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f329,f870])).
fof(f329,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f293,f290])).
fof(f290,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.GREATER_DEF')).
fof(f293,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X10,X9] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X9))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|22')).
fof(f3646,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(superposition,[],[f329,f1393])).
fof(f4290,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4279,f3035])).
fof(f4279,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3124,f3690])).
fof(f3690,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f3689,f893])).
fof(f893,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f315])).
fof(f315,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f251,f207])).
fof(f251,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f3689,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3671,f3670])).
fof(f3670,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f329,f870])).
fof(f3671,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f329,f1393])).
fof(f3124,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3122,f888])).
fof(f3122,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f3121,f208])).
fof(f3121,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3120,f874])).
fof(f874,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f213])).
fof(f213,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X10] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|23')).
fof(f3120,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3107,f328])).
fof(f328,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f292,f290])).
fof(f292,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.LESS_EQ')).
fof(f3107,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f913,f3035])).
fof(f913,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl28),
  inference(forward_demodulation,[],[f899,f869])).
fof(f899,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f325])).
fof(f325,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f291,f237])).
fof(f237,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X10] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|30')).
fof(f291,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.arithmetic.GREATER_EQ')).
fof(f455,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f442,f208])).
fof(f442,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f301,f231])).
fof(f231,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0',aHL_BOOL_CASES)).
fof(f4401,plain,(
  $false | ($spl9 | $spl48 | $spl52)),
  inference(subsumption_resolution,[],[f4400,f436])).
fof(f4400,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl48 | $spl52)),
  inference(backward_demodulation,[],[f2959,f2908])).
fof(f4399,plain,(
  $false | ($spl28 | $spl30)),
  inference(subsumption_resolution,[],[f774,f1311])).
fof(f1311,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(unit_resulting_resolution,[],[f1291,f886])).
fof(f886,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f233])).
fof(f1291,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(subsumption_resolution,[],[f1290,f208])).
fof(f1290,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(forward_demodulation,[],[f1289,f874])).
fof(f1289,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(forward_demodulation,[],[f1253,f328])).
fof(f1253,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f913,f870])).
fof(f4398,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(subsumption_resolution,[],[f2296,f3122])).
fof(f2296,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl40),
  inference(cnf_transformation,[],[f2296_D])).
fof(f2296_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f4397,plain,(
  $false | ($spl0 | $spl28 | $spl40 | $spl51)),
  inference(global_subsumption,[],[f2956,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554,f3553,f3572,f2820])).
fof(f2820,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f897,f870])).
fof(f3572,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3552,f823])).
fof(f3552,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f295,f1836])).
fof(f3553,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f295,f231])).
fof(f3554,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f231,f295])).
fof(f3579,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f3561,f823])).
fof(f3561,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(superposition,[],[f1836,f295])).
fof(f3694,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3674,f823])).
fof(f3674,plain,(
  ( ! [X6,X7] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f329,f1836])).
fof(f3675,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f329,f231])).
fof(f3677,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f231,f329])).
fof(f3707,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X21),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))) )),
  inference(forward_demodulation,[],[f3684,f823])).
fof(f3684,plain,(
  ( ! [X21,X20] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X21),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))) )),
  inference(superposition,[],[f1836,f329])).
fof(f4062,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(forward_demodulation,[],[f4041,f823])).
fof(f4041,plain,(
  ( ! [X8,X9] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f330,f1836])).
fof(f4042,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X10),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f330,f231])).
fof(f4043,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f231,f330])).
fof(f4069,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f4050,f823])).
fof(f4050,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(superposition,[],[f1836,f330])).
fof(f4364,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f4363,f2322])).
fof(f4363,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f4358,f238])).
fof(f4358,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f238,f3691])).
fof(f4376,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f4361,f2322])).
fof(f4361,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl28),
  inference(equality_resolution,[],[f3691])).
fof(f4356,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4350,f4312])).
fof(f4350,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4,bool))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f270,f4312])).
fof(f4074,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27))))))) )),
  inference(forward_demodulation,[],[f4054,f330])).
fof(f4054,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool))) )),
  inference(superposition,[],[f270,f330])).
fof(f4036,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f330,f870])).
fof(f4011,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f330,f870])).
fof(f3711,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f3710,f330])).
fof(f3710,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f3686,f290])).
fof(f3686,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool))) )),
  inference(superposition,[],[f270,f329])).
fof(f3691,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) ) | $spl28),
  inference(backward_demodulation,[],[f3689,f892])).
fof(f3582,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23))))))) )),
  inference(forward_demodulation,[],[f3563,f295])).
fof(f3563,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool))) )),
  inference(superposition,[],[f270,f295])).
fof(f3549,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f295,f870])).
fof(f3348,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f3347,f295])).
fof(f3347,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f3327,f291])).
fof(f3327,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool))) )),
  inference(superposition,[],[f270,f294])).
fof(f3333,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3316,f823])).
fof(f3316,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f294,f1836])).
fof(f3332,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(backward_demodulation,[],[f3331,f3313])).
fof(f3331,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3330,f328])).
fof(f3330,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3314,f3313])).
fof(f3314,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f294,f1393])).
fof(f3313,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f294,f870])).
fof(f3328,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f3289,f3288])).
fof(f3289,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(superposition,[],[f294,f1393])).
fof(f3288,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f294,f870])).
fof(f3287,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(superposition,[],[f294,f911])).
fof(f3123,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),X12,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3113,f3035])).
fof(f3113,plain,(
  ( ! [X12] : (~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),X12,'type.num.num'))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f270,f3035])).
fof(f892,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f314])).
fof(f286,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0))))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19])],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X6,X7] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : ! [X10,X9,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X19,X20] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LENGTH_LE_PLUS')).
fof(f288,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f285,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f287,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f1514,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | $spl28),
  inference(superposition,[],[f913,f289])).
fof(f1513,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | $spl28),
  inference(superposition,[],[f912,f289])).
fof(f271,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK11(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X16,X18] : (? [X14] : (s(X6,X14) = s(X6,X18) & p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14))))) <=> p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X18)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.bool.UNWIND_THM2')).
fof(f272,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X16,X17] : (? [X14] : (p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))) <=> (? [X14] : p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f274,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f2500,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f2489,f328])).
fof(f2489,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool))) )),
  inference(superposition,[],[f270,f328])).
fof(f2377,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2339,f290])).
fof(f2339,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) )),
  inference(superposition,[],[f270,f290])).
fof(f2854,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2853,f896])).
fof(f2853,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2836,f290])).
fof(f2836,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f897])).
fof(f2765,plain,(
  ( ! [X14,X13] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2754,f896])).
fof(f2754,plain,(
  ( ! [X14,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14,bool))) ) | $spl28),
  inference(superposition,[],[f270,f896])).
fof(f2382,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2343,f291])).
fof(f2343,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) )),
  inference(superposition,[],[f270,f291])).
fof(f2615,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2604,f884])).
fof(f2604,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f884])).
fof(f2385,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f2346,f222])).
fof(f2346,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) )),
  inference(superposition,[],[f270,f222])).
fof(f2386,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f2347,f221])).
fof(f2347,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) )),
  inference(superposition,[],[f270,f221])).
fof(f2395,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))))))) )),
  inference(forward_demodulation,[],[f2358,f226])).
fof(f2358,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) )),
  inference(superposition,[],[f270,f226])).
fof(f2407,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X68),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))))))) )),
  inference(forward_demodulation,[],[f2370,f225])).
fof(f2370,plain,(
  ( ! [X68,X67] : (~p(s(bool,happ(s(fun('type.num.num',bool),X68),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) )),
  inference(superposition,[],[f270,f225])).
fof(f2356,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) )),
  inference(superposition,[],[f270,f289])).
fof(f2402,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X60),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2365,f891])).
fof(f2365,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun('type.num.num',bool),X60),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f891])).
fof(f2392,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2353,f1393])).
fof(f2353,plain,(
  ( ! [X35] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f1393])).
fof(f2391,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2352,f870])).
fof(f2352,plain,(
  ( ! [X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f870])).
fof(f2389,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30))) | ~p(s(bool,happ(s(fun('type.list.list'(X30),bool),X32),s('type.list.list'(X30),X31))))) )),
  inference(forward_demodulation,[],[f2350,f238])).
fof(f2350,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X30),bool),X32),s('type.list.list'(X30),X31)))) | s('type.list.list'(X30),'const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31))) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) )),
  inference(superposition,[],[f270,f238])).
fof(f2379,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2341,f1453])).
fof(f2341,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f1453])).
fof(f260,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X6] : ! [X10,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X19,X20] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f261,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f262,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f177])).
fof(f890,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f250])).
fof(f889,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f249])).
fof(f2374,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2337,f874])).
fof(f2337,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7,bool))) ) | $spl28),
  inference(superposition,[],[f270,f874])).
fof(f2376,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2375,f874])).
fof(f2375,plain,(
  ( ! [X8,X9] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2338,f290])).
fof(f2338,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool))) ) | $spl28),
  inference(superposition,[],[f270,f877])).
fof(f2378,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)),X14,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2340,f873])).
fof(f2340,plain,(
  ( ! [X14,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)),X14,bool))) ) | $spl28),
  inference(superposition,[],[f270,f873])).
fof(f2381,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2380,f873])).
fof(f2380,plain,(
  ( ! [X17,X16] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X16))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2342,f291])).
fof(f2342,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool))) ) | $spl28),
  inference(superposition,[],[f270,f876])).
fof(f2763,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2752,f823])).
fof(f2752,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f1836,f896])).
fof(f2851,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) ) | $spl28),
  inference(forward_demodulation,[],[f2834,f823])).
fof(f2834,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) ) | $spl28),
  inference(superposition,[],[f1836,f897])).
fof(f2741,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(superposition,[],[f896,f870])).
fof(f2595,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl28),
  inference(superposition,[],[f912,f884])).
fof(f2594,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(superposition,[],[f913,f884])).
fof(f2607,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2592,f823])).
fof(f2592,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f884,f1836])).
fof(f2569,plain,(
  ( ! [X52,X53] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0')),X53,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2557,f2322])).
fof(f2557,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0'))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0')),X53,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f2322])).
fof(f2562,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2528,f911])).
fof(f2528,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f305,f2322])).
fof(f2490,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f2477,f823])).
fof(f2477,plain,(
  ( ! [X2,X3] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f328,f1836])).
fof(f2456,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f328,f226])).
fof(f2406,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X66,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2369,f909])).
fof(f2369,plain,(
  ( ! [X66] : (~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X66,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f909])).
fof(f2405,plain,(
  ( ! [X65] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X65,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X65),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2368,f1930])).
fof(f2368,plain,(
  ( ! [X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),X65),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X65,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f1930])).
fof(f2404,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63)))))),X64,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X64),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2367,f883])).
fof(f2367,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun('type.num.num',bool),X64),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63))))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63)))))),X64,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f883])).
fof(f2403,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61)))))),X62,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2366,f882])).
fof(f2366,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61))))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61)))))),X62,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f882])).
fof(f2401,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0')),X58,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X58),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2364,f879])).
fof(f2364,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun('type.num.num',bool),X58),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0')),X58,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f879])).
fof(f2400,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55)),X56,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X56),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2363,f878])).
fof(f2363,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun('type.num.num',bool),X56),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))) = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55)),X56,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f878])).
fof(f2399,plain,(
  ( ! [X54] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.num.|48|_0',X54,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2362,f869])).
fof(f2362,plain,(
  ( ! [X54] : (~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK11('const.num.|48|_0',X54,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f869])).
fof(f2398,plain,(
  ( ! [X52,X53] : (s('type.num.num',X52) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0')),X53,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num',X52))))) ) | $spl28),
  inference(forward_demodulation,[],[f2361,f881])).
fof(f2361,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num',X52)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0')),X53,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f881])).
fof(f2397,plain,(
  ( ! [X50,X51] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50)),X51,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2360,f880])).
fof(f2360,plain,(
  ( ! [X50,X51] : (~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50)),X51,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f880])).
fof(f2396,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48)),X49,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X49),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2359,f875])).
fof(f2359,plain,(
  ( ! [X48,X49] : (~p(s(bool,happ(s(fun('type.num.num',bool),X49),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48)),X49,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f875])).
fof(f2394,plain,(
  ( ! [X39,X38] : (s('type.num.num',X38) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0')),X39,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X38))))) ) | $spl28),
  inference(forward_demodulation,[],[f2355,f872])).
fof(f2355,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X38)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0')),X39,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f872])).
fof(f2393,plain,(
  ( ! [X37,X36] : (s('type.num.num',X36) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',X36))))) ) | $spl28),
  inference(forward_demodulation,[],[f2354,f871])).
fof(f2354,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',X36)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)),X37,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f871])).
fof(f2390,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2351,f911])).
fof(f2351,plain,(
  ( ! [X33] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f911])).
fof(f2387,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2348,f824])).
fof(f2348,plain,(
  ( ! [X28] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X28,bool))) )),
  inference(superposition,[],[f270,f824])).
fof(f2384,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2345,f823])).
fof(f2345,plain,(
  ( ! [X23] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X23,bool))) )),
  inference(superposition,[],[f270,f823])).
fof(f2383,plain,(
  ( ! [X21,X22] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X22,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(forward_demodulation,[],[f2344,f823])).
fof(f2344,plain,(
  ( ! [X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X22,bool)) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f270,f1836])).
fof(f2336,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X4)))) | s(bool,'F_0') = s(bool,sK11('F_0',X5,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f270,f231])).
fof(f2373,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X0) = s(bool,sK11(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2334,f823])).
fof(f2334,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,X0) = s(bool,sK11(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f270,f1836])).
fof(f2293,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) ) | $spl28),
  inference(superposition,[],[f887,f238])).
fof(f2208,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f306,f289])).
fof(f2199,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f289,f306])).
fof(f2072,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f1393])).
fof(f2071,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f870])).
fof(f2140,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2068,f911])).
fof(f2068,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f909])).
fof(f2139,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f2067,f911])).
fof(f2067,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f305,f1930])).
fof(f2138,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2066,f911])).
fof(f2066,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30)))))))) ) | $spl28),
  inference(superposition,[],[f305,f883])).
fof(f2137,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2065,f911])).
fof(f2065,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))))) ) | $spl28),
  inference(superposition,[],[f305,f882])).
fof(f2136,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2064,f1393])).
fof(f2064,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f891])).
fof(f2135,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2063,f911])).
fof(f2063,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f879])).
fof(f2134,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) ) | $spl28),
  inference(forward_demodulation,[],[f2062,f911])).
fof(f2062,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) ) | $spl28),
  inference(superposition,[],[f305,f878])).
fof(f2060,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f881])).
fof(f2131,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) ) | $spl28),
  inference(forward_demodulation,[],[f2059,f911])).
fof(f2059,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) ) | $spl28),
  inference(superposition,[],[f305,f880])).
fof(f2130,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X15)))) ) | $spl28),
  inference(forward_demodulation,[],[f2058,f911])).
fof(f2058,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X15)))) ) | $spl28),
  inference(superposition,[],[f305,f875])).
fof(f2055,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))) )),
  inference(superposition,[],[f305,f289])).
fof(f2054,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f872])).
fof(f2053,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))) ) | $spl28),
  inference(superposition,[],[f305,f871])).
fof(f2052,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f305,f1393])).
fof(f2127,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2050,f911])).
fof(f2050,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f911])).
fof(f1836,plain,(
  ( ! [X19] : (s(bool,X19) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f1827,f208])).
fof(f1827,plain,(
  ( ! [X19] : (p(s(bool,'F_0')) | s(bool,X19) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f455,f823])).
fof(f1834,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(subsumption_resolution,[],[f1824,f208])).
fof(f1824,plain,(
  ( ! [X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(superposition,[],[f455,f1453])).
fof(f1832,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(subsumption_resolution,[],[f1821,f208])).
fof(f1821,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(superposition,[],[f455,f877])).
fof(f1831,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(subsumption_resolution,[],[f1820,f208])).
fof(f1820,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(superposition,[],[f455,f874])).
fof(f1722,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1446,f885])).
fof(f1707,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f291,f231])).
fof(f1639,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f225,f1393])).
fof(f1638,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f226,f1393])).
fof(f1601,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f290,f231])).
fof(f1545,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1445,f886])).
fof(f1511,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X34))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35)))))) ) | $spl28),
  inference(superposition,[],[f886,f289])).
fof(f1510,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | $spl28),
  inference(superposition,[],[f885,f289])).
fof(f1453,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(unit_resulting_resolution,[],[f208,f1316,f301])).
fof(f1445,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(superposition,[],[f1426,f226])).
fof(f1444,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f1426,f870])).
fof(f1446,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f1428,f226])).
fof(f1428,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1426,f885])).
fof(f1426,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(subsumption_resolution,[],[f1425,f208])).
fof(f1425,plain,(
  ( ! [X18] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1424,f874])).
fof(f1424,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1423,f328])).
fof(f1423,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1413,f884])).
fof(f1413,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(superposition,[],[f913,f226])).
fof(f1394,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f226,f870])).
fof(f1356,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f1355,f225])).
fof(f1355,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1349,f884])).
fof(f1349,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) ) | $spl28),
  inference(superposition,[],[f913,f225])).
fof(f1354,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f1353,f225])).
fof(f1353,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1348,f884])).
fof(f1348,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) ) | $spl28),
  inference(superposition,[],[f912,f225])).
fof(f1331,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f225,f870])).
fof(f1316,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f1312,f884])).
fof(f1312,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(unit_resulting_resolution,[],[f1291,f912])).
fof(f1310,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f1265,f208])).
fof(f1265,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f913,f231])).
fof(f1307,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f1306,f208])).
fof(f1306,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f1305,f874])).
fof(f1305,plain,(
  ( ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f1262,f328])).
fof(f1262,plain,(
  ( ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f913,f891])).
fof(f916,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f907,f869])).
fof(f907,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f755])).
fof(f915,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f906,f869])).
fof(f906,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f752])).
fof(f914,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(forward_demodulation,[],[f905,f869])).
fof(f905,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f751])).
fof(f904,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f869,f714])).
fof(f903,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f869,f692])).
fof(f912,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl28),
  inference(forward_demodulation,[],[f898,f869])).
fof(f898,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f324])).
fof(f897,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f323])).
fof(f896,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f322])).
fof(f895,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f319])).
fof(f894,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f318])).
fof(f885,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f869,f232])).
fof(f884,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f228])).
fof(f877,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f216])).
fof(f876,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f869,f215])).
fof(f824,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f806,f432])).
fof(f806,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f221,f792])).
fof(f823,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f805,f439])).
fof(f805,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f222,f792])).
fof(f755,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f220])).
fof(f752,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f211])).
fof(f751,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f232,f210])).
fof(f715,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f222,f231])).
fof(f714,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f222,f207])).
fof(f693,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f221,f231])).
fof(f692,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f221,f207])).
fof(f216,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X10] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|20')).
fof(f439,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f208,f209,f301])).
fof(f460,plain,(
  ( ! [X5] : (p(s(bool,X5)) | s(bool,'F_0') = s(bool,X5)) )),
  inference(forward_demodulation,[],[f459,f213])).
fof(f459,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f444,f208])).
fof(f444,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,X5)) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f301,f213])).
fof(f330,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f296,f290])).
fof(f296,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X10,X9] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|25')).
fof(f323,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f290,f229])).
fof(f322,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f290,f230])).
fof(f314,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f252,f207])).
fof(f252,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f295,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|28')).
fof(f294,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|31')).
fof(f228,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X10] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|27')).
fof(f324,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f291,f236])).
fof(f249,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f250,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f269,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f186])).
fof(f270,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK11(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f186])).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X10] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X10))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|32')).
fof(f221,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X10] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X10))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|33')).
fof(f276,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f129])).
fof(f129,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X19,X20,X21] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X19))),s('type.list.list'(X6),X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.APPEND|split|1')).
fof(f263,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))) <=> ? [X21,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_EQ_NUM_compute|split|2')).
fof(f264,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f266,f207])).
fof(f266,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) <=> ? [X21,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_EQ_NUM_compute|split|1')).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f277,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)),s('type.list.list'(X0),sK15(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X7,X23,X24] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))) <=> ? [X19,X20] : (s('type.num.num',X23) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.num.num',X24) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_EQ_SUM')).
fof(f279,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)),s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f193])).
fof(f278,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f281,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK16(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X0),sK17(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X23,X24] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))) <=> ? [X19,X20] : (s('type.num.num',X23) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.num.num',X24) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.list.LENGTH_EQ_SUM')).
fof(f283,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X0),sK17(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f282,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f280,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f193])).
fof(f318,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f268,f207])).
fof(f268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f225,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|16')).
fof(f297,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|5')).
fof(f298,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|12')).
fof(f299,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|8')).
fof(f300,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|2')).
fof(f305,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X10,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) <=> s('type.num.num',X9) = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|19')).
fof(f306,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f432,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f429,f208])).
fof(f429,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f205,f231])).
fof(f424,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f208,f231])).
fof(f420,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f231,f231])).
fof(f307,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0',aHL_EXT)).
fof(f304,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f155])).
fof(f317,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f253,f207])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f316,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f254,f207])).
fof(f254,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f170])).
fof(f247,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f248,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f167])).
fof(f236,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f162])).
fof(f232,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f160])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|24')).
fof(f229,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|21')).
fof(f215,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X10] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|29')).
fof(f209,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f60])).
fof(f60,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|34')).
fof(f205,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f61])).
fof(f61,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.numeral.numeral_distrib|split|35')).
fof(f204,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0',aHL_TRUTH)).
fof(f2956,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(cnf_transformation,[],[f2956_D])).
fof(f2956_D,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f4396,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554,f3553,f3572,f2820])).
fof(f4395,plain,(
  $false | ($spl0 | $spl28 | $spl40 | $spl48)),
  inference(global_subsumption,[],[f2908,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554,f3553,f3572])).
fof(f4394,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554,f3553,f3572])).
fof(f4393,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554,f3553])).
fof(f4392,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579,f3554])).
fof(f4391,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694,f3579])).
fof(f4390,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675,f3694])).
fof(f4389,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677,f3675])).
fof(f4388,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707,f3677])).
fof(f4387,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062,f3707])).
fof(f4386,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042,f4062])).
fof(f4385,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043,f4042])).
fof(f4384,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069,f4043])).
fof(f4383,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364,f4069])).
fof(f4382,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376,f4364])).
fof(f4381,plain,(
  $false | ($spl0 | $spl28 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f4368,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376])).
fof(f4368,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4367,f2322])).
fof(f4367,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4357,f2295])).
fof(f4357,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(unit_resulting_resolution,[],[f2295,f3691])).
fof(f4380,plain,(
  $false | ($spl0 | $spl28 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f4373,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376])).
fof(f4373,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4372,f2322])).
fof(f4372,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4362,f2295])).
fof(f4362,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(trivial_inequality_removal,[],[f4360])).
fof(f4360,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(superposition,[],[f3691,f2295])).
fof(f4379,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f223,f306,f305,f300,f299,f298,f297,f226,f225,f227,f207,f318,f280,f265,f259,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f322,f323,f290,f328,f329,f330,f460,f439,f216,f213,f208,f692,f693,f714,f715,f751,f752,f753,f754,f755,f756,f757,f758,f759,f760,f792,f823,f824,f772,f869,f870,f871,f872,f873,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f891,f894,f895,f896,f897,f912,f913,f903,f904,f914,f915,f916,f909,f911,f1291,f1307,f1310,f1316,f1311,f1331,f1354,f1356,f1393,f1394,f1426,f1446,f1444,f1445,f1453,f1510,f1511,f1545,f1601,f1638,f1639,f1707,f1722,f1831,f1832,f1834,f1836,f1883,f1930,f2127,f2052,f2053,f2054,f2055,f2130,f2131,f2060,f2134,f2135,f2136,f2137,f2138,f2139,f2140,f2071,f2072,f2199,f2208,f2293,f2322,f2373,f2336,f2383,f2384,f2387,f2390,f2393,f2394,f2396,f2397,f2398,f2399,f2400,f2401,f2403,f2404,f2405,f2406,f2456,f2490,f2562,f2569,f2607,f2594,f2595,f2741,f2820,f2851,f2763,f2296,f3035,f2381,f2378,f2376,f2374,f889,f890,f262,f261,f260,f2379,f2389,f2391,f2392,f2402,f2356,f2407,f2395,f2386,f2385,f2615,f2382,f2765,f2854,f2377,f2500,f274,f272,f271,f1513,f1514,f287,f285,f288,f286,f892,f893,f3122,f3123,f3124,f3287,f3288,f3328,f3313,f3331,f3332,f3333,f3348,f3549,f3582,f3645,f3687,f3670,f3689,f3690,f3691,f3711,f4011,f4036,f4074,f4291,f4312,f4355,f4356,f4376])).
fof(f4378,plain,(
  $false | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f4377,f208])).
fof(f4377,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl50)),
  inference(forward_demodulation,[],[f4376,f2957])).
fof(f4375,plain,(
  $false | ($spl28 | $spl38 | $spl50)),
  inference(subsumption_resolution,[],[f4374,f208])).
fof(f4374,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl38 | $spl50)),
  inference(forward_demodulation,[],[f4373,f2957])).
fof(f4370,plain,(
  $false | ($spl28 | $spl38 | $spl50)),
  inference(subsumption_resolution,[],[f4369,f208])).
fof(f4369,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl38 | $spl50)),
  inference(forward_demodulation,[],[f4368,f2957])).
fof(f4366,plain,(
  $false | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f4365,f208])).
fof(f4365,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl50)),
  inference(forward_demodulation,[],[f4364,f2957])).
fof(f3034,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) | $spl92),
  inference(cnf_transformation,[],[f3034_D])).
fof(f3034_D,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f3011,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl57),
  inference(cnf_transformation,[],[f3011_D])).
fof(f3011_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f3005,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2389])).
fof(f3033,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | $spl90),
  inference(cnf_transformation,[],[f3033_D])).
fof(f3033_D,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f3004,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f2391])).
fof(f3032,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | $spl88),
  inference(cnf_transformation,[],[f3032_D])).
fof(f3032_D,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f3003,plain,(
  ( ! [X35] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f2392])).
fof(f3031,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | $spl86),
  inference(cnf_transformation,[],[f3031_D])).
fof(f3031_D,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f3002,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f2402])).
fof(f3030,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) | $spl84),
  inference(cnf_transformation,[],[f3030_D])).
fof(f3030_D,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f3001,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2356])).
fof(f3029,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) | $spl82),
  inference(cnf_transformation,[],[f3029_D])).
fof(f3029_D,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f3000,plain,(
  ( ! [X68,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2407])).
fof(f3028,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) | $spl80),
  inference(cnf_transformation,[],[f3028_D])).
fof(f3028_D,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f2999,plain,(
  ( ! [X47,X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2395])).
fof(f3027,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) | $spl78),
  inference(cnf_transformation,[],[f3027_D])).
fof(f3027_D,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f2998,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2386])).
fof(f3026,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) | $spl76),
  inference(cnf_transformation,[],[f3026_D])).
fof(f3026_D,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f2997,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2385])).
fof(f3024,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) | $spl74),
  inference(cnf_transformation,[],[f3024_D])).
fof(f3024_D,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f2995,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2382])).
fof(f3021,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) | $spl72),
  inference(cnf_transformation,[],[f3021_D])).
fof(f3021_D,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f2992,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f2377])).
fof(f3010,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl56),
  inference(cnf_transformation,[],[f3010_D])).
fof(f3010_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f3019,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl70),
  inference(cnf_transformation,[],[f3019_D])).
fof(f3019_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f3007,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl42),
  inference(condensation,[],[f2990])).
fof(f2990,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f274])).
fof(f3008,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl42),
  inference(condensation,[],[f2989])).
fof(f2989,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f272])).
fof(f2988,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f271])).
fof(f3018,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | $spl68),
  inference(cnf_transformation,[],[f3018_D])).
fof(f3018_D,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f2987,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f1513])).
fof(f3017,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | $spl66),
  inference(cnf_transformation,[],[f3017_D])).
fof(f3017_D,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f2986,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f1514])).
fof(f3016,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) | $spl64),
  inference(cnf_transformation,[],[f3016_D])).
fof(f3016_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f2985,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f287])).
fof(f3015,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) | $spl62),
  inference(cnf_transformation,[],[f3015_D])).
fof(f3015_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f2984,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f285])).
fof(f3014,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))))))) ) | $spl60),
  inference(cnf_transformation,[],[f3014_D])).
fof(f3014_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f2983,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) ) | $spl42),
  inference(backward_demodulation,[],[f2717,f288])).
fof(f3012,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl58),
  inference(cnf_transformation,[],[f3012_D])).
fof(f3012_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f2981,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f892])).
fof(f3009,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl54),
  inference(cnf_transformation,[],[f3009_D])).
fof(f3009_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f2980,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2717,f893])).
fof(f2979,plain,(
  $false | ($spl9 | $spl46 | $spl50)),
  inference(subsumption_resolution,[],[f2978,f436])).
fof(f2978,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl46 | $spl50)),
  inference(backward_demodulation,[],[f2906,f2957])).
fof(f2975,plain,(
  $false | ($spl2 | $spl4)),
  inference(subsumption_resolution,[],[f312,f310])).
fof(f2974,plain,(
  $false | ($spl0 | $spl28 | $spl33 | $spl40)),
  inference(subsumption_resolution,[],[f2973,f910])).
fof(f910,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl33)),
  inference(backward_demodulation,[],[f869,f776])).
fof(f2973,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl0 | $spl28 | $spl40)),
  inference(forward_demodulation,[],[f2972,f2296])).
fof(f2972,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f308,f870])).
fof(f2971,plain,(
  $false | ($spl9 | $spl28 | $spl40 | $spl45)),
  inference(subsumption_resolution,[],[f2970,f436])).
fof(f2970,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl28 | $spl40 | $spl45)),
  inference(forward_demodulation,[],[f2968,f873])).
fof(f2968,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl40 | $spl45)),
  inference(backward_demodulation,[],[f2296,f2963])).
fof(f2963,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(forward_demodulation,[],[f2768,f823])).
fof(f2768,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(unit_resulting_resolution,[],[f2719,f1836])).
fof(f2969,plain,(
  $false | ($spl28 | $spl40 | $spl45)),
  inference(subsumption_resolution,[],[f2967,f873])).
fof(f2967,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl40 | $spl45)),
  inference(backward_demodulation,[],[f2296,f2719])).
fof(f2957,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl50),
  inference(cnf_transformation,[],[f2957_D])).
fof(f2957_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2959,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl52),
  inference(cnf_transformation,[],[f2959_D])).
fof(f2959_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f2881,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(superposition,[],[f2755,f870])).
fof(f2755,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2742,f2310])).
fof(f2310,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(unit_resulting_resolution,[],[f208,f2298,f301])).
fof(f2298,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl41)),
  inference(unit_resulting_resolution,[],[f2297,f912])).
fof(f2742,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f896,f2424])).
fof(f2424,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl28 | $spl41)),
  inference(subsumption_resolution,[],[f2416,f208])).
fof(f2416,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f455,f2310])).
fof(f2906,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl46),
  inference(cnf_transformation,[],[f2906_D])).
fof(f2906_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2908,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl48),
  inference(cnf_transformation,[],[f2908_D])).
fof(f2908_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f2938,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2937,f891])).
fof(f2937,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2936,f2741])).
fof(f2936,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2874,f896])).
fof(f2874,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f2755,f891])).
fof(f2904,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2903,f870])).
fof(f2903,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2902,f2741])).
fof(f2902,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2861,f1393])).
fof(f2861,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(superposition,[],[f2755,f870])).
fof(f2717,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl42),
  inference(cnf_transformation,[],[f2717_D])).
fof(f2717_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2719,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(cnf_transformation,[],[f2719_D])).
fof(f2719_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f2682,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(equality_factoring,[],[f2424])).
fof(f2295,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl38),
  inference(cnf_transformation,[],[f2295_D])).
fof(f2295_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2297,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl41),
  inference(cnf_transformation,[],[f2297_D])).
fof(f2297_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f2292,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl4 | $spl28)),
  inference(superposition,[],[f887,f312])).
fof(f1906,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f1906_D])).
fof(f1906_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1908,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl37),
  inference(cnf_transformation,[],[f1908_D])).
fof(f1908_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f1883,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(equality_factoring,[],[f1836])).
fof(f854,plain,(
  $false | $spl17),
  inference(subsumption_resolution,[],[f853,f204])).
fof(f853,plain,(
  ~p(s(bool,'T_0')) | $spl17),
  inference(forward_demodulation,[],[f852,f212])).
fof(f852,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl17),
  inference(forward_demodulation,[],[f834,f228])).
fof(f834,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl17),
  inference(unit_resulting_resolution,[],[f764,f324])).
fof(f774,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl30),
  inference(cnf_transformation,[],[f774_D])).
fof(f774_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f776,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl33),
  inference(cnf_transformation,[],[f776_D])).
fof(f776_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f760,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f232,f207])).
fof(f772,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl28),
  inference(cnf_transformation,[],[f772_D])).
fof(f772_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f764,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl17),
  inference(cnf_transformation,[],[f764_D])).
fof(f764_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f759,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f232,f206])).
fof(f768,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl24),
  inference(cnf_transformation,[],[f768_D])).
fof(f768_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f770,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl27),
  inference(cnf_transformation,[],[f770_D])).
fof(f770_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f758,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f313])).
fof(f767,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f767_D])).
fof(f767_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f757,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f218])).
fof(f766,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) | $spl20),
  inference(cnf_transformation,[],[f766_D])).
fof(f766_D,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f756,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f232,f217])).
fof(f765,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) | $spl18),
  inference(cnf_transformation,[],[f765_D])).
fof(f765_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f754,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) )),
  inference(superposition,[],[f232,f219])).
fof(f762,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f762_D])).
fof(f762_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f753,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(superposition,[],[f232,f214])).
fof(f562,plain,(
  $false | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f543,f529])).
fof(f529,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl10),
  inference(subsumption_resolution,[],[f490,f204])).
fof(f490,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl10),
  inference(backward_demodulation,[],[f457,f324])).
fof(f543,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f529,f518])).
fof(f518,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f503,f331])).
fof(f331,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl1),
  inference(forward_demodulation,[],[f309,f207])).
fof(f503,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl10),
  inference(subsumption_resolution,[],[f478,f204])).
fof(f478,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl10),
  inference(backward_demodulation,[],[f457,f315])).
fof(f502,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f467,f204])).
fof(f467,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(backward_demodulation,[],[f457,f208])).
fof(f457,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f457_D])).
fof(f457_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f458,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl12),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f456,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f443,f424])).
fof(f443,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f301,f231])).
fof(f434,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f434_D])).
fof(f434_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f436,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(cnf_transformation,[],[f436_D])).
fof(f436_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f431,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f231])).
fof(f308,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(cnf_transformation,[],[f308_D])).
fof(f308_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f312,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f202,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f158])).
fof(f158,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f157])).
fof(f157,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ? [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <~> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f70])).
fof(f70,plain,(
  ~! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ~! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X8] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X8] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|0','thm.quantHeuristics.LIST_LENGTH_|49||split|0')).
fof(f309,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f310,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | $spl2),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0')))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f203,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f159])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 227
% Passive clauses: 1310
% Generated clauses: 9972
% Final active clauses: 121
% Final passive clauses: 739
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 58
% Trivial inequalities: 98
% Fw subsumption resolutions: 276
% Fw demodulations: 2873
% Bw demodulations: 228
% Condensations: 11
% Global subsumptions: 19
% 
% Simple tautologies: 30
% Equational tautologies: 55
% Forward subsumptions: 5063
% Fw demodulations to eq. taut.: 82
% 
% Unit resulting resolution: 569
% Factoring: 1
% Forward superposition: 2759
% Backward superposition: 2631
% Self superposition: 65
% Equality factoring: 20
% Equality resolution: 9
% 
% Split clauses: 43
% Split components: 86
% SAT solver clauses: 1471
% SAT solver unit clauses: 82
% SAT solver binary clauses: 456
% 
% Sat splits: 43
% Sat splitting refutations: 54
% 
% Memory used [KB]: 9210
% Time elapsed: 0.326 s
% ------------------------------
% ------------------------------
% Success in time 1.647 s
