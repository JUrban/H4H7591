Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.pair
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pair
% SZS output start Proof for thm.pair
fof(f772,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f771,f40,f65,f63,f116,f117,f41,f61,f60])).
fof(f60,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),X5))))) ) | $spl0),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),X5))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f61,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,X3),s(sK1,X4))))))) ) | $spl2),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,X3),s(sK1,X4))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f41,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,X3),s(sK1,X4)))))) | ~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),X5))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  (p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),sK3)))) | p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK4),s(sK1,sK5))))))) & (! [X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),X5)))) | ! [X3,X4] : ~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,X3),s(sK1,X4)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f33])).
fof(f33,plain,(
  ? [X0,X1,X2] : ((? [X8] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | ? [X6,X7] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X6),s(X1,X7))))))) & (! [X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X5)))) | ! [X3,X4] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4))))))))),
  inference(rectify,[],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2] : ((? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) | ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))))))) & (! [X3] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) | ! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <~> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : ! [X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (? [X9] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X7),bool),X8),s('type.pair.prod'(X6,X7),X9)))) <=> ? [X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X7),bool),X8),s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (? [X9] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X7),bool),X8),s('type.pair.prod'(X6,X7),X9)))) <=> ? [X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X7),bool),X8),s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X10),s(X7,X11)))))))),
  file('thm.pair.EXISTS_PROD','thm.pair.EXISTS_PROD')).
fof(f117,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f65,f60])).
fof(f116,plain,(
  $false | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f63,f60])).
fof(f63,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f65,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK4),s(sK1,sK5)))))) | $spl6),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK4),s(sK1,sK5)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f40,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK4),s(sK1,sK5)))))) | p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),sK3))))),
  inference(cnf_transformation,[],[f34])).
fof(f771,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.pair.prod'(sK0,sK1),bool),sK2),s('type.pair.prod'(sK0,sK1),X0))))) ) | $spl2),
  inference(superposition,[],[f61,f58])).
fof(f58,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X15] : s('type.pair.prod'(X6,X7),X15) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X15))),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X15)))))),
  file('thm.pair.EXISTS_PROD','thm.pair.PAIR')).
% SZS output end Proof for thm.pair
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 140
% Generated clauses: 694
% Final active clauses: 19
% Final passive clauses: 102
% Input formulas: 12
% Initial clauses: 20
% 
% Duplicate literals: 85
% Trivial inequalities: 15
% Fw subsumption resolutions: 89
% Fw demodulations: 2
% Bw demodulations: 1
% 
% Simple tautologies: 42
% Equational tautologies: 28
% Forward subsumptions: 292
% 
% Binary resolution: 35
% Factoring: 1
% Forward superposition: 86
% Backward superposition: 255
% Self superposition: 43
% Equality factoring: 50
% Equality resolution: 3
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 16
% SAT solver unit clauses: 4
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 8
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 4
% 
% Memory used [KB]: 767
% Time elapsed: 0.022 s
% ------------------------------
% ------------------------------
% Success in time 0.024 s
